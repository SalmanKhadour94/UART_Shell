
salman1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005000  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  080051f8  080051f8  000151f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005294  08005294  0002016c  2**0
                  CONTENTS
  4 .ARM          00000008  08005294  08005294  00015294  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800529c  0800529c  0002016c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800529c  0800529c  0001529c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080052a0  080052a0  000152a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  080052a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000002c  080052d0  0002002c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200000cc  08005370  000200cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000714  2000016c  08005410  0002016c  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20000880  08005410  00020880  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0002016c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00013c7f  00000000  00000000  0002019a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002c24  00000000  00000000  00033e19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000e50  00000000  00000000  00036a40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000d28  00000000  00000000  00037890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00028ff2  00000000  00000000  000385b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000125aa  00000000  00000000  000615aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f9752  00000000  00000000  00073b54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  0016d2a6  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00003a4c  00000000  00000000  0016d2f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000016c 	.word	0x2000016c
 8000214:	00000000 	.word	0x00000000
 8000218:	080051e0 	.word	0x080051e0

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000170 	.word	0x20000170
 8000234:	080051e0 	.word	0x080051e0

08000238 <strcmp>:
 8000238:	f810 2b01 	ldrb.w	r2, [r0], #1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000240:	2a01      	cmp	r2, #1
 8000242:	bf28      	it	cs
 8000244:	429a      	cmpcs	r2, r3
 8000246:	d0f7      	beq.n	8000238 <strcmp>
 8000248:	1ad0      	subs	r0, r2, r3
 800024a:	4770      	bx	lr

0800024c <__aeabi_uldivmod>:
 800024c:	b953      	cbnz	r3, 8000264 <__aeabi_uldivmod+0x18>
 800024e:	b94a      	cbnz	r2, 8000264 <__aeabi_uldivmod+0x18>
 8000250:	2900      	cmp	r1, #0
 8000252:	bf08      	it	eq
 8000254:	2800      	cmpeq	r0, #0
 8000256:	bf1c      	itt	ne
 8000258:	f04f 31ff 	movne.w	r1, #4294967295
 800025c:	f04f 30ff 	movne.w	r0, #4294967295
 8000260:	f000 b974 	b.w	800054c <__aeabi_idiv0>
 8000264:	f1ad 0c08 	sub.w	ip, sp, #8
 8000268:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800026c:	f000 f806 	bl	800027c <__udivmoddi4>
 8000270:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000274:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000278:	b004      	add	sp, #16
 800027a:	4770      	bx	lr

0800027c <__udivmoddi4>:
 800027c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000280:	9d08      	ldr	r5, [sp, #32]
 8000282:	4604      	mov	r4, r0
 8000284:	468e      	mov	lr, r1
 8000286:	2b00      	cmp	r3, #0
 8000288:	d14d      	bne.n	8000326 <__udivmoddi4+0xaa>
 800028a:	428a      	cmp	r2, r1
 800028c:	4694      	mov	ip, r2
 800028e:	d969      	bls.n	8000364 <__udivmoddi4+0xe8>
 8000290:	fab2 f282 	clz	r2, r2
 8000294:	b152      	cbz	r2, 80002ac <__udivmoddi4+0x30>
 8000296:	fa01 f302 	lsl.w	r3, r1, r2
 800029a:	f1c2 0120 	rsb	r1, r2, #32
 800029e:	fa20 f101 	lsr.w	r1, r0, r1
 80002a2:	fa0c fc02 	lsl.w	ip, ip, r2
 80002a6:	ea41 0e03 	orr.w	lr, r1, r3
 80002aa:	4094      	lsls	r4, r2
 80002ac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002b0:	0c21      	lsrs	r1, r4, #16
 80002b2:	fbbe f6f8 	udiv	r6, lr, r8
 80002b6:	fa1f f78c 	uxth.w	r7, ip
 80002ba:	fb08 e316 	mls	r3, r8, r6, lr
 80002be:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002c2:	fb06 f107 	mul.w	r1, r6, r7
 80002c6:	4299      	cmp	r1, r3
 80002c8:	d90a      	bls.n	80002e0 <__udivmoddi4+0x64>
 80002ca:	eb1c 0303 	adds.w	r3, ip, r3
 80002ce:	f106 30ff 	add.w	r0, r6, #4294967295
 80002d2:	f080 811f 	bcs.w	8000514 <__udivmoddi4+0x298>
 80002d6:	4299      	cmp	r1, r3
 80002d8:	f240 811c 	bls.w	8000514 <__udivmoddi4+0x298>
 80002dc:	3e02      	subs	r6, #2
 80002de:	4463      	add	r3, ip
 80002e0:	1a5b      	subs	r3, r3, r1
 80002e2:	b2a4      	uxth	r4, r4
 80002e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002e8:	fb08 3310 	mls	r3, r8, r0, r3
 80002ec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002f0:	fb00 f707 	mul.w	r7, r0, r7
 80002f4:	42a7      	cmp	r7, r4
 80002f6:	d90a      	bls.n	800030e <__udivmoddi4+0x92>
 80002f8:	eb1c 0404 	adds.w	r4, ip, r4
 80002fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000300:	f080 810a 	bcs.w	8000518 <__udivmoddi4+0x29c>
 8000304:	42a7      	cmp	r7, r4
 8000306:	f240 8107 	bls.w	8000518 <__udivmoddi4+0x29c>
 800030a:	4464      	add	r4, ip
 800030c:	3802      	subs	r0, #2
 800030e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000312:	1be4      	subs	r4, r4, r7
 8000314:	2600      	movs	r6, #0
 8000316:	b11d      	cbz	r5, 8000320 <__udivmoddi4+0xa4>
 8000318:	40d4      	lsrs	r4, r2
 800031a:	2300      	movs	r3, #0
 800031c:	e9c5 4300 	strd	r4, r3, [r5]
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	428b      	cmp	r3, r1
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0xc2>
 800032a:	2d00      	cmp	r5, #0
 800032c:	f000 80ef 	beq.w	800050e <__udivmoddi4+0x292>
 8000330:	2600      	movs	r6, #0
 8000332:	e9c5 0100 	strd	r0, r1, [r5]
 8000336:	4630      	mov	r0, r6
 8000338:	4631      	mov	r1, r6
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	fab3 f683 	clz	r6, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d14a      	bne.n	80003dc <__udivmoddi4+0x160>
 8000346:	428b      	cmp	r3, r1
 8000348:	d302      	bcc.n	8000350 <__udivmoddi4+0xd4>
 800034a:	4282      	cmp	r2, r0
 800034c:	f200 80f9 	bhi.w	8000542 <__udivmoddi4+0x2c6>
 8000350:	1a84      	subs	r4, r0, r2
 8000352:	eb61 0303 	sbc.w	r3, r1, r3
 8000356:	2001      	movs	r0, #1
 8000358:	469e      	mov	lr, r3
 800035a:	2d00      	cmp	r5, #0
 800035c:	d0e0      	beq.n	8000320 <__udivmoddi4+0xa4>
 800035e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000362:	e7dd      	b.n	8000320 <__udivmoddi4+0xa4>
 8000364:	b902      	cbnz	r2, 8000368 <__udivmoddi4+0xec>
 8000366:	deff      	udf	#255	; 0xff
 8000368:	fab2 f282 	clz	r2, r2
 800036c:	2a00      	cmp	r2, #0
 800036e:	f040 8092 	bne.w	8000496 <__udivmoddi4+0x21a>
 8000372:	eba1 010c 	sub.w	r1, r1, ip
 8000376:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800037a:	fa1f fe8c 	uxth.w	lr, ip
 800037e:	2601      	movs	r6, #1
 8000380:	0c20      	lsrs	r0, r4, #16
 8000382:	fbb1 f3f7 	udiv	r3, r1, r7
 8000386:	fb07 1113 	mls	r1, r7, r3, r1
 800038a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038e:	fb0e f003 	mul.w	r0, lr, r3
 8000392:	4288      	cmp	r0, r1
 8000394:	d908      	bls.n	80003a8 <__udivmoddi4+0x12c>
 8000396:	eb1c 0101 	adds.w	r1, ip, r1
 800039a:	f103 38ff 	add.w	r8, r3, #4294967295
 800039e:	d202      	bcs.n	80003a6 <__udivmoddi4+0x12a>
 80003a0:	4288      	cmp	r0, r1
 80003a2:	f200 80cb 	bhi.w	800053c <__udivmoddi4+0x2c0>
 80003a6:	4643      	mov	r3, r8
 80003a8:	1a09      	subs	r1, r1, r0
 80003aa:	b2a4      	uxth	r4, r4
 80003ac:	fbb1 f0f7 	udiv	r0, r1, r7
 80003b0:	fb07 1110 	mls	r1, r7, r0, r1
 80003b4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003b8:	fb0e fe00 	mul.w	lr, lr, r0
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x156>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c8:	d202      	bcs.n	80003d0 <__udivmoddi4+0x154>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	f200 80bb 	bhi.w	8000546 <__udivmoddi4+0x2ca>
 80003d0:	4608      	mov	r0, r1
 80003d2:	eba4 040e 	sub.w	r4, r4, lr
 80003d6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003da:	e79c      	b.n	8000316 <__udivmoddi4+0x9a>
 80003dc:	f1c6 0720 	rsb	r7, r6, #32
 80003e0:	40b3      	lsls	r3, r6
 80003e2:	fa22 fc07 	lsr.w	ip, r2, r7
 80003e6:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ea:	fa20 f407 	lsr.w	r4, r0, r7
 80003ee:	fa01 f306 	lsl.w	r3, r1, r6
 80003f2:	431c      	orrs	r4, r3
 80003f4:	40f9      	lsrs	r1, r7
 80003f6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003fa:	fa00 f306 	lsl.w	r3, r0, r6
 80003fe:	fbb1 f8f9 	udiv	r8, r1, r9
 8000402:	0c20      	lsrs	r0, r4, #16
 8000404:	fa1f fe8c 	uxth.w	lr, ip
 8000408:	fb09 1118 	mls	r1, r9, r8, r1
 800040c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000410:	fb08 f00e 	mul.w	r0, r8, lr
 8000414:	4288      	cmp	r0, r1
 8000416:	fa02 f206 	lsl.w	r2, r2, r6
 800041a:	d90b      	bls.n	8000434 <__udivmoddi4+0x1b8>
 800041c:	eb1c 0101 	adds.w	r1, ip, r1
 8000420:	f108 3aff 	add.w	sl, r8, #4294967295
 8000424:	f080 8088 	bcs.w	8000538 <__udivmoddi4+0x2bc>
 8000428:	4288      	cmp	r0, r1
 800042a:	f240 8085 	bls.w	8000538 <__udivmoddi4+0x2bc>
 800042e:	f1a8 0802 	sub.w	r8, r8, #2
 8000432:	4461      	add	r1, ip
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f9 	udiv	r0, r1, r9
 800043c:	fb09 1110 	mls	r1, r9, r0, r1
 8000440:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000444:	fb00 fe0e 	mul.w	lr, r0, lr
 8000448:	458e      	cmp	lr, r1
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x1e2>
 800044c:	eb1c 0101 	adds.w	r1, ip, r1
 8000450:	f100 34ff 	add.w	r4, r0, #4294967295
 8000454:	d26c      	bcs.n	8000530 <__udivmoddi4+0x2b4>
 8000456:	458e      	cmp	lr, r1
 8000458:	d96a      	bls.n	8000530 <__udivmoddi4+0x2b4>
 800045a:	3802      	subs	r0, #2
 800045c:	4461      	add	r1, ip
 800045e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000462:	fba0 9402 	umull	r9, r4, r0, r2
 8000466:	eba1 010e 	sub.w	r1, r1, lr
 800046a:	42a1      	cmp	r1, r4
 800046c:	46c8      	mov	r8, r9
 800046e:	46a6      	mov	lr, r4
 8000470:	d356      	bcc.n	8000520 <__udivmoddi4+0x2a4>
 8000472:	d053      	beq.n	800051c <__udivmoddi4+0x2a0>
 8000474:	b15d      	cbz	r5, 800048e <__udivmoddi4+0x212>
 8000476:	ebb3 0208 	subs.w	r2, r3, r8
 800047a:	eb61 010e 	sbc.w	r1, r1, lr
 800047e:	fa01 f707 	lsl.w	r7, r1, r7
 8000482:	fa22 f306 	lsr.w	r3, r2, r6
 8000486:	40f1      	lsrs	r1, r6
 8000488:	431f      	orrs	r7, r3
 800048a:	e9c5 7100 	strd	r7, r1, [r5]
 800048e:	2600      	movs	r6, #0
 8000490:	4631      	mov	r1, r6
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	f1c2 0320 	rsb	r3, r2, #32
 800049a:	40d8      	lsrs	r0, r3
 800049c:	fa0c fc02 	lsl.w	ip, ip, r2
 80004a0:	fa21 f303 	lsr.w	r3, r1, r3
 80004a4:	4091      	lsls	r1, r2
 80004a6:	4301      	orrs	r1, r0
 80004a8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ac:	fa1f fe8c 	uxth.w	lr, ip
 80004b0:	fbb3 f0f7 	udiv	r0, r3, r7
 80004b4:	fb07 3610 	mls	r6, r7, r0, r3
 80004b8:	0c0b      	lsrs	r3, r1, #16
 80004ba:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004be:	fb00 f60e 	mul.w	r6, r0, lr
 80004c2:	429e      	cmp	r6, r3
 80004c4:	fa04 f402 	lsl.w	r4, r4, r2
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x260>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f100 38ff 	add.w	r8, r0, #4294967295
 80004d2:	d22f      	bcs.n	8000534 <__udivmoddi4+0x2b8>
 80004d4:	429e      	cmp	r6, r3
 80004d6:	d92d      	bls.n	8000534 <__udivmoddi4+0x2b8>
 80004d8:	3802      	subs	r0, #2
 80004da:	4463      	add	r3, ip
 80004dc:	1b9b      	subs	r3, r3, r6
 80004de:	b289      	uxth	r1, r1
 80004e0:	fbb3 f6f7 	udiv	r6, r3, r7
 80004e4:	fb07 3316 	mls	r3, r7, r6, r3
 80004e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ec:	fb06 f30e 	mul.w	r3, r6, lr
 80004f0:	428b      	cmp	r3, r1
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x28a>
 80004f4:	eb1c 0101 	adds.w	r1, ip, r1
 80004f8:	f106 38ff 	add.w	r8, r6, #4294967295
 80004fc:	d216      	bcs.n	800052c <__udivmoddi4+0x2b0>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d914      	bls.n	800052c <__udivmoddi4+0x2b0>
 8000502:	3e02      	subs	r6, #2
 8000504:	4461      	add	r1, ip
 8000506:	1ac9      	subs	r1, r1, r3
 8000508:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800050c:	e738      	b.n	8000380 <__udivmoddi4+0x104>
 800050e:	462e      	mov	r6, r5
 8000510:	4628      	mov	r0, r5
 8000512:	e705      	b.n	8000320 <__udivmoddi4+0xa4>
 8000514:	4606      	mov	r6, r0
 8000516:	e6e3      	b.n	80002e0 <__udivmoddi4+0x64>
 8000518:	4618      	mov	r0, r3
 800051a:	e6f8      	b.n	800030e <__udivmoddi4+0x92>
 800051c:	454b      	cmp	r3, r9
 800051e:	d2a9      	bcs.n	8000474 <__udivmoddi4+0x1f8>
 8000520:	ebb9 0802 	subs.w	r8, r9, r2
 8000524:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000528:	3801      	subs	r0, #1
 800052a:	e7a3      	b.n	8000474 <__udivmoddi4+0x1f8>
 800052c:	4646      	mov	r6, r8
 800052e:	e7ea      	b.n	8000506 <__udivmoddi4+0x28a>
 8000530:	4620      	mov	r0, r4
 8000532:	e794      	b.n	800045e <__udivmoddi4+0x1e2>
 8000534:	4640      	mov	r0, r8
 8000536:	e7d1      	b.n	80004dc <__udivmoddi4+0x260>
 8000538:	46d0      	mov	r8, sl
 800053a:	e77b      	b.n	8000434 <__udivmoddi4+0x1b8>
 800053c:	3b02      	subs	r3, #2
 800053e:	4461      	add	r1, ip
 8000540:	e732      	b.n	80003a8 <__udivmoddi4+0x12c>
 8000542:	4630      	mov	r0, r6
 8000544:	e709      	b.n	800035a <__udivmoddi4+0xde>
 8000546:	4464      	add	r4, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e742      	b.n	80003d2 <__udivmoddi4+0x156>

0800054c <__aeabi_idiv0>:
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop

08000550 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000554:	4b1f      	ldr	r3, [pc, #124]	; (80005d4 <MX_ETH_Init+0x84>)
 8000556:	4a20      	ldr	r2, [pc, #128]	; (80005d8 <MX_ETH_Init+0x88>)
 8000558:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800055a:	4b20      	ldr	r3, [pc, #128]	; (80005dc <MX_ETH_Init+0x8c>)
 800055c:	2200      	movs	r2, #0
 800055e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000560:	4b1e      	ldr	r3, [pc, #120]	; (80005dc <MX_ETH_Init+0x8c>)
 8000562:	2280      	movs	r2, #128	; 0x80
 8000564:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000566:	4b1d      	ldr	r3, [pc, #116]	; (80005dc <MX_ETH_Init+0x8c>)
 8000568:	22e1      	movs	r2, #225	; 0xe1
 800056a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 800056c:	4b1b      	ldr	r3, [pc, #108]	; (80005dc <MX_ETH_Init+0x8c>)
 800056e:	2200      	movs	r2, #0
 8000570:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000572:	4b1a      	ldr	r3, [pc, #104]	; (80005dc <MX_ETH_Init+0x8c>)
 8000574:	2200      	movs	r2, #0
 8000576:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000578:	4b18      	ldr	r3, [pc, #96]	; (80005dc <MX_ETH_Init+0x8c>)
 800057a:	2200      	movs	r2, #0
 800057c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800057e:	4b15      	ldr	r3, [pc, #84]	; (80005d4 <MX_ETH_Init+0x84>)
 8000580:	4a16      	ldr	r2, [pc, #88]	; (80005dc <MX_ETH_Init+0x8c>)
 8000582:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000584:	4b13      	ldr	r3, [pc, #76]	; (80005d4 <MX_ETH_Init+0x84>)
 8000586:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800058a:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800058c:	4b11      	ldr	r3, [pc, #68]	; (80005d4 <MX_ETH_Init+0x84>)
 800058e:	4a14      	ldr	r2, [pc, #80]	; (80005e0 <MX_ETH_Init+0x90>)
 8000590:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000592:	4b10      	ldr	r3, [pc, #64]	; (80005d4 <MX_ETH_Init+0x84>)
 8000594:	4a13      	ldr	r2, [pc, #76]	; (80005e4 <MX_ETH_Init+0x94>)
 8000596:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000598:	4b0e      	ldr	r3, [pc, #56]	; (80005d4 <MX_ETH_Init+0x84>)
 800059a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800059e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80005a0:	480c      	ldr	r0, [pc, #48]	; (80005d4 <MX_ETH_Init+0x84>)
 80005a2:	f000 ffcf 	bl	8001544 <HAL_ETH_Init>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80005ac:	f000 fbcc 	bl	8000d48 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80005b0:	2238      	movs	r2, #56	; 0x38
 80005b2:	2100      	movs	r1, #0
 80005b4:	480c      	ldr	r0, [pc, #48]	; (80005e8 <MX_ETH_Init+0x98>)
 80005b6:	f004 fe0b 	bl	80051d0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80005ba:	4b0b      	ldr	r3, [pc, #44]	; (80005e8 <MX_ETH_Init+0x98>)
 80005bc:	2221      	movs	r2, #33	; 0x21
 80005be:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80005c0:	4b09      	ldr	r3, [pc, #36]	; (80005e8 <MX_ETH_Init+0x98>)
 80005c2:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80005c6:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80005c8:	4b07      	ldr	r3, [pc, #28]	; (80005e8 <MX_ETH_Init+0x98>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80005ce:	bf00      	nop
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	200001c0 	.word	0x200001c0
 80005d8:	40028000 	.word	0x40028000
 80005dc:	20000270 	.word	0x20000270
 80005e0:	200000cc 	.word	0x200000cc
 80005e4:	2000002c 	.word	0x2000002c
 80005e8:	20000188 	.word	0x20000188

080005ec <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b08e      	sub	sp, #56	; 0x38
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a4e      	ldr	r2, [pc, #312]	; (8000744 <HAL_ETH_MspInit+0x158>)
 800060a:	4293      	cmp	r3, r2
 800060c:	f040 8096 	bne.w	800073c <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000610:	4b4d      	ldr	r3, [pc, #308]	; (8000748 <HAL_ETH_MspInit+0x15c>)
 8000612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000614:	4a4c      	ldr	r2, [pc, #304]	; (8000748 <HAL_ETH_MspInit+0x15c>)
 8000616:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800061a:	6313      	str	r3, [r2, #48]	; 0x30
 800061c:	4b4a      	ldr	r3, [pc, #296]	; (8000748 <HAL_ETH_MspInit+0x15c>)
 800061e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000620:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000624:	623b      	str	r3, [r7, #32]
 8000626:	6a3b      	ldr	r3, [r7, #32]
 8000628:	4b47      	ldr	r3, [pc, #284]	; (8000748 <HAL_ETH_MspInit+0x15c>)
 800062a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062c:	4a46      	ldr	r2, [pc, #280]	; (8000748 <HAL_ETH_MspInit+0x15c>)
 800062e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000632:	6313      	str	r3, [r2, #48]	; 0x30
 8000634:	4b44      	ldr	r3, [pc, #272]	; (8000748 <HAL_ETH_MspInit+0x15c>)
 8000636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000638:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800063c:	61fb      	str	r3, [r7, #28]
 800063e:	69fb      	ldr	r3, [r7, #28]
 8000640:	4b41      	ldr	r3, [pc, #260]	; (8000748 <HAL_ETH_MspInit+0x15c>)
 8000642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000644:	4a40      	ldr	r2, [pc, #256]	; (8000748 <HAL_ETH_MspInit+0x15c>)
 8000646:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800064a:	6313      	str	r3, [r2, #48]	; 0x30
 800064c:	4b3e      	ldr	r3, [pc, #248]	; (8000748 <HAL_ETH_MspInit+0x15c>)
 800064e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000650:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000654:	61bb      	str	r3, [r7, #24]
 8000656:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000658:	4b3b      	ldr	r3, [pc, #236]	; (8000748 <HAL_ETH_MspInit+0x15c>)
 800065a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065c:	4a3a      	ldr	r2, [pc, #232]	; (8000748 <HAL_ETH_MspInit+0x15c>)
 800065e:	f043 0304 	orr.w	r3, r3, #4
 8000662:	6313      	str	r3, [r2, #48]	; 0x30
 8000664:	4b38      	ldr	r3, [pc, #224]	; (8000748 <HAL_ETH_MspInit+0x15c>)
 8000666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000668:	f003 0304 	and.w	r3, r3, #4
 800066c:	617b      	str	r3, [r7, #20]
 800066e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000670:	4b35      	ldr	r3, [pc, #212]	; (8000748 <HAL_ETH_MspInit+0x15c>)
 8000672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000674:	4a34      	ldr	r2, [pc, #208]	; (8000748 <HAL_ETH_MspInit+0x15c>)
 8000676:	f043 0301 	orr.w	r3, r3, #1
 800067a:	6313      	str	r3, [r2, #48]	; 0x30
 800067c:	4b32      	ldr	r3, [pc, #200]	; (8000748 <HAL_ETH_MspInit+0x15c>)
 800067e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000680:	f003 0301 	and.w	r3, r3, #1
 8000684:	613b      	str	r3, [r7, #16]
 8000686:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000688:	4b2f      	ldr	r3, [pc, #188]	; (8000748 <HAL_ETH_MspInit+0x15c>)
 800068a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068c:	4a2e      	ldr	r2, [pc, #184]	; (8000748 <HAL_ETH_MspInit+0x15c>)
 800068e:	f043 0302 	orr.w	r3, r3, #2
 8000692:	6313      	str	r3, [r2, #48]	; 0x30
 8000694:	4b2c      	ldr	r3, [pc, #176]	; (8000748 <HAL_ETH_MspInit+0x15c>)
 8000696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000698:	f003 0302 	and.w	r3, r3, #2
 800069c:	60fb      	str	r3, [r7, #12]
 800069e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80006a0:	4b29      	ldr	r3, [pc, #164]	; (8000748 <HAL_ETH_MspInit+0x15c>)
 80006a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a4:	4a28      	ldr	r2, [pc, #160]	; (8000748 <HAL_ETH_MspInit+0x15c>)
 80006a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006aa:	6313      	str	r3, [r2, #48]	; 0x30
 80006ac:	4b26      	ldr	r3, [pc, #152]	; (8000748 <HAL_ETH_MspInit+0x15c>)
 80006ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006b4:	60bb      	str	r3, [r7, #8]
 80006b6:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80006b8:	2332      	movs	r3, #50	; 0x32
 80006ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006bc:	2302      	movs	r3, #2
 80006be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c0:	2300      	movs	r3, #0
 80006c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006c4:	2303      	movs	r3, #3
 80006c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006c8:	230b      	movs	r3, #11
 80006ca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006d0:	4619      	mov	r1, r3
 80006d2:	481e      	ldr	r0, [pc, #120]	; (800074c <HAL_ETH_MspInit+0x160>)
 80006d4:	f001 fa5c 	bl	8001b90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80006d8:	2386      	movs	r3, #134	; 0x86
 80006da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006dc:	2302      	movs	r3, #2
 80006de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e0:	2300      	movs	r3, #0
 80006e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006e4:	2303      	movs	r3, #3
 80006e6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006e8:	230b      	movs	r3, #11
 80006ea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006f0:	4619      	mov	r1, r3
 80006f2:	4817      	ldr	r0, [pc, #92]	; (8000750 <HAL_ETH_MspInit+0x164>)
 80006f4:	f001 fa4c 	bl	8001b90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80006f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006fe:	2302      	movs	r3, #2
 8000700:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000702:	2300      	movs	r3, #0
 8000704:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000706:	2303      	movs	r3, #3
 8000708:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800070a:	230b      	movs	r3, #11
 800070c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800070e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000712:	4619      	mov	r1, r3
 8000714:	480f      	ldr	r0, [pc, #60]	; (8000754 <HAL_ETH_MspInit+0x168>)
 8000716:	f001 fa3b 	bl	8001b90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800071a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800071e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000720:	2302      	movs	r3, #2
 8000722:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000724:	2300      	movs	r3, #0
 8000726:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000728:	2303      	movs	r3, #3
 800072a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800072c:	230b      	movs	r3, #11
 800072e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000730:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000734:	4619      	mov	r1, r3
 8000736:	4808      	ldr	r0, [pc, #32]	; (8000758 <HAL_ETH_MspInit+0x16c>)
 8000738:	f001 fa2a 	bl	8001b90 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800073c:	bf00      	nop
 800073e:	3738      	adds	r7, #56	; 0x38
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	40028000 	.word	0x40028000
 8000748:	40023800 	.word	0x40023800
 800074c:	40020800 	.word	0x40020800
 8000750:	40020000 	.word	0x40020000
 8000754:	40020400 	.word	0x40020400
 8000758:	40021800 	.word	0x40021800

0800075c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b08c      	sub	sp, #48	; 0x30
 8000760:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000762:	f107 031c 	add.w	r3, r7, #28
 8000766:	2200      	movs	r2, #0
 8000768:	601a      	str	r2, [r3, #0]
 800076a:	605a      	str	r2, [r3, #4]
 800076c:	609a      	str	r2, [r3, #8]
 800076e:	60da      	str	r2, [r3, #12]
 8000770:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000772:	4b47      	ldr	r3, [pc, #284]	; (8000890 <MX_GPIO_Init+0x134>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	4a46      	ldr	r2, [pc, #280]	; (8000890 <MX_GPIO_Init+0x134>)
 8000778:	f043 0304 	orr.w	r3, r3, #4
 800077c:	6313      	str	r3, [r2, #48]	; 0x30
 800077e:	4b44      	ldr	r3, [pc, #272]	; (8000890 <MX_GPIO_Init+0x134>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	f003 0304 	and.w	r3, r3, #4
 8000786:	61bb      	str	r3, [r7, #24]
 8000788:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800078a:	4b41      	ldr	r3, [pc, #260]	; (8000890 <MX_GPIO_Init+0x134>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	4a40      	ldr	r2, [pc, #256]	; (8000890 <MX_GPIO_Init+0x134>)
 8000790:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000794:	6313      	str	r3, [r2, #48]	; 0x30
 8000796:	4b3e      	ldr	r3, [pc, #248]	; (8000890 <MX_GPIO_Init+0x134>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800079e:	617b      	str	r3, [r7, #20]
 80007a0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a2:	4b3b      	ldr	r3, [pc, #236]	; (8000890 <MX_GPIO_Init+0x134>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a3a      	ldr	r2, [pc, #232]	; (8000890 <MX_GPIO_Init+0x134>)
 80007a8:	f043 0301 	orr.w	r3, r3, #1
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b38      	ldr	r3, [pc, #224]	; (8000890 <MX_GPIO_Init+0x134>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f003 0301 	and.w	r3, r3, #1
 80007b6:	613b      	str	r3, [r7, #16]
 80007b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ba:	4b35      	ldr	r3, [pc, #212]	; (8000890 <MX_GPIO_Init+0x134>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	4a34      	ldr	r2, [pc, #208]	; (8000890 <MX_GPIO_Init+0x134>)
 80007c0:	f043 0302 	orr.w	r3, r3, #2
 80007c4:	6313      	str	r3, [r2, #48]	; 0x30
 80007c6:	4b32      	ldr	r3, [pc, #200]	; (8000890 <MX_GPIO_Init+0x134>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	f003 0302 	and.w	r3, r3, #2
 80007ce:	60fb      	str	r3, [r7, #12]
 80007d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007d2:	4b2f      	ldr	r3, [pc, #188]	; (8000890 <MX_GPIO_Init+0x134>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	4a2e      	ldr	r2, [pc, #184]	; (8000890 <MX_GPIO_Init+0x134>)
 80007d8:	f043 0308 	orr.w	r3, r3, #8
 80007dc:	6313      	str	r3, [r2, #48]	; 0x30
 80007de:	4b2c      	ldr	r3, [pc, #176]	; (8000890 <MX_GPIO_Init+0x134>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	f003 0308 	and.w	r3, r3, #8
 80007e6:	60bb      	str	r3, [r7, #8]
 80007e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007ea:	4b29      	ldr	r3, [pc, #164]	; (8000890 <MX_GPIO_Init+0x134>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	4a28      	ldr	r2, [pc, #160]	; (8000890 <MX_GPIO_Init+0x134>)
 80007f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007f4:	6313      	str	r3, [r2, #48]	; 0x30
 80007f6:	4b26      	ldr	r3, [pc, #152]	; (8000890 <MX_GPIO_Init+0x134>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007fe:	607b      	str	r3, [r7, #4]
 8000800:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000802:	2200      	movs	r2, #0
 8000804:	f244 0181 	movw	r1, #16513	; 0x4081
 8000808:	4822      	ldr	r0, [pc, #136]	; (8000894 <MX_GPIO_Init+0x138>)
 800080a:	f001 fb6d 	bl	8001ee8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800080e:	2200      	movs	r2, #0
 8000810:	2140      	movs	r1, #64	; 0x40
 8000812:	4821      	ldr	r0, [pc, #132]	; (8000898 <MX_GPIO_Init+0x13c>)
 8000814:	f001 fb68 	bl	8001ee8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000818:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800081c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800081e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000822:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000824:	2300      	movs	r3, #0
 8000826:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000828:	f107 031c 	add.w	r3, r7, #28
 800082c:	4619      	mov	r1, r3
 800082e:	481b      	ldr	r0, [pc, #108]	; (800089c <MX_GPIO_Init+0x140>)
 8000830:	f001 f9ae 	bl	8001b90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000834:	f244 0381 	movw	r3, #16513	; 0x4081
 8000838:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083a:	2301      	movs	r3, #1
 800083c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083e:	2300      	movs	r3, #0
 8000840:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000842:	2300      	movs	r3, #0
 8000844:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000846:	f107 031c 	add.w	r3, r7, #28
 800084a:	4619      	mov	r1, r3
 800084c:	4811      	ldr	r0, [pc, #68]	; (8000894 <MX_GPIO_Init+0x138>)
 800084e:	f001 f99f 	bl	8001b90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000852:	2340      	movs	r3, #64	; 0x40
 8000854:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000856:	2301      	movs	r3, #1
 8000858:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085e:	2300      	movs	r3, #0
 8000860:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000862:	f107 031c 	add.w	r3, r7, #28
 8000866:	4619      	mov	r1, r3
 8000868:	480b      	ldr	r0, [pc, #44]	; (8000898 <MX_GPIO_Init+0x13c>)
 800086a:	f001 f991 	bl	8001b90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800086e:	2380      	movs	r3, #128	; 0x80
 8000870:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000872:	2300      	movs	r3, #0
 8000874:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	2300      	movs	r3, #0
 8000878:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800087a:	f107 031c 	add.w	r3, r7, #28
 800087e:	4619      	mov	r1, r3
 8000880:	4805      	ldr	r0, [pc, #20]	; (8000898 <MX_GPIO_Init+0x13c>)
 8000882:	f001 f985 	bl	8001b90 <HAL_GPIO_Init>

}
 8000886:	bf00      	nop
 8000888:	3730      	adds	r7, #48	; 0x30
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	40023800 	.word	0x40023800
 8000894:	40020400 	.word	0x40020400
 8000898:	40021800 	.word	0x40021800
 800089c:	40020800 	.word	0x40020800

080008a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008a4:	f000 fc29 	bl	80010fa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008a8:	f000 f82e 	bl	8000908 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008ac:	f7ff ff56 	bl	800075c <MX_GPIO_Init>
  MX_ETH_Init();
 80008b0:	f7ff fe4e 	bl	8000550 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80008b4:	f000 fab8 	bl	8000e28 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80008b8:	f000 fb4e 	bl	8000f58 <MX_USB_OTG_FS_PCD_Init>
  HAL_UART_Receive_IT(&huart3,&znak,1);
 80008bc:	2201      	movs	r2, #1
 80008be:	490e      	ldr	r1, [pc, #56]	; (80008f8 <main+0x58>)
 80008c0:	480e      	ldr	r0, [pc, #56]	; (80008fc <main+0x5c>)
 80008c2:	f002 fe7b 	bl	80035bc <HAL_UART_Receive_IT>
  //uartPrint(NEW_LINE);
  HAL_UART_Transmit_IT(&huart3,NEW_LINE,8);
 80008c6:	2208      	movs	r2, #8
 80008c8:	490d      	ldr	r1, [pc, #52]	; (8000900 <main+0x60>)
 80008ca:	480c      	ldr	r0, [pc, #48]	; (80008fc <main+0x5c>)
 80008cc:	f002 fe18 	bl	8003500 <HAL_UART_Transmit_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	   HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80008d0:	2201      	movs	r2, #1
 80008d2:	2180      	movs	r1, #128	; 0x80
 80008d4:	480b      	ldr	r0, [pc, #44]	; (8000904 <main+0x64>)
 80008d6:	f001 fb07 	bl	8001ee8 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 80008da:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008de:	f000 fc69 	bl	80011b4 <HAL_Delay>
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008e2:	2200      	movs	r2, #0
 80008e4:	2180      	movs	r1, #128	; 0x80
 80008e6:	4807      	ldr	r0, [pc, #28]	; (8000904 <main+0x64>)
 80008e8:	f001 fafe 	bl	8001ee8 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 80008ec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008f0:	f000 fc60 	bl	80011b4 <HAL_Delay>
	   HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80008f4:	e7ec      	b.n	80008d0 <main+0x30>
 80008f6:	bf00      	nop
 80008f8:	20000276 	.word	0x20000276
 80008fc:	200002ec 	.word	0x200002ec
 8000900:	08005218 	.word	0x08005218
 8000904:	40020400 	.word	0x40020400

08000908 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b094      	sub	sp, #80	; 0x50
 800090c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800090e:	f107 031c 	add.w	r3, r7, #28
 8000912:	2234      	movs	r2, #52	; 0x34
 8000914:	2100      	movs	r1, #0
 8000916:	4618      	mov	r0, r3
 8000918:	f004 fc5a 	bl	80051d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800091c:	f107 0308 	add.w	r3, r7, #8
 8000920:	2200      	movs	r2, #0
 8000922:	601a      	str	r2, [r3, #0]
 8000924:	605a      	str	r2, [r3, #4]
 8000926:	609a      	str	r2, [r3, #8]
 8000928:	60da      	str	r2, [r3, #12]
 800092a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800092c:	f001 fc3e 	bl	80021ac <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000930:	4b2c      	ldr	r3, [pc, #176]	; (80009e4 <SystemClock_Config+0xdc>)
 8000932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000934:	4a2b      	ldr	r2, [pc, #172]	; (80009e4 <SystemClock_Config+0xdc>)
 8000936:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800093a:	6413      	str	r3, [r2, #64]	; 0x40
 800093c:	4b29      	ldr	r3, [pc, #164]	; (80009e4 <SystemClock_Config+0xdc>)
 800093e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000940:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000944:	607b      	str	r3, [r7, #4]
 8000946:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000948:	4b27      	ldr	r3, [pc, #156]	; (80009e8 <SystemClock_Config+0xe0>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000950:	4a25      	ldr	r2, [pc, #148]	; (80009e8 <SystemClock_Config+0xe0>)
 8000952:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000956:	6013      	str	r3, [r2, #0]
 8000958:	4b23      	ldr	r3, [pc, #140]	; (80009e8 <SystemClock_Config+0xe0>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000960:	603b      	str	r3, [r7, #0]
 8000962:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000964:	2301      	movs	r3, #1
 8000966:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000968:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800096c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800096e:	2302      	movs	r3, #2
 8000970:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000972:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000976:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000978:	2304      	movs	r3, #4
 800097a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 800097c:	2360      	movs	r3, #96	; 0x60
 800097e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000980:	2302      	movs	r3, #2
 8000982:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000984:	2304      	movs	r3, #4
 8000986:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000988:	2302      	movs	r3, #2
 800098a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800098c:	f107 031c 	add.w	r3, r7, #28
 8000990:	4618      	mov	r0, r3
 8000992:	f001 fc6b 	bl	800226c <HAL_RCC_OscConfig>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800099c:	f000 f9d4 	bl	8000d48 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80009a0:	f001 fc14 	bl	80021cc <HAL_PWREx_EnableOverDrive>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80009aa:	f000 f9cd 	bl	8000d48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ae:	230f      	movs	r3, #15
 80009b0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009b2:	2302      	movs	r3, #2
 80009b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009b6:	2300      	movs	r3, #0
 80009b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009c0:	2300      	movs	r3, #0
 80009c2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80009c4:	f107 0308 	add.w	r3, r7, #8
 80009c8:	2103      	movs	r1, #3
 80009ca:	4618      	mov	r0, r3
 80009cc:	f001 fefc 	bl	80027c8 <HAL_RCC_ClockConfig>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80009d6:	f000 f9b7 	bl	8000d48 <Error_Handler>
  }
}
 80009da:	bf00      	nop
 80009dc:	3750      	adds	r7, #80	; 0x50
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	40023800 	.word	0x40023800
 80009e8:	40007000 	.word	0x40007000

080009ec <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b083      	sub	sp, #12
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART3)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a05      	ldr	r2, [pc, #20]	; (8000a10 <HAL_UART_TxCpltCallback+0x24>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d102      	bne.n	8000a04 <HAL_UART_TxCpltCallback+0x18>
	{
		tx_ready = 1;
 80009fe:	4b05      	ldr	r3, [pc, #20]	; (8000a14 <HAL_UART_TxCpltCallback+0x28>)
 8000a00:	2201      	movs	r2, #1
 8000a02:	701a      	strb	r2, [r3, #0]
	}
}
 8000a04:	bf00      	nop
 8000a06:	370c      	adds	r7, #12
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr
 8000a10:	40004800 	.word	0x40004800
 8000a14:	200002ea 	.word	0x200002ea

08000a18 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART3)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a2b      	ldr	r2, [pc, #172]	; (8000ad4 <HAL_UART_RxCpltCallback+0xbc>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d150      	bne.n	8000acc <HAL_UART_RxCpltCallback+0xb4>
	{
		HAL_UART_Receive_IT(&huart3,&znak,1);
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	492a      	ldr	r1, [pc, #168]	; (8000ad8 <HAL_UART_RxCpltCallback+0xc0>)
 8000a2e:	482b      	ldr	r0, [pc, #172]	; (8000adc <HAL_UART_RxCpltCallback+0xc4>)
 8000a30:	f002 fdc4 	bl	80035bc <HAL_UART_Receive_IT>

		if(znak=='\r'||znak=='\n')
 8000a34:	4b28      	ldr	r3, [pc, #160]	; (8000ad8 <HAL_UART_RxCpltCallback+0xc0>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	2b0d      	cmp	r3, #13
 8000a3a:	d003      	beq.n	8000a44 <HAL_UART_RxCpltCallback+0x2c>
 8000a3c:	4b26      	ldr	r3, [pc, #152]	; (8000ad8 <HAL_UART_RxCpltCallback+0xc0>)
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	2b0a      	cmp	r3, #10
 8000a42:	d109      	bne.n	8000a58 <HAL_UART_RxCpltCallback+0x40>
		{
			rx_buffer[rx_buff_idx]='\0';
 8000a44:	4b26      	ldr	r3, [pc, #152]	; (8000ae0 <HAL_UART_RxCpltCallback+0xc8>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	461a      	mov	r2, r3
 8000a4a:	4b26      	ldr	r3, [pc, #152]	; (8000ae4 <HAL_UART_RxCpltCallback+0xcc>)
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	5499      	strb	r1, [r3, r2]
			executeCmd(rx_buffer);
 8000a50:	4824      	ldr	r0, [pc, #144]	; (8000ae4 <HAL_UART_RxCpltCallback+0xcc>)
 8000a52:	f000 f8bd 	bl	8000bd0 <executeCmd>
				rx_buff_idx=0;
			}
		}

	}
}
 8000a56:	e039      	b.n	8000acc <HAL_UART_RxCpltCallback+0xb4>
			if(rx_buff_idx<=RX_BUFF_SIZE)
 8000a58:	4b21      	ldr	r3, [pc, #132]	; (8000ae0 <HAL_UART_RxCpltCallback+0xc8>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	2b0a      	cmp	r3, #10
 8000a5e:	d826      	bhi.n	8000aae <HAL_UART_RxCpltCallback+0x96>
				if(znak=='\b')
 8000a60:	4b1d      	ldr	r3, [pc, #116]	; (8000ad8 <HAL_UART_RxCpltCallback+0xc0>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	2b08      	cmp	r3, #8
 8000a66:	d111      	bne.n	8000a8c <HAL_UART_RxCpltCallback+0x74>
					uartTransmit(DELETE,3,&huart3);
 8000a68:	4a1c      	ldr	r2, [pc, #112]	; (8000adc <HAL_UART_RxCpltCallback+0xc4>)
 8000a6a:	2103      	movs	r1, #3
 8000a6c:	481e      	ldr	r0, [pc, #120]	; (8000ae8 <HAL_UART_RxCpltCallback+0xd0>)
 8000a6e:	f000 f841 	bl	8000af4 <uartTransmit>
					rx_buff_idx--;
 8000a72:	4b1b      	ldr	r3, [pc, #108]	; (8000ae0 <HAL_UART_RxCpltCallback+0xc8>)
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	3b01      	subs	r3, #1
 8000a78:	b2da      	uxtb	r2, r3
 8000a7a:	4b19      	ldr	r3, [pc, #100]	; (8000ae0 <HAL_UART_RxCpltCallback+0xc8>)
 8000a7c:	701a      	strb	r2, [r3, #0]
					rx_buffer[rx_buff_idx]='/0';
 8000a7e:	4b18      	ldr	r3, [pc, #96]	; (8000ae0 <HAL_UART_RxCpltCallback+0xc8>)
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	461a      	mov	r2, r3
 8000a84:	4b17      	ldr	r3, [pc, #92]	; (8000ae4 <HAL_UART_RxCpltCallback+0xcc>)
 8000a86:	2130      	movs	r1, #48	; 0x30
 8000a88:	5499      	strb	r1, [r3, r2]
}
 8000a8a:	e01f      	b.n	8000acc <HAL_UART_RxCpltCallback+0xb4>
					rx_buffer[rx_buff_idx++]=znak;
 8000a8c:	4b14      	ldr	r3, [pc, #80]	; (8000ae0 <HAL_UART_RxCpltCallback+0xc8>)
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	1c5a      	adds	r2, r3, #1
 8000a92:	b2d1      	uxtb	r1, r2
 8000a94:	4a12      	ldr	r2, [pc, #72]	; (8000ae0 <HAL_UART_RxCpltCallback+0xc8>)
 8000a96:	7011      	strb	r1, [r2, #0]
 8000a98:	461a      	mov	r2, r3
 8000a9a:	4b0f      	ldr	r3, [pc, #60]	; (8000ad8 <HAL_UART_RxCpltCallback+0xc0>)
 8000a9c:	7819      	ldrb	r1, [r3, #0]
 8000a9e:	4b11      	ldr	r3, [pc, #68]	; (8000ae4 <HAL_UART_RxCpltCallback+0xcc>)
 8000aa0:	5499      	strb	r1, [r3, r2]
					uartTransmit(&znak,1,&huart3);
 8000aa2:	4a0e      	ldr	r2, [pc, #56]	; (8000adc <HAL_UART_RxCpltCallback+0xc4>)
 8000aa4:	2101      	movs	r1, #1
 8000aa6:	480c      	ldr	r0, [pc, #48]	; (8000ad8 <HAL_UART_RxCpltCallback+0xc0>)
 8000aa8:	f000 f824 	bl	8000af4 <uartTransmit>
}
 8000aac:	e00e      	b.n	8000acc <HAL_UART_RxCpltCallback+0xb4>
				fillTxBuffer(NEW_LINE);
 8000aae:	480f      	ldr	r0, [pc, #60]	; (8000aec <HAL_UART_RxCpltCallback+0xd4>)
 8000ab0:	f000 f856 	bl	8000b60 <fillTxBuffer>
				fillTxBuffer(NEW_LINE);
 8000ab4:	480d      	ldr	r0, [pc, #52]	; (8000aec <HAL_UART_RxCpltCallback+0xd4>)
 8000ab6:	f000 f853 	bl	8000b60 <fillTxBuffer>
				fillTxBuffer("Command too long");
 8000aba:	480d      	ldr	r0, [pc, #52]	; (8000af0 <HAL_UART_RxCpltCallback+0xd8>)
 8000abc:	f000 f850 	bl	8000b60 <fillTxBuffer>
				fillTxBuffer(NEW_LINE);
 8000ac0:	480a      	ldr	r0, [pc, #40]	; (8000aec <HAL_UART_RxCpltCallback+0xd4>)
 8000ac2:	f000 f84d 	bl	8000b60 <fillTxBuffer>
				rx_buff_idx=0;
 8000ac6:	4b06      	ldr	r3, [pc, #24]	; (8000ae0 <HAL_UART_RxCpltCallback+0xc8>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	701a      	strb	r2, [r3, #0]
}
 8000acc:	bf00      	nop
 8000ace:	3708      	adds	r7, #8
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	40004800 	.word	0x40004800
 8000ad8:	20000276 	.word	0x20000276
 8000adc:	200002ec 	.word	0x200002ec
 8000ae0:	200002e8 	.word	0x200002e8
 8000ae4:	20000278 	.word	0x20000278
 8000ae8:	08005220 	.word	0x08005220
 8000aec:	08005218 	.word	0x08005218
 8000af0:	08005224 	.word	0x08005224

08000af4 <uartTransmit>:
void uartTransmit(char* msg, uint8_t length, UART_HandleTypeDef *huart)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b086      	sub	sp, #24
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	60f8      	str	r0, [r7, #12]
 8000afc:	460b      	mov	r3, r1
 8000afe:	607a      	str	r2, [r7, #4]
 8000b00:	72fb      	strb	r3, [r7, #11]
	if(huart->Instance==USART3)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	4a11      	ldr	r2, [pc, #68]	; (8000b4c <uartTransmit+0x58>)
 8000b08:	4293      	cmp	r3, r2
 8000b0a:	d11b      	bne.n	8000b44 <uartTransmit+0x50>
	{
		if(tx_ready==1)
 8000b0c:	4b10      	ldr	r3, [pc, #64]	; (8000b50 <uartTransmit+0x5c>)
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	b2db      	uxtb	r3, r3
 8000b12:	2b01      	cmp	r3, #1
 8000b14:	d116      	bne.n	8000b44 <uartTransmit+0x50>
		{
			tx_ready=0;
 8000b16:	4b0e      	ldr	r3, [pc, #56]	; (8000b50 <uartTransmit+0x5c>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	701a      	strb	r2, [r3, #0]
			HAL_StatusTypeDef retVal = HAL_UART_Transmit_IT(&huart3,(uint8_t*)msg,length);
 8000b1c:	7afb      	ldrb	r3, [r7, #11]
 8000b1e:	b29b      	uxth	r3, r3
 8000b20:	461a      	mov	r2, r3
 8000b22:	68f9      	ldr	r1, [r7, #12]
 8000b24:	480b      	ldr	r0, [pc, #44]	; (8000b54 <uartTransmit+0x60>)
 8000b26:	f002 fceb 	bl	8003500 <HAL_UART_Transmit_IT>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	75fb      	strb	r3, [r7, #23]
			if(retVal== HAL_OK)
 8000b2e:	7dfb      	ldrb	r3, [r7, #23]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d107      	bne.n	8000b44 <uartTransmit+0x50>
			{
				memset(&tx_buffer,'\0',100);
 8000b34:	2264      	movs	r2, #100	; 0x64
 8000b36:	2100      	movs	r1, #0
 8000b38:	4807      	ldr	r0, [pc, #28]	; (8000b58 <uartTransmit+0x64>)
 8000b3a:	f004 fb49 	bl	80051d0 <memset>
				tx_buff_idx=0;
 8000b3e:	4b07      	ldr	r3, [pc, #28]	; (8000b5c <uartTransmit+0x68>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	701a      	strb	r2, [r3, #0]
			}
		}
	}
}
 8000b44:	bf00      	nop
 8000b46:	3718      	adds	r7, #24
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	40004800 	.word	0x40004800
 8000b50:	200002ea 	.word	0x200002ea
 8000b54:	200002ec 	.word	0x200002ec
 8000b58:	20000284 	.word	0x20000284
 8000b5c:	200002e9 	.word	0x200002e9

08000b60 <fillTxBuffer>:
void fillTxBuffer(char *msg)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b084      	sub	sp, #16
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
	uint8_t i=0;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	73fb      	strb	r3, [r7, #15]
	while(*(msg+i)!='\0')
 8000b6c:	e01b      	b.n	8000ba6 <fillTxBuffer+0x46>
	{
		if(tx_buff_idx>=TX_BUFF_SIZE-1)
 8000b6e:	4b15      	ldr	r3, [pc, #84]	; (8000bc4 <fillTxBuffer+0x64>)
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	2b62      	cmp	r3, #98	; 0x62
 8000b74:	d907      	bls.n	8000b86 <fillTxBuffer+0x26>
		{
			tx_buff_idx = 0;
 8000b76:	4b13      	ldr	r3, [pc, #76]	; (8000bc4 <fillTxBuffer+0x64>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	701a      	strb	r2, [r3, #0]
			memset(tx_buffer,'\0',TX_BUFF_SIZE);
 8000b7c:	2264      	movs	r2, #100	; 0x64
 8000b7e:	2100      	movs	r1, #0
 8000b80:	4811      	ldr	r0, [pc, #68]	; (8000bc8 <fillTxBuffer+0x68>)
 8000b82:	f004 fb25 	bl	80051d0 <memset>
		}
		tx_buffer[tx_buff_idx++]=msg[i++];
 8000b86:	7bfb      	ldrb	r3, [r7, #15]
 8000b88:	1c5a      	adds	r2, r3, #1
 8000b8a:	73fa      	strb	r2, [r7, #15]
 8000b8c:	461a      	mov	r2, r3
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	441a      	add	r2, r3
 8000b92:	4b0c      	ldr	r3, [pc, #48]	; (8000bc4 <fillTxBuffer+0x64>)
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	1c59      	adds	r1, r3, #1
 8000b98:	b2c8      	uxtb	r0, r1
 8000b9a:	490a      	ldr	r1, [pc, #40]	; (8000bc4 <fillTxBuffer+0x64>)
 8000b9c:	7008      	strb	r0, [r1, #0]
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	7812      	ldrb	r2, [r2, #0]
 8000ba2:	4b09      	ldr	r3, [pc, #36]	; (8000bc8 <fillTxBuffer+0x68>)
 8000ba4:	545a      	strb	r2, [r3, r1]
	while(*(msg+i)!='\0')
 8000ba6:	7bfb      	ldrb	r3, [r7, #15]
 8000ba8:	687a      	ldr	r2, [r7, #4]
 8000baa:	4413      	add	r3, r2
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d1dd      	bne.n	8000b6e <fillTxBuffer+0xe>
	}
	uartTransmit(tx_buffer,TX_BUFF_SIZE,&huart3);
 8000bb2:	4a06      	ldr	r2, [pc, #24]	; (8000bcc <fillTxBuffer+0x6c>)
 8000bb4:	2164      	movs	r1, #100	; 0x64
 8000bb6:	4804      	ldr	r0, [pc, #16]	; (8000bc8 <fillTxBuffer+0x68>)
 8000bb8:	f7ff ff9c 	bl	8000af4 <uartTransmit>
}
 8000bbc:	bf00      	nop
 8000bbe:	3710      	adds	r7, #16
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	200002e9 	.word	0x200002e9
 8000bc8:	20000284 	.word	0x20000284
 8000bcc:	200002ec 	.word	0x200002ec

08000bd0 <executeCmd>:

void executeCmd(char* cmd)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
	rx_buff_idx=0;
 8000bd8:	4b19      	ldr	r3, [pc, #100]	; (8000c40 <executeCmd+0x70>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	701a      	strb	r2, [r3, #0]
	uint8_t cmd_found =0;
 8000bde:	2300      	movs	r3, #0
 8000be0:	73fb      	strb	r3, [r7, #15]
	for(int i=0; i<sizeof(cmdArray)/sizeof(Command);i++)
 8000be2:	2300      	movs	r3, #0
 8000be4:	60bb      	str	r3, [r7, #8]
 8000be6:	e015      	b.n	8000c14 <executeCmd+0x44>
	{
		if(strcmp(rx_buffer,cmdArray[i].command)== 0)
 8000be8:	4a16      	ldr	r2, [pc, #88]	; (8000c44 <executeCmd+0x74>)
 8000bea:	68bb      	ldr	r3, [r7, #8]
 8000bec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	4815      	ldr	r0, [pc, #84]	; (8000c48 <executeCmd+0x78>)
 8000bf4:	f7ff fb20 	bl	8000238 <strcmp>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d107      	bne.n	8000c0e <executeCmd+0x3e>
		{
			cmdArray[i].callback();
 8000bfe:	4a11      	ldr	r2, [pc, #68]	; (8000c44 <executeCmd+0x74>)
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	00db      	lsls	r3, r3, #3
 8000c04:	4413      	add	r3, r2
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	4798      	blx	r3
			cmd_found = 1;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	73fb      	strb	r3, [r7, #15]
	for(int i=0; i<sizeof(cmdArray)/sizeof(Command);i++)
 8000c0e:	68bb      	ldr	r3, [r7, #8]
 8000c10:	3301      	adds	r3, #1
 8000c12:	60bb      	str	r3, [r7, #8]
 8000c14:	68bb      	ldr	r3, [r7, #8]
 8000c16:	2b03      	cmp	r3, #3
 8000c18:	d9e6      	bls.n	8000be8 <executeCmd+0x18>
		}
	}
	if(cmd_found==0)
 8000c1a:	7bfb      	ldrb	r3, [r7, #15]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d10b      	bne.n	8000c38 <executeCmd+0x68>
	{
		fillTxBuffer(NEW_LINE);
 8000c20:	480a      	ldr	r0, [pc, #40]	; (8000c4c <executeCmd+0x7c>)
 8000c22:	f7ff ff9d 	bl	8000b60 <fillTxBuffer>
		fillTxBuffer(NEW_LINE);
 8000c26:	4809      	ldr	r0, [pc, #36]	; (8000c4c <executeCmd+0x7c>)
 8000c28:	f7ff ff9a 	bl	8000b60 <fillTxBuffer>
		fillTxBuffer("Command not found");
 8000c2c:	4808      	ldr	r0, [pc, #32]	; (8000c50 <executeCmd+0x80>)
 8000c2e:	f7ff ff97 	bl	8000b60 <fillTxBuffer>
		fillTxBuffer(NEW_LINE);
 8000c32:	4806      	ldr	r0, [pc, #24]	; (8000c4c <executeCmd+0x7c>)
 8000c34:	f7ff ff94 	bl	8000b60 <fillTxBuffer>

	}
}
 8000c38:	bf00      	nop
 8000c3a:	3710      	adds	r7, #16
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	200002e8 	.word	0x200002e8
 8000c44:	20000000 	.word	0x20000000
 8000c48:	20000278 	.word	0x20000278
 8000c4c:	08005218 	.word	0x08005218
 8000c50:	08005238 	.word	0x08005238

08000c54 <helpCmd>:

void helpCmd(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
	fillTxBuffer(NEW_LINE);
 8000c5a:	4812      	ldr	r0, [pc, #72]	; (8000ca4 <helpCmd+0x50>)
 8000c5c:	f7ff ff80 	bl	8000b60 <fillTxBuffer>
	fillTxBuffer(NEW_LINE);
 8000c60:	4810      	ldr	r0, [pc, #64]	; (8000ca4 <helpCmd+0x50>)
 8000c62:	f7ff ff7d 	bl	8000b60 <fillTxBuffer>
	fillTxBuffer("Help:");
 8000c66:	4810      	ldr	r0, [pc, #64]	; (8000ca8 <helpCmd+0x54>)
 8000c68:	f7ff ff7a 	bl	8000b60 <fillTxBuffer>
	fillTxBuffer(NEW_LINE);
 8000c6c:	480d      	ldr	r0, [pc, #52]	; (8000ca4 <helpCmd+0x50>)
 8000c6e:	f7ff ff77 	bl	8000b60 <fillTxBuffer>

	for(int i=0; i<sizeof(cmdArray)/sizeof(Command);i++)
 8000c72:	2300      	movs	r3, #0
 8000c74:	607b      	str	r3, [r7, #4]
 8000c76:	e00c      	b.n	8000c92 <helpCmd+0x3e>
	{
		fillTxBuffer(cmdArray[i].command);
 8000c78:	4a0c      	ldr	r2, [pc, #48]	; (8000cac <helpCmd+0x58>)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000c80:	4618      	mov	r0, r3
 8000c82:	f7ff ff6d 	bl	8000b60 <fillTxBuffer>
		fillTxBuffer(NEW_LINE);
 8000c86:	4807      	ldr	r0, [pc, #28]	; (8000ca4 <helpCmd+0x50>)
 8000c88:	f7ff ff6a 	bl	8000b60 <fillTxBuffer>
	for(int i=0; i<sizeof(cmdArray)/sizeof(Command);i++)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	3301      	adds	r3, #1
 8000c90:	607b      	str	r3, [r7, #4]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	2b03      	cmp	r3, #3
 8000c96:	d9ef      	bls.n	8000c78 <helpCmd+0x24>
	}

}
 8000c98:	bf00      	nop
 8000c9a:	bf00      	nop
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	08005218 	.word	0x08005218
 8000ca8:	0800524c 	.word	0x0800524c
 8000cac:	20000000 	.word	0x20000000

08000cb0 <ledonCmd>:
void ledonCmd(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
	fillTxBuffer(NEW_LINE);
 8000cb4:	4809      	ldr	r0, [pc, #36]	; (8000cdc <ledonCmd+0x2c>)
 8000cb6:	f7ff ff53 	bl	8000b60 <fillTxBuffer>
	fillTxBuffer(NEW_LINE);
 8000cba:	4808      	ldr	r0, [pc, #32]	; (8000cdc <ledonCmd+0x2c>)
 8000cbc:	f7ff ff50 	bl	8000b60 <fillTxBuffer>
	fillTxBuffer("Turning led ON");
 8000cc0:	4807      	ldr	r0, [pc, #28]	; (8000ce0 <ledonCmd+0x30>)
 8000cc2:	f7ff ff4d 	bl	8000b60 <fillTxBuffer>
	fillTxBuffer(NEW_LINE);
 8000cc6:	4805      	ldr	r0, [pc, #20]	; (8000cdc <ledonCmd+0x2c>)
 8000cc8:	f7ff ff4a 	bl	8000b60 <fillTxBuffer>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000ccc:	2201      	movs	r2, #1
 8000cce:	2180      	movs	r1, #128	; 0x80
 8000cd0:	4804      	ldr	r0, [pc, #16]	; (8000ce4 <ledonCmd+0x34>)
 8000cd2:	f001 f909 	bl	8001ee8 <HAL_GPIO_WritePin>

}
 8000cd6:	bf00      	nop
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	08005218 	.word	0x08005218
 8000ce0:	08005254 	.word	0x08005254
 8000ce4:	40020400 	.word	0x40020400

08000ce8 <ledoffCmd>:
void ledoffCmd(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
	fillTxBuffer(NEW_LINE);
 8000cec:	4809      	ldr	r0, [pc, #36]	; (8000d14 <ledoffCmd+0x2c>)
 8000cee:	f7ff ff37 	bl	8000b60 <fillTxBuffer>
	fillTxBuffer(NEW_LINE);
 8000cf2:	4808      	ldr	r0, [pc, #32]	; (8000d14 <ledoffCmd+0x2c>)
 8000cf4:	f7ff ff34 	bl	8000b60 <fillTxBuffer>
	fillTxBuffer("Turning led OFF");
 8000cf8:	4807      	ldr	r0, [pc, #28]	; (8000d18 <ledoffCmd+0x30>)
 8000cfa:	f7ff ff31 	bl	8000b60 <fillTxBuffer>
	fillTxBuffer(NEW_LINE);
 8000cfe:	4805      	ldr	r0, [pc, #20]	; (8000d14 <ledoffCmd+0x2c>)
 8000d00:	f7ff ff2e 	bl	8000b60 <fillTxBuffer>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d04:	2200      	movs	r2, #0
 8000d06:	2180      	movs	r1, #128	; 0x80
 8000d08:	4804      	ldr	r0, [pc, #16]	; (8000d1c <ledoffCmd+0x34>)
 8000d0a:	f001 f8ed 	bl	8001ee8 <HAL_GPIO_WritePin>

}
 8000d0e:	bf00      	nop
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	08005218 	.word	0x08005218
 8000d18:	08005264 	.word	0x08005264
 8000d1c:	40020400 	.word	0x40020400

08000d20 <pingpongCmd>:
void pingpongCmd(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
	fillTxBuffer(NEW_LINE);
 8000d24:	4806      	ldr	r0, [pc, #24]	; (8000d40 <pingpongCmd+0x20>)
 8000d26:	f7ff ff1b 	bl	8000b60 <fillTxBuffer>
	fillTxBuffer(NEW_LINE);
 8000d2a:	4805      	ldr	r0, [pc, #20]	; (8000d40 <pingpongCmd+0x20>)
 8000d2c:	f7ff ff18 	bl	8000b60 <fillTxBuffer>
	fillTxBuffer("PONG");
 8000d30:	4804      	ldr	r0, [pc, #16]	; (8000d44 <pingpongCmd+0x24>)
 8000d32:	f7ff ff15 	bl	8000b60 <fillTxBuffer>
	fillTxBuffer(NEW_LINE);
 8000d36:	4802      	ldr	r0, [pc, #8]	; (8000d40 <pingpongCmd+0x20>)
 8000d38:	f7ff ff12 	bl	8000b60 <fillTxBuffer>

}
 8000d3c:	bf00      	nop
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	08005218 	.word	0x08005218
 8000d44:	08005274 	.word	0x08005274

08000d48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d4c:	b672      	cpsid	i
}
 8000d4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d50:	e7fe      	b.n	8000d50 <Error_Handler+0x8>
	...

08000d54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000d5a:	4b0f      	ldr	r3, [pc, #60]	; (8000d98 <HAL_MspInit+0x44>)
 8000d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5e:	4a0e      	ldr	r2, [pc, #56]	; (8000d98 <HAL_MspInit+0x44>)
 8000d60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d64:	6413      	str	r3, [r2, #64]	; 0x40
 8000d66:	4b0c      	ldr	r3, [pc, #48]	; (8000d98 <HAL_MspInit+0x44>)
 8000d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d6e:	607b      	str	r3, [r7, #4]
 8000d70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d72:	4b09      	ldr	r3, [pc, #36]	; (8000d98 <HAL_MspInit+0x44>)
 8000d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d76:	4a08      	ldr	r2, [pc, #32]	; (8000d98 <HAL_MspInit+0x44>)
 8000d78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d7c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d7e:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <HAL_MspInit+0x44>)
 8000d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d86:	603b      	str	r3, [r7, #0]
 8000d88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d8a:	bf00      	nop
 8000d8c:	370c      	adds	r7, #12
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	40023800 	.word	0x40023800

08000d9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000da0:	e7fe      	b.n	8000da0 <NMI_Handler+0x4>

08000da2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000da2:	b480      	push	{r7}
 8000da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000da6:	e7fe      	b.n	8000da6 <HardFault_Handler+0x4>

08000da8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dac:	e7fe      	b.n	8000dac <MemManage_Handler+0x4>

08000dae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dae:	b480      	push	{r7}
 8000db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000db2:	e7fe      	b.n	8000db2 <BusFault_Handler+0x4>

08000db4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000db8:	e7fe      	b.n	8000db8 <UsageFault_Handler+0x4>

08000dba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dba:	b480      	push	{r7}
 8000dbc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dbe:	bf00      	nop
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr

08000dc8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dcc:	bf00      	nop
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr

08000dd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dd6:	b480      	push	{r7}
 8000dd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dda:	bf00      	nop
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr

08000de4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000de8:	f000 f9c4 	bl	8001174 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dec:	bf00      	nop
 8000dee:	bd80      	pop	{r7, pc}

08000df0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000df4:	4802      	ldr	r0, [pc, #8]	; (8000e00 <USART3_IRQHandler+0x10>)
 8000df6:	f002 fc25 	bl	8003644 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	200002ec 	.word	0x200002ec

08000e04 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e08:	4b06      	ldr	r3, [pc, #24]	; (8000e24 <SystemInit+0x20>)
 8000e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e0e:	4a05      	ldr	r2, [pc, #20]	; (8000e24 <SystemInit+0x20>)
 8000e10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e18:	bf00      	nop
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	e000ed00 	.word	0xe000ed00

08000e28 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000e2c:	4b14      	ldr	r3, [pc, #80]	; (8000e80 <MX_USART3_UART_Init+0x58>)
 8000e2e:	4a15      	ldr	r2, [pc, #84]	; (8000e84 <MX_USART3_UART_Init+0x5c>)
 8000e30:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000e32:	4b13      	ldr	r3, [pc, #76]	; (8000e80 <MX_USART3_UART_Init+0x58>)
 8000e34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e38:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e3a:	4b11      	ldr	r3, [pc, #68]	; (8000e80 <MX_USART3_UART_Init+0x58>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e40:	4b0f      	ldr	r3, [pc, #60]	; (8000e80 <MX_USART3_UART_Init+0x58>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e46:	4b0e      	ldr	r3, [pc, #56]	; (8000e80 <MX_USART3_UART_Init+0x58>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e4c:	4b0c      	ldr	r3, [pc, #48]	; (8000e80 <MX_USART3_UART_Init+0x58>)
 8000e4e:	220c      	movs	r2, #12
 8000e50:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e52:	4b0b      	ldr	r3, [pc, #44]	; (8000e80 <MX_USART3_UART_Init+0x58>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e58:	4b09      	ldr	r3, [pc, #36]	; (8000e80 <MX_USART3_UART_Init+0x58>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e5e:	4b08      	ldr	r3, [pc, #32]	; (8000e80 <MX_USART3_UART_Init+0x58>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e64:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <MX_USART3_UART_Init+0x58>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e6a:	4805      	ldr	r0, [pc, #20]	; (8000e80 <MX_USART3_UART_Init+0x58>)
 8000e6c:	f002 fafa 	bl	8003464 <HAL_UART_Init>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000e76:	f7ff ff67 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e7a:	bf00      	nop
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	200002ec 	.word	0x200002ec
 8000e84:	40004800 	.word	0x40004800

08000e88 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b0ae      	sub	sp, #184	; 0xb8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e90:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	605a      	str	r2, [r3, #4]
 8000e9a:	609a      	str	r2, [r3, #8]
 8000e9c:	60da      	str	r2, [r3, #12]
 8000e9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ea0:	f107 0314 	add.w	r3, r7, #20
 8000ea4:	2290      	movs	r2, #144	; 0x90
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f004 f991 	bl	80051d0 <memset>
  if(uartHandle->Instance==USART3)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4a26      	ldr	r2, [pc, #152]	; (8000f4c <HAL_UART_MspInit+0xc4>)
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d144      	bne.n	8000f42 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000eb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ebc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ec2:	f107 0314 	add.w	r3, r7, #20
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f001 fea4 	bl	8002c14 <HAL_RCCEx_PeriphCLKConfig>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000ed2:	f7ff ff39 	bl	8000d48 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ed6:	4b1e      	ldr	r3, [pc, #120]	; (8000f50 <HAL_UART_MspInit+0xc8>)
 8000ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eda:	4a1d      	ldr	r2, [pc, #116]	; (8000f50 <HAL_UART_MspInit+0xc8>)
 8000edc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ee0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ee2:	4b1b      	ldr	r3, [pc, #108]	; (8000f50 <HAL_UART_MspInit+0xc8>)
 8000ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000eea:	613b      	str	r3, [r7, #16]
 8000eec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eee:	4b18      	ldr	r3, [pc, #96]	; (8000f50 <HAL_UART_MspInit+0xc8>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef2:	4a17      	ldr	r2, [pc, #92]	; (8000f50 <HAL_UART_MspInit+0xc8>)
 8000ef4:	f043 0308 	orr.w	r3, r3, #8
 8000ef8:	6313      	str	r3, [r2, #48]	; 0x30
 8000efa:	4b15      	ldr	r3, [pc, #84]	; (8000f50 <HAL_UART_MspInit+0xc8>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efe:	f003 0308 	and.w	r3, r3, #8
 8000f02:	60fb      	str	r3, [r7, #12]
 8000f04:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000f06:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f0a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0e:	2302      	movs	r3, #2
 8000f10:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f14:	2300      	movs	r3, #0
 8000f16:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f1a:	2303      	movs	r3, #3
 8000f1c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f20:	2307      	movs	r3, #7
 8000f22:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f26:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4809      	ldr	r0, [pc, #36]	; (8000f54 <HAL_UART_MspInit+0xcc>)
 8000f2e:	f000 fe2f 	bl	8001b90 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000f32:	2200      	movs	r2, #0
 8000f34:	2100      	movs	r1, #0
 8000f36:	2027      	movs	r0, #39	; 0x27
 8000f38:	f000 fa3b 	bl	80013b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000f3c:	2027      	movs	r0, #39	; 0x27
 8000f3e:	f000 fa54 	bl	80013ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000f42:	bf00      	nop
 8000f44:	37b8      	adds	r7, #184	; 0xb8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	40004800 	.word	0x40004800
 8000f50:	40023800 	.word	0x40023800
 8000f54:	40020c00 	.word	0x40020c00

08000f58 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000f5c:	4b14      	ldr	r3, [pc, #80]	; (8000fb0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f5e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000f62:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000f64:	4b12      	ldr	r3, [pc, #72]	; (8000fb0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f66:	2206      	movs	r2, #6
 8000f68:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000f6a:	4b11      	ldr	r3, [pc, #68]	; (8000fb0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f6c:	2202      	movs	r2, #2
 8000f6e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000f70:	4b0f      	ldr	r3, [pc, #60]	; (8000fb0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000f76:	4b0e      	ldr	r3, [pc, #56]	; (8000fb0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f78:	2202      	movs	r2, #2
 8000f7a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000f7c:	4b0c      	ldr	r3, [pc, #48]	; (8000fb0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f7e:	2201      	movs	r2, #1
 8000f80:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000f82:	4b0b      	ldr	r3, [pc, #44]	; (8000fb0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000f88:	4b09      	ldr	r3, [pc, #36]	; (8000fb0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000f8e:	4b08      	ldr	r3, [pc, #32]	; (8000fb0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f90:	2201      	movs	r2, #1
 8000f92:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000f94:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000f9a:	4805      	ldr	r0, [pc, #20]	; (8000fb0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f9c:	f000 ffbd 	bl	8001f1a <HAL_PCD_Init>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000fa6:	f7ff fecf 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	20000374 	.word	0x20000374

08000fb4 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b0ae      	sub	sp, #184	; 0xb8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fbc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	60da      	str	r2, [r3, #12]
 8000fca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fcc:	f107 0314 	add.w	r3, r7, #20
 8000fd0:	2290      	movs	r2, #144	; 0x90
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f004 f8fb 	bl	80051d0 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000fe2:	d159      	bne.n	8001098 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000fe4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000fe8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000fea:	2300      	movs	r3, #0
 8000fec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ff0:	f107 0314 	add.w	r3, r7, #20
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f001 fe0d 	bl	8002c14 <HAL_RCCEx_PeriphCLKConfig>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001000:	f7ff fea2 	bl	8000d48 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001004:	4b26      	ldr	r3, [pc, #152]	; (80010a0 <HAL_PCD_MspInit+0xec>)
 8001006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001008:	4a25      	ldr	r2, [pc, #148]	; (80010a0 <HAL_PCD_MspInit+0xec>)
 800100a:	f043 0301 	orr.w	r3, r3, #1
 800100e:	6313      	str	r3, [r2, #48]	; 0x30
 8001010:	4b23      	ldr	r3, [pc, #140]	; (80010a0 <HAL_PCD_MspInit+0xec>)
 8001012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001014:	f003 0301 	and.w	r3, r3, #1
 8001018:	613b      	str	r3, [r7, #16]
 800101a:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800101c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001020:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001024:	2302      	movs	r3, #2
 8001026:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102a:	2300      	movs	r3, #0
 800102c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001030:	2303      	movs	r3, #3
 8001032:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001036:	230a      	movs	r3, #10
 8001038:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800103c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001040:	4619      	mov	r1, r3
 8001042:	4818      	ldr	r0, [pc, #96]	; (80010a4 <HAL_PCD_MspInit+0xf0>)
 8001044:	f000 fda4 	bl	8001b90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001048:	f44f 7300 	mov.w	r3, #512	; 0x200
 800104c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001050:	2300      	movs	r3, #0
 8001052:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001056:	2300      	movs	r3, #0
 8001058:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800105c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001060:	4619      	mov	r1, r3
 8001062:	4810      	ldr	r0, [pc, #64]	; (80010a4 <HAL_PCD_MspInit+0xf0>)
 8001064:	f000 fd94 	bl	8001b90 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001068:	4b0d      	ldr	r3, [pc, #52]	; (80010a0 <HAL_PCD_MspInit+0xec>)
 800106a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800106c:	4a0c      	ldr	r2, [pc, #48]	; (80010a0 <HAL_PCD_MspInit+0xec>)
 800106e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001072:	6353      	str	r3, [r2, #52]	; 0x34
 8001074:	4b0a      	ldr	r3, [pc, #40]	; (80010a0 <HAL_PCD_MspInit+0xec>)
 8001076:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001078:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800107c:	60fb      	str	r3, [r7, #12]
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	4b07      	ldr	r3, [pc, #28]	; (80010a0 <HAL_PCD_MspInit+0xec>)
 8001082:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001084:	4a06      	ldr	r2, [pc, #24]	; (80010a0 <HAL_PCD_MspInit+0xec>)
 8001086:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800108a:	6453      	str	r3, [r2, #68]	; 0x44
 800108c:	4b04      	ldr	r3, [pc, #16]	; (80010a0 <HAL_PCD_MspInit+0xec>)
 800108e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001090:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001094:	60bb      	str	r3, [r7, #8]
 8001096:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001098:	bf00      	nop
 800109a:	37b8      	adds	r7, #184	; 0xb8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	40023800 	.word	0x40023800
 80010a4:	40020000 	.word	0x40020000

080010a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80010a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010e0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010ac:	480d      	ldr	r0, [pc, #52]	; (80010e4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010ae:	490e      	ldr	r1, [pc, #56]	; (80010e8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010b0:	4a0e      	ldr	r2, [pc, #56]	; (80010ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010b4:	e002      	b.n	80010bc <LoopCopyDataInit>

080010b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ba:	3304      	adds	r3, #4

080010bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010c0:	d3f9      	bcc.n	80010b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010c2:	4a0b      	ldr	r2, [pc, #44]	; (80010f0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010c4:	4c0b      	ldr	r4, [pc, #44]	; (80010f4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80010c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010c8:	e001      	b.n	80010ce <LoopFillZerobss>

080010ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010cc:	3204      	adds	r2, #4

080010ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010d0:	d3fb      	bcc.n	80010ca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010d2:	f7ff fe97 	bl	8000e04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010d6:	f004 f857 	bl	8005188 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010da:	f7ff fbe1 	bl	80008a0 <main>
  bx  lr    
 80010de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010e0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80010e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010e8:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 80010ec:	080052a4 	.word	0x080052a4
  ldr r2, =_sbss
 80010f0:	2000016c 	.word	0x2000016c
  ldr r4, =_ebss
 80010f4:	20000880 	.word	0x20000880

080010f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010f8:	e7fe      	b.n	80010f8 <ADC_IRQHandler>

080010fa <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010fa:	b580      	push	{r7, lr}
 80010fc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010fe:	2003      	movs	r0, #3
 8001100:	f000 f94c 	bl	800139c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001104:	2000      	movs	r0, #0
 8001106:	f000 f805 	bl	8001114 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800110a:	f7ff fe23 	bl	8000d54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800110e:	2300      	movs	r3, #0
}
 8001110:	4618      	mov	r0, r3
 8001112:	bd80      	pop	{r7, pc}

08001114 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800111c:	4b12      	ldr	r3, [pc, #72]	; (8001168 <HAL_InitTick+0x54>)
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	4b12      	ldr	r3, [pc, #72]	; (800116c <HAL_InitTick+0x58>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	4619      	mov	r1, r3
 8001126:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800112a:	fbb3 f3f1 	udiv	r3, r3, r1
 800112e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001132:	4618      	mov	r0, r3
 8001134:	f000 f967 	bl	8001406 <HAL_SYSTICK_Config>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800113e:	2301      	movs	r3, #1
 8001140:	e00e      	b.n	8001160 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2b0f      	cmp	r3, #15
 8001146:	d80a      	bhi.n	800115e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001148:	2200      	movs	r2, #0
 800114a:	6879      	ldr	r1, [r7, #4]
 800114c:	f04f 30ff 	mov.w	r0, #4294967295
 8001150:	f000 f92f 	bl	80013b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001154:	4a06      	ldr	r2, [pc, #24]	; (8001170 <HAL_InitTick+0x5c>)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800115a:	2300      	movs	r3, #0
 800115c:	e000      	b.n	8001160 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800115e:	2301      	movs	r3, #1
}
 8001160:	4618      	mov	r0, r3
 8001162:	3708      	adds	r7, #8
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	20000020 	.word	0x20000020
 800116c:	20000028 	.word	0x20000028
 8001170:	20000024 	.word	0x20000024

08001174 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001178:	4b06      	ldr	r3, [pc, #24]	; (8001194 <HAL_IncTick+0x20>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	461a      	mov	r2, r3
 800117e:	4b06      	ldr	r3, [pc, #24]	; (8001198 <HAL_IncTick+0x24>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4413      	add	r3, r2
 8001184:	4a04      	ldr	r2, [pc, #16]	; (8001198 <HAL_IncTick+0x24>)
 8001186:	6013      	str	r3, [r2, #0]
}
 8001188:	bf00      	nop
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	20000028 	.word	0x20000028
 8001198:	2000087c 	.word	0x2000087c

0800119c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  return uwTick;
 80011a0:	4b03      	ldr	r3, [pc, #12]	; (80011b0 <HAL_GetTick+0x14>)
 80011a2:	681b      	ldr	r3, [r3, #0]
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	2000087c 	.word	0x2000087c

080011b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011bc:	f7ff ffee 	bl	800119c <HAL_GetTick>
 80011c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011cc:	d005      	beq.n	80011da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011ce:	4b0a      	ldr	r3, [pc, #40]	; (80011f8 <HAL_Delay+0x44>)
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	461a      	mov	r2, r3
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	4413      	add	r3, r2
 80011d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011da:	bf00      	nop
 80011dc:	f7ff ffde 	bl	800119c <HAL_GetTick>
 80011e0:	4602      	mov	r2, r0
 80011e2:	68bb      	ldr	r3, [r7, #8]
 80011e4:	1ad3      	subs	r3, r2, r3
 80011e6:	68fa      	ldr	r2, [r7, #12]
 80011e8:	429a      	cmp	r2, r3
 80011ea:	d8f7      	bhi.n	80011dc <HAL_Delay+0x28>
  {
  }
}
 80011ec:	bf00      	nop
 80011ee:	bf00      	nop
 80011f0:	3710      	adds	r7, #16
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	20000028 	.word	0x20000028

080011fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b085      	sub	sp, #20
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	f003 0307 	and.w	r3, r3, #7
 800120a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800120c:	4b0b      	ldr	r3, [pc, #44]	; (800123c <__NVIC_SetPriorityGrouping+0x40>)
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001212:	68ba      	ldr	r2, [r7, #8]
 8001214:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001218:	4013      	ands	r3, r2
 800121a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001224:	4b06      	ldr	r3, [pc, #24]	; (8001240 <__NVIC_SetPriorityGrouping+0x44>)
 8001226:	4313      	orrs	r3, r2
 8001228:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800122a:	4a04      	ldr	r2, [pc, #16]	; (800123c <__NVIC_SetPriorityGrouping+0x40>)
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	60d3      	str	r3, [r2, #12]
}
 8001230:	bf00      	nop
 8001232:	3714      	adds	r7, #20
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr
 800123c:	e000ed00 	.word	0xe000ed00
 8001240:	05fa0000 	.word	0x05fa0000

08001244 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001248:	4b04      	ldr	r3, [pc, #16]	; (800125c <__NVIC_GetPriorityGrouping+0x18>)
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	0a1b      	lsrs	r3, r3, #8
 800124e:	f003 0307 	and.w	r3, r3, #7
}
 8001252:	4618      	mov	r0, r3
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr
 800125c:	e000ed00 	.word	0xe000ed00

08001260 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	4603      	mov	r3, r0
 8001268:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800126a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126e:	2b00      	cmp	r3, #0
 8001270:	db0b      	blt.n	800128a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001272:	79fb      	ldrb	r3, [r7, #7]
 8001274:	f003 021f 	and.w	r2, r3, #31
 8001278:	4907      	ldr	r1, [pc, #28]	; (8001298 <__NVIC_EnableIRQ+0x38>)
 800127a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127e:	095b      	lsrs	r3, r3, #5
 8001280:	2001      	movs	r0, #1
 8001282:	fa00 f202 	lsl.w	r2, r0, r2
 8001286:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800128a:	bf00      	nop
 800128c:	370c      	adds	r7, #12
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	e000e100 	.word	0xe000e100

0800129c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4603      	mov	r3, r0
 80012a4:	6039      	str	r1, [r7, #0]
 80012a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	db0a      	blt.n	80012c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	b2da      	uxtb	r2, r3
 80012b4:	490c      	ldr	r1, [pc, #48]	; (80012e8 <__NVIC_SetPriority+0x4c>)
 80012b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ba:	0112      	lsls	r2, r2, #4
 80012bc:	b2d2      	uxtb	r2, r2
 80012be:	440b      	add	r3, r1
 80012c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012c4:	e00a      	b.n	80012dc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	b2da      	uxtb	r2, r3
 80012ca:	4908      	ldr	r1, [pc, #32]	; (80012ec <__NVIC_SetPriority+0x50>)
 80012cc:	79fb      	ldrb	r3, [r7, #7]
 80012ce:	f003 030f 	and.w	r3, r3, #15
 80012d2:	3b04      	subs	r3, #4
 80012d4:	0112      	lsls	r2, r2, #4
 80012d6:	b2d2      	uxtb	r2, r2
 80012d8:	440b      	add	r3, r1
 80012da:	761a      	strb	r2, [r3, #24]
}
 80012dc:	bf00      	nop
 80012de:	370c      	adds	r7, #12
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr
 80012e8:	e000e100 	.word	0xe000e100
 80012ec:	e000ed00 	.word	0xe000ed00

080012f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b089      	sub	sp, #36	; 0x24
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	60f8      	str	r0, [r7, #12]
 80012f8:	60b9      	str	r1, [r7, #8]
 80012fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	f003 0307 	and.w	r3, r3, #7
 8001302:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	f1c3 0307 	rsb	r3, r3, #7
 800130a:	2b04      	cmp	r3, #4
 800130c:	bf28      	it	cs
 800130e:	2304      	movcs	r3, #4
 8001310:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	3304      	adds	r3, #4
 8001316:	2b06      	cmp	r3, #6
 8001318:	d902      	bls.n	8001320 <NVIC_EncodePriority+0x30>
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	3b03      	subs	r3, #3
 800131e:	e000      	b.n	8001322 <NVIC_EncodePriority+0x32>
 8001320:	2300      	movs	r3, #0
 8001322:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001324:	f04f 32ff 	mov.w	r2, #4294967295
 8001328:	69bb      	ldr	r3, [r7, #24]
 800132a:	fa02 f303 	lsl.w	r3, r2, r3
 800132e:	43da      	mvns	r2, r3
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	401a      	ands	r2, r3
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001338:	f04f 31ff 	mov.w	r1, #4294967295
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	fa01 f303 	lsl.w	r3, r1, r3
 8001342:	43d9      	mvns	r1, r3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001348:	4313      	orrs	r3, r2
         );
}
 800134a:	4618      	mov	r0, r3
 800134c:	3724      	adds	r7, #36	; 0x24
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
	...

08001358 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	3b01      	subs	r3, #1
 8001364:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001368:	d301      	bcc.n	800136e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800136a:	2301      	movs	r3, #1
 800136c:	e00f      	b.n	800138e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800136e:	4a0a      	ldr	r2, [pc, #40]	; (8001398 <SysTick_Config+0x40>)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	3b01      	subs	r3, #1
 8001374:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001376:	210f      	movs	r1, #15
 8001378:	f04f 30ff 	mov.w	r0, #4294967295
 800137c:	f7ff ff8e 	bl	800129c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001380:	4b05      	ldr	r3, [pc, #20]	; (8001398 <SysTick_Config+0x40>)
 8001382:	2200      	movs	r2, #0
 8001384:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001386:	4b04      	ldr	r3, [pc, #16]	; (8001398 <SysTick_Config+0x40>)
 8001388:	2207      	movs	r2, #7
 800138a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800138c:	2300      	movs	r3, #0
}
 800138e:	4618      	mov	r0, r3
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	e000e010 	.word	0xe000e010

0800139c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f7ff ff29 	bl	80011fc <__NVIC_SetPriorityGrouping>
}
 80013aa:	bf00      	nop
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b086      	sub	sp, #24
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	4603      	mov	r3, r0
 80013ba:	60b9      	str	r1, [r7, #8]
 80013bc:	607a      	str	r2, [r7, #4]
 80013be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80013c0:	2300      	movs	r3, #0
 80013c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013c4:	f7ff ff3e 	bl	8001244 <__NVIC_GetPriorityGrouping>
 80013c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013ca:	687a      	ldr	r2, [r7, #4]
 80013cc:	68b9      	ldr	r1, [r7, #8]
 80013ce:	6978      	ldr	r0, [r7, #20]
 80013d0:	f7ff ff8e 	bl	80012f0 <NVIC_EncodePriority>
 80013d4:	4602      	mov	r2, r0
 80013d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013da:	4611      	mov	r1, r2
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff ff5d 	bl	800129c <__NVIC_SetPriority>
}
 80013e2:	bf00      	nop
 80013e4:	3718      	adds	r7, #24
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}

080013ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b082      	sub	sp, #8
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	4603      	mov	r3, r0
 80013f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff ff31 	bl	8001260 <__NVIC_EnableIRQ>
}
 80013fe:	bf00      	nop
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}

08001406 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001406:	b580      	push	{r7, lr}
 8001408:	b082      	sub	sp, #8
 800140a:	af00      	add	r7, sp, #0
 800140c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f7ff ffa2 	bl	8001358 <SysTick_Config>
 8001414:	4603      	mov	r3, r0
}
 8001416:	4618      	mov	r0, r3
 8001418:	3708      	adds	r7, #8
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}

0800141e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800141e:	b580      	push	{r7, lr}
 8001420:	b084      	sub	sp, #16
 8001422:	af00      	add	r7, sp, #0
 8001424:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800142a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800142c:	f7ff feb6 	bl	800119c <HAL_GetTick>
 8001430:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001438:	b2db      	uxtb	r3, r3
 800143a:	2b02      	cmp	r3, #2
 800143c:	d008      	beq.n	8001450 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2280      	movs	r2, #128	; 0x80
 8001442:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2200      	movs	r2, #0
 8001448:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800144c:	2301      	movs	r3, #1
 800144e:	e052      	b.n	80014f6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f022 0216 	bic.w	r2, r2, #22
 800145e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	695a      	ldr	r2, [r3, #20]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800146e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001474:	2b00      	cmp	r3, #0
 8001476:	d103      	bne.n	8001480 <HAL_DMA_Abort+0x62>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800147c:	2b00      	cmp	r3, #0
 800147e:	d007      	beq.n	8001490 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f022 0208 	bic.w	r2, r2, #8
 800148e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f022 0201 	bic.w	r2, r2, #1
 800149e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014a0:	e013      	b.n	80014ca <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80014a2:	f7ff fe7b 	bl	800119c <HAL_GetTick>
 80014a6:	4602      	mov	r2, r0
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	1ad3      	subs	r3, r2, r3
 80014ac:	2b05      	cmp	r3, #5
 80014ae:	d90c      	bls.n	80014ca <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2220      	movs	r2, #32
 80014b4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2203      	movs	r2, #3
 80014ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2200      	movs	r2, #0
 80014c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80014c6:	2303      	movs	r3, #3
 80014c8:	e015      	b.n	80014f6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f003 0301 	and.w	r3, r3, #1
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d1e4      	bne.n	80014a2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014dc:	223f      	movs	r2, #63	; 0x3f
 80014de:	409a      	lsls	r2, r3
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2201      	movs	r2, #1
 80014e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2200      	movs	r2, #0
 80014f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80014f4:	2300      	movs	r3, #0
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3710      	adds	r7, #16
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}

080014fe <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014fe:	b480      	push	{r7}
 8001500:	b083      	sub	sp, #12
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800150c:	b2db      	uxtb	r3, r3
 800150e:	2b02      	cmp	r3, #2
 8001510:	d004      	beq.n	800151c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2280      	movs	r2, #128	; 0x80
 8001516:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	e00c      	b.n	8001536 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2205      	movs	r2, #5
 8001520:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f022 0201 	bic.w	r2, r2, #1
 8001532:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001534:	2300      	movs	r3, #0
}
 8001536:	4618      	mov	r0, r3
 8001538:	370c      	adds	r7, #12
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
	...

08001544 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d101      	bne.n	8001556 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e06a      	b.n	800162c <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800155c:	2b00      	cmp	r3, #0
 800155e:	d106      	bne.n	800156e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2223      	movs	r2, #35	; 0x23
 8001564:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f7ff f83f 	bl	80005ec <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800156e:	4b31      	ldr	r3, [pc, #196]	; (8001634 <HAL_ETH_Init+0xf0>)
 8001570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001572:	4a30      	ldr	r2, [pc, #192]	; (8001634 <HAL_ETH_Init+0xf0>)
 8001574:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001578:	6453      	str	r3, [r2, #68]	; 0x44
 800157a:	4b2e      	ldr	r3, [pc, #184]	; (8001634 <HAL_ETH_Init+0xf0>)
 800157c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800157e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001582:	60bb      	str	r3, [r7, #8]
 8001584:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001586:	4b2c      	ldr	r3, [pc, #176]	; (8001638 <HAL_ETH_Init+0xf4>)
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	4a2b      	ldr	r2, [pc, #172]	; (8001638 <HAL_ETH_Init+0xf4>)
 800158c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001590:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001592:	4b29      	ldr	r3, [pc, #164]	; (8001638 <HAL_ETH_Init+0xf4>)
 8001594:	685a      	ldr	r2, [r3, #4]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	4927      	ldr	r1, [pc, #156]	; (8001638 <HAL_ETH_Init+0xf4>)
 800159c:	4313      	orrs	r3, r2
 800159e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80015a0:	4b25      	ldr	r3, [pc, #148]	; (8001638 <HAL_ETH_Init+0xf4>)
 80015a2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	687a      	ldr	r2, [r7, #4]
 80015b0:	6812      	ldr	r2, [r2, #0]
 80015b2:	f043 0301 	orr.w	r3, r3, #1
 80015b6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80015ba:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015bc:	f7ff fdee 	bl	800119c <HAL_GetTick>
 80015c0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80015c2:	e011      	b.n	80015e8 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80015c4:	f7ff fdea 	bl	800119c <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80015d2:	d909      	bls.n	80015e8 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2204      	movs	r2, #4
 80015d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	22e0      	movs	r2, #224	; 0xe0
 80015e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80015e4:	2301      	movs	r3, #1
 80015e6:	e021      	b.n	800162c <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f003 0301 	and.w	r3, r3, #1
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d1e4      	bne.n	80015c4 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	f000 f958 	bl	80018b0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001600:	6878      	ldr	r0, [r7, #4]
 8001602:	f000 f9ff 	bl	8001a04 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f000 fa55 	bl	8001ab6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	461a      	mov	r2, r3
 8001612:	2100      	movs	r1, #0
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	f000 f9bd 	bl	8001994 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2200      	movs	r2, #0
 800161e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2210      	movs	r2, #16
 8001626:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800162a:	2300      	movs	r3, #0
}
 800162c:	4618      	mov	r0, r3
 800162e:	3710      	adds	r7, #16
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	40023800 	.word	0x40023800
 8001638:	40013800 	.word	0x40013800

0800163c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800164e:	68fa      	ldr	r2, [r7, #12]
 8001650:	4b51      	ldr	r3, [pc, #324]	; (8001798 <ETH_SetMACConfig+0x15c>)
 8001652:	4013      	ands	r3, r2
 8001654:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	7c1b      	ldrb	r3, [r3, #16]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d102      	bne.n	8001664 <ETH_SetMACConfig+0x28>
 800165e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001662:	e000      	b.n	8001666 <ETH_SetMACConfig+0x2a>
 8001664:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	7c5b      	ldrb	r3, [r3, #17]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d102      	bne.n	8001674 <ETH_SetMACConfig+0x38>
 800166e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001672:	e000      	b.n	8001676 <ETH_SetMACConfig+0x3a>
 8001674:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001676:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800167c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	7fdb      	ldrb	r3, [r3, #31]
 8001682:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001684:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800168a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800168c:	683a      	ldr	r2, [r7, #0]
 800168e:	7f92      	ldrb	r2, [r2, #30]
 8001690:	2a00      	cmp	r2, #0
 8001692:	d102      	bne.n	800169a <ETH_SetMACConfig+0x5e>
 8001694:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001698:	e000      	b.n	800169c <ETH_SetMACConfig+0x60>
 800169a:	2200      	movs	r2, #0
                        macconf->Speed |
 800169c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	7f1b      	ldrb	r3, [r3, #28]
 80016a2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80016a4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80016aa:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	791b      	ldrb	r3, [r3, #4]
 80016b0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80016b2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80016b4:	683a      	ldr	r2, [r7, #0]
 80016b6:	f892 2020 	ldrb.w	r2, [r2, #32]
 80016ba:	2a00      	cmp	r2, #0
 80016bc:	d102      	bne.n	80016c4 <ETH_SetMACConfig+0x88>
 80016be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016c2:	e000      	b.n	80016c6 <ETH_SetMACConfig+0x8a>
 80016c4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80016c6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	7bdb      	ldrb	r3, [r3, #15]
 80016cc:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80016ce:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80016d4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80016dc:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80016de:	4313      	orrs	r3, r2
 80016e0:	68fa      	ldr	r2, [r7, #12]
 80016e2:	4313      	orrs	r3, r2
 80016e4:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	68fa      	ldr	r2, [r7, #12]
 80016ec:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80016f6:	2001      	movs	r0, #1
 80016f8:	f7ff fd5c 	bl	80011b4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	68fa      	ldr	r2, [r7, #12]
 8001702:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	699b      	ldr	r3, [r3, #24]
 800170a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800170c:	68fa      	ldr	r2, [r7, #12]
 800170e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001712:	4013      	ands	r3, r2
 8001714:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800171a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800171c:	683a      	ldr	r2, [r7, #0]
 800171e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001722:	2a00      	cmp	r2, #0
 8001724:	d101      	bne.n	800172a <ETH_SetMACConfig+0xee>
 8001726:	2280      	movs	r2, #128	; 0x80
 8001728:	e000      	b.n	800172c <ETH_SetMACConfig+0xf0>
 800172a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800172c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001732:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001734:	683a      	ldr	r2, [r7, #0]
 8001736:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800173a:	2a01      	cmp	r2, #1
 800173c:	d101      	bne.n	8001742 <ETH_SetMACConfig+0x106>
 800173e:	2208      	movs	r2, #8
 8001740:	e000      	b.n	8001744 <ETH_SetMACConfig+0x108>
 8001742:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001744:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001746:	683a      	ldr	r2, [r7, #0]
 8001748:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 800174c:	2a01      	cmp	r2, #1
 800174e:	d101      	bne.n	8001754 <ETH_SetMACConfig+0x118>
 8001750:	2204      	movs	r2, #4
 8001752:	e000      	b.n	8001756 <ETH_SetMACConfig+0x11a>
 8001754:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001756:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001758:	683a      	ldr	r2, [r7, #0]
 800175a:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800175e:	2a01      	cmp	r2, #1
 8001760:	d101      	bne.n	8001766 <ETH_SetMACConfig+0x12a>
 8001762:	2202      	movs	r2, #2
 8001764:	e000      	b.n	8001768 <ETH_SetMACConfig+0x12c>
 8001766:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001768:	4313      	orrs	r3, r2
 800176a:	68fa      	ldr	r2, [r7, #12]
 800176c:	4313      	orrs	r3, r2
 800176e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	68fa      	ldr	r2, [r7, #12]
 8001776:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	699b      	ldr	r3, [r3, #24]
 800177e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001780:	2001      	movs	r0, #1
 8001782:	f7ff fd17 	bl	80011b4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	68fa      	ldr	r2, [r7, #12]
 800178c:	619a      	str	r2, [r3, #24]
}
 800178e:	bf00      	nop
 8001790:	3710      	adds	r7, #16
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	ff20810f 	.word	0xff20810f

0800179c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017ae:	699b      	ldr	r3, [r3, #24]
 80017b0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80017b2:	68fa      	ldr	r2, [r7, #12]
 80017b4:	4b3d      	ldr	r3, [pc, #244]	; (80018ac <ETH_SetDMAConfig+0x110>)
 80017b6:	4013      	ands	r3, r2
 80017b8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	7b1b      	ldrb	r3, [r3, #12]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d102      	bne.n	80017c8 <ETH_SetDMAConfig+0x2c>
 80017c2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80017c6:	e000      	b.n	80017ca <ETH_SetDMAConfig+0x2e>
 80017c8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	7b5b      	ldrb	r3, [r3, #13]
 80017ce:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80017d0:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80017d2:	683a      	ldr	r2, [r7, #0]
 80017d4:	7f52      	ldrb	r2, [r2, #29]
 80017d6:	2a00      	cmp	r2, #0
 80017d8:	d102      	bne.n	80017e0 <ETH_SetDMAConfig+0x44>
 80017da:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80017de:	e000      	b.n	80017e2 <ETH_SetDMAConfig+0x46>
 80017e0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80017e2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	7b9b      	ldrb	r3, [r3, #14]
 80017e8:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80017ea:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80017f0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	7f1b      	ldrb	r3, [r3, #28]
 80017f6:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80017f8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	7f9b      	ldrb	r3, [r3, #30]
 80017fe:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001800:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001806:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800180e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001810:	4313      	orrs	r3, r2
 8001812:	68fa      	ldr	r2, [r7, #12]
 8001814:	4313      	orrs	r3, r2
 8001816:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001820:	461a      	mov	r2, r3
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800182e:	699b      	ldr	r3, [r3, #24]
 8001830:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001832:	2001      	movs	r0, #1
 8001834:	f7ff fcbe 	bl	80011b4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001840:	461a      	mov	r2, r3
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	791b      	ldrb	r3, [r3, #4]
 800184a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001850:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001856:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800185c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001864:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001866:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800186c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800186e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001874:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	6812      	ldr	r2, [r2, #0]
 800187a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800187e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001882:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001890:	2001      	movs	r0, #1
 8001892:	f7ff fc8f 	bl	80011b4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800189e:	461a      	mov	r2, r3
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	6013      	str	r3, [r2, #0]
}
 80018a4:	bf00      	nop
 80018a6:	3710      	adds	r7, #16
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	f8de3f23 	.word	0xf8de3f23

080018b0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b0a6      	sub	sp, #152	; 0x98
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80018b8:	2301      	movs	r3, #1
 80018ba:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80018be:	2301      	movs	r3, #1
 80018c0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80018c4:	2300      	movs	r3, #0
 80018c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80018c8:	2300      	movs	r3, #0
 80018ca:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80018ce:	2301      	movs	r3, #1
 80018d0:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80018d4:	2300      	movs	r3, #0
 80018d6:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80018da:	2301      	movs	r3, #1
 80018dc:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80018e0:	2300      	movs	r3, #0
 80018e2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80018e6:	2300      	movs	r3, #0
 80018e8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80018ec:	2300      	movs	r3, #0
 80018ee:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80018f0:	2300      	movs	r3, #0
 80018f2:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80018f6:	2300      	movs	r3, #0
 80018f8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80018fa:	2300      	movs	r3, #0
 80018fc:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001900:	2300      	movs	r3, #0
 8001902:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001906:	2300      	movs	r3, #0
 8001908:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800190c:	2300      	movs	r3, #0
 800190e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001912:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001916:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001918:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800191c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800191e:	2300      	movs	r3, #0
 8001920:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001924:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001928:	4619      	mov	r1, r3
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	f7ff fe86 	bl	800163c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001930:	2301      	movs	r3, #1
 8001932:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001934:	2301      	movs	r3, #1
 8001936:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001938:	2301      	movs	r3, #1
 800193a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800193e:	2301      	movs	r3, #1
 8001940:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001942:	2300      	movs	r3, #0
 8001944:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001946:	2300      	movs	r3, #0
 8001948:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800194c:	2300      	movs	r3, #0
 800194e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001952:	2300      	movs	r3, #0
 8001954:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001956:	2301      	movs	r3, #1
 8001958:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800195c:	2301      	movs	r3, #1
 800195e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001960:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001964:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001966:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800196a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800196c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001970:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001972:	2301      	movs	r3, #1
 8001974:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001978:	2300      	movs	r3, #0
 800197a:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800197c:	2300      	movs	r3, #0
 800197e:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001980:	f107 0308 	add.w	r3, r7, #8
 8001984:	4619      	mov	r1, r3
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f7ff ff08 	bl	800179c <ETH_SetDMAConfig>
}
 800198c:	bf00      	nop
 800198e:	3798      	adds	r7, #152	; 0x98
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}

08001994 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001994:	b480      	push	{r7}
 8001996:	b087      	sub	sp, #28
 8001998:	af00      	add	r7, sp, #0
 800199a:	60f8      	str	r0, [r7, #12]
 800199c:	60b9      	str	r1, [r7, #8]
 800199e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	3305      	adds	r3, #5
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	021b      	lsls	r3, r3, #8
 80019a8:	687a      	ldr	r2, [r7, #4]
 80019aa:	3204      	adds	r2, #4
 80019ac:	7812      	ldrb	r2, [r2, #0]
 80019ae:	4313      	orrs	r3, r2
 80019b0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80019b2:	68ba      	ldr	r2, [r7, #8]
 80019b4:	4b11      	ldr	r3, [pc, #68]	; (80019fc <ETH_MACAddressConfig+0x68>)
 80019b6:	4413      	add	r3, r2
 80019b8:	461a      	mov	r2, r3
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	3303      	adds	r3, #3
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	061a      	lsls	r2, r3, #24
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	3302      	adds	r3, #2
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	041b      	lsls	r3, r3, #16
 80019ce:	431a      	orrs	r2, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	3301      	adds	r3, #1
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	021b      	lsls	r3, r3, #8
 80019d8:	4313      	orrs	r3, r2
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	7812      	ldrb	r2, [r2, #0]
 80019de:	4313      	orrs	r3, r2
 80019e0:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80019e2:	68ba      	ldr	r2, [r7, #8]
 80019e4:	4b06      	ldr	r3, [pc, #24]	; (8001a00 <ETH_MACAddressConfig+0x6c>)
 80019e6:	4413      	add	r3, r2
 80019e8:	461a      	mov	r2, r3
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	6013      	str	r3, [r2, #0]
}
 80019ee:	bf00      	nop
 80019f0:	371c      	adds	r7, #28
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	40028040 	.word	0x40028040
 8001a00:	40028044 	.word	0x40028044

08001a04 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b085      	sub	sp, #20
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	60fb      	str	r3, [r7, #12]
 8001a10:	e03e      	b.n	8001a90 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	68d9      	ldr	r1, [r3, #12]
 8001a16:	68fa      	ldr	r2, [r7, #12]
 8001a18:	4613      	mov	r3, r2
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	4413      	add	r3, r2
 8001a1e:	00db      	lsls	r3, r3, #3
 8001a20:	440b      	add	r3, r1
 8001a22:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	2200      	movs	r2, #0
 8001a28:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	2200      	movs	r2, #0
 8001a34:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001a3c:	68b9      	ldr	r1, [r7, #8]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	68fa      	ldr	r2, [r7, #12]
 8001a42:	3206      	adds	r2, #6
 8001a44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d80c      	bhi.n	8001a74 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	68d9      	ldr	r1, [r3, #12]
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	1c5a      	adds	r2, r3, #1
 8001a62:	4613      	mov	r3, r2
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	4413      	add	r3, r2
 8001a68:	00db      	lsls	r3, r3, #3
 8001a6a:	440b      	add	r3, r1
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	60da      	str	r2, [r3, #12]
 8001a72:	e004      	b.n	8001a7e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	461a      	mov	r2, r3
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	60fb      	str	r3, [r7, #12]
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	2b03      	cmp	r3, #3
 8001a94:	d9bd      	bls.n	8001a12 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	68da      	ldr	r2, [r3, #12]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001aa8:	611a      	str	r2, [r3, #16]
}
 8001aaa:	bf00      	nop
 8001aac:	3714      	adds	r7, #20
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr

08001ab6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	b085      	sub	sp, #20
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001abe:	2300      	movs	r3, #0
 8001ac0:	60fb      	str	r3, [r7, #12]
 8001ac2:	e046      	b.n	8001b52 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6919      	ldr	r1, [r3, #16]
 8001ac8:	68fa      	ldr	r2, [r7, #12]
 8001aca:	4613      	mov	r3, r2
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	4413      	add	r3, r2
 8001ad0:	00db      	lsls	r3, r3, #3
 8001ad2:	440b      	add	r3, r1
 8001ad4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	2200      	movs	r2, #0
 8001aec:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	2200      	movs	r2, #0
 8001af2:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	2200      	movs	r2, #0
 8001af8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001b00:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8001b08:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001b16:	68b9      	ldr	r1, [r7, #8]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	68fa      	ldr	r2, [r7, #12]
 8001b1c:	3212      	adds	r2, #18
 8001b1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d80c      	bhi.n	8001b42 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6919      	ldr	r1, [r3, #16]
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	1c5a      	adds	r2, r3, #1
 8001b30:	4613      	mov	r3, r2
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	4413      	add	r3, r2
 8001b36:	00db      	lsls	r3, r3, #3
 8001b38:	440b      	add	r3, r1
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	60da      	str	r2, [r3, #12]
 8001b40:	e004      	b.n	8001b4c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	691b      	ldr	r3, [r3, #16]
 8001b46:	461a      	mov	r2, r3
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	3301      	adds	r3, #1
 8001b50:	60fb      	str	r3, [r7, #12]
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	2b03      	cmp	r3, #3
 8001b56:	d9b5      	bls.n	8001ac4 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2200      	movs	r2, #0
 8001b62:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2200      	movs	r2, #0
 8001b68:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2200      	movs	r2, #0
 8001b74:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	691a      	ldr	r2, [r3, #16]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b82:	60da      	str	r2, [r3, #12]
}
 8001b84:	bf00      	nop
 8001b86:	3714      	adds	r7, #20
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr

08001b90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b089      	sub	sp, #36	; 0x24
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001baa:	2300      	movs	r3, #0
 8001bac:	61fb      	str	r3, [r7, #28]
 8001bae:	e175      	b.n	8001e9c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	697a      	ldr	r2, [r7, #20]
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001bc4:	693a      	ldr	r2, [r7, #16]
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	f040 8164 	bne.w	8001e96 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f003 0303 	and.w	r3, r3, #3
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d005      	beq.n	8001be6 <HAL_GPIO_Init+0x56>
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f003 0303 	and.w	r3, r3, #3
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d130      	bne.n	8001c48 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	2203      	movs	r2, #3
 8001bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf6:	43db      	mvns	r3, r3
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	68da      	ldr	r2, [r3, #12]
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	005b      	lsls	r3, r3, #1
 8001c06:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0a:	69ba      	ldr	r2, [r7, #24]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	69ba      	ldr	r2, [r7, #24]
 8001c14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	fa02 f303 	lsl.w	r3, r2, r3
 8001c24:	43db      	mvns	r3, r3
 8001c26:	69ba      	ldr	r2, [r7, #24]
 8001c28:	4013      	ands	r3, r2
 8001c2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	091b      	lsrs	r3, r3, #4
 8001c32:	f003 0201 	and.w	r2, r3, #1
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3c:	69ba      	ldr	r2, [r7, #24]
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f003 0303 	and.w	r3, r3, #3
 8001c50:	2b03      	cmp	r3, #3
 8001c52:	d017      	beq.n	8001c84 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	005b      	lsls	r3, r3, #1
 8001c5e:	2203      	movs	r2, #3
 8001c60:	fa02 f303 	lsl.w	r3, r2, r3
 8001c64:	43db      	mvns	r3, r3
 8001c66:	69ba      	ldr	r2, [r7, #24]
 8001c68:	4013      	ands	r3, r2
 8001c6a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	689a      	ldr	r2, [r3, #8]
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	005b      	lsls	r3, r3, #1
 8001c74:	fa02 f303 	lsl.w	r3, r2, r3
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f003 0303 	and.w	r3, r3, #3
 8001c8c:	2b02      	cmp	r3, #2
 8001c8e:	d123      	bne.n	8001cd8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	08da      	lsrs	r2, r3, #3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	3208      	adds	r2, #8
 8001c98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	f003 0307 	and.w	r3, r3, #7
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	220f      	movs	r2, #15
 8001ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cac:	43db      	mvns	r3, r3
 8001cae:	69ba      	ldr	r2, [r7, #24]
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	691a      	ldr	r2, [r3, #16]
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	f003 0307 	and.w	r3, r3, #7
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	08da      	lsrs	r2, r3, #3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	3208      	adds	r2, #8
 8001cd2:	69b9      	ldr	r1, [r7, #24]
 8001cd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	005b      	lsls	r3, r3, #1
 8001ce2:	2203      	movs	r2, #3
 8001ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce8:	43db      	mvns	r3, r3
 8001cea:	69ba      	ldr	r2, [r7, #24]
 8001cec:	4013      	ands	r3, r2
 8001cee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f003 0203 	and.w	r2, r3, #3
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	f000 80be 	beq.w	8001e96 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d1a:	4b66      	ldr	r3, [pc, #408]	; (8001eb4 <HAL_GPIO_Init+0x324>)
 8001d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d1e:	4a65      	ldr	r2, [pc, #404]	; (8001eb4 <HAL_GPIO_Init+0x324>)
 8001d20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d24:	6453      	str	r3, [r2, #68]	; 0x44
 8001d26:	4b63      	ldr	r3, [pc, #396]	; (8001eb4 <HAL_GPIO_Init+0x324>)
 8001d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d2e:	60fb      	str	r3, [r7, #12]
 8001d30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001d32:	4a61      	ldr	r2, [pc, #388]	; (8001eb8 <HAL_GPIO_Init+0x328>)
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	089b      	lsrs	r3, r3, #2
 8001d38:	3302      	adds	r3, #2
 8001d3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	f003 0303 	and.w	r3, r3, #3
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	220f      	movs	r2, #15
 8001d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4e:	43db      	mvns	r3, r3
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	4013      	ands	r3, r2
 8001d54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4a58      	ldr	r2, [pc, #352]	; (8001ebc <HAL_GPIO_Init+0x32c>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d037      	beq.n	8001dce <HAL_GPIO_Init+0x23e>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4a57      	ldr	r2, [pc, #348]	; (8001ec0 <HAL_GPIO_Init+0x330>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d031      	beq.n	8001dca <HAL_GPIO_Init+0x23a>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4a56      	ldr	r2, [pc, #344]	; (8001ec4 <HAL_GPIO_Init+0x334>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d02b      	beq.n	8001dc6 <HAL_GPIO_Init+0x236>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4a55      	ldr	r2, [pc, #340]	; (8001ec8 <HAL_GPIO_Init+0x338>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d025      	beq.n	8001dc2 <HAL_GPIO_Init+0x232>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4a54      	ldr	r2, [pc, #336]	; (8001ecc <HAL_GPIO_Init+0x33c>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d01f      	beq.n	8001dbe <HAL_GPIO_Init+0x22e>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4a53      	ldr	r2, [pc, #332]	; (8001ed0 <HAL_GPIO_Init+0x340>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d019      	beq.n	8001dba <HAL_GPIO_Init+0x22a>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4a52      	ldr	r2, [pc, #328]	; (8001ed4 <HAL_GPIO_Init+0x344>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d013      	beq.n	8001db6 <HAL_GPIO_Init+0x226>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4a51      	ldr	r2, [pc, #324]	; (8001ed8 <HAL_GPIO_Init+0x348>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d00d      	beq.n	8001db2 <HAL_GPIO_Init+0x222>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4a50      	ldr	r2, [pc, #320]	; (8001edc <HAL_GPIO_Init+0x34c>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d007      	beq.n	8001dae <HAL_GPIO_Init+0x21e>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4a4f      	ldr	r2, [pc, #316]	; (8001ee0 <HAL_GPIO_Init+0x350>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d101      	bne.n	8001daa <HAL_GPIO_Init+0x21a>
 8001da6:	2309      	movs	r3, #9
 8001da8:	e012      	b.n	8001dd0 <HAL_GPIO_Init+0x240>
 8001daa:	230a      	movs	r3, #10
 8001dac:	e010      	b.n	8001dd0 <HAL_GPIO_Init+0x240>
 8001dae:	2308      	movs	r3, #8
 8001db0:	e00e      	b.n	8001dd0 <HAL_GPIO_Init+0x240>
 8001db2:	2307      	movs	r3, #7
 8001db4:	e00c      	b.n	8001dd0 <HAL_GPIO_Init+0x240>
 8001db6:	2306      	movs	r3, #6
 8001db8:	e00a      	b.n	8001dd0 <HAL_GPIO_Init+0x240>
 8001dba:	2305      	movs	r3, #5
 8001dbc:	e008      	b.n	8001dd0 <HAL_GPIO_Init+0x240>
 8001dbe:	2304      	movs	r3, #4
 8001dc0:	e006      	b.n	8001dd0 <HAL_GPIO_Init+0x240>
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e004      	b.n	8001dd0 <HAL_GPIO_Init+0x240>
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	e002      	b.n	8001dd0 <HAL_GPIO_Init+0x240>
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e000      	b.n	8001dd0 <HAL_GPIO_Init+0x240>
 8001dce:	2300      	movs	r3, #0
 8001dd0:	69fa      	ldr	r2, [r7, #28]
 8001dd2:	f002 0203 	and.w	r2, r2, #3
 8001dd6:	0092      	lsls	r2, r2, #2
 8001dd8:	4093      	lsls	r3, r2
 8001dda:	69ba      	ldr	r2, [r7, #24]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001de0:	4935      	ldr	r1, [pc, #212]	; (8001eb8 <HAL_GPIO_Init+0x328>)
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	089b      	lsrs	r3, r3, #2
 8001de6:	3302      	adds	r3, #2
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dee:	4b3d      	ldr	r3, [pc, #244]	; (8001ee4 <HAL_GPIO_Init+0x354>)
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	43db      	mvns	r3, r3
 8001df8:	69ba      	ldr	r2, [r7, #24]
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d003      	beq.n	8001e12 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001e0a:	69ba      	ldr	r2, [r7, #24]
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e12:	4a34      	ldr	r2, [pc, #208]	; (8001ee4 <HAL_GPIO_Init+0x354>)
 8001e14:	69bb      	ldr	r3, [r7, #24]
 8001e16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e18:	4b32      	ldr	r3, [pc, #200]	; (8001ee4 <HAL_GPIO_Init+0x354>)
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	43db      	mvns	r3, r3
 8001e22:	69ba      	ldr	r2, [r7, #24]
 8001e24:	4013      	ands	r3, r2
 8001e26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d003      	beq.n	8001e3c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001e34:	69ba      	ldr	r2, [r7, #24]
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e3c:	4a29      	ldr	r2, [pc, #164]	; (8001ee4 <HAL_GPIO_Init+0x354>)
 8001e3e:	69bb      	ldr	r3, [r7, #24]
 8001e40:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e42:	4b28      	ldr	r3, [pc, #160]	; (8001ee4 <HAL_GPIO_Init+0x354>)
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	43db      	mvns	r3, r3
 8001e4c:	69ba      	ldr	r2, [r7, #24]
 8001e4e:	4013      	ands	r3, r2
 8001e50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d003      	beq.n	8001e66 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001e5e:	69ba      	ldr	r2, [r7, #24]
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e66:	4a1f      	ldr	r2, [pc, #124]	; (8001ee4 <HAL_GPIO_Init+0x354>)
 8001e68:	69bb      	ldr	r3, [r7, #24]
 8001e6a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e6c:	4b1d      	ldr	r3, [pc, #116]	; (8001ee4 <HAL_GPIO_Init+0x354>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	43db      	mvns	r3, r3
 8001e76:	69ba      	ldr	r2, [r7, #24]
 8001e78:	4013      	ands	r3, r2
 8001e7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d003      	beq.n	8001e90 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e90:	4a14      	ldr	r2, [pc, #80]	; (8001ee4 <HAL_GPIO_Init+0x354>)
 8001e92:	69bb      	ldr	r3, [r7, #24]
 8001e94:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	3301      	adds	r3, #1
 8001e9a:	61fb      	str	r3, [r7, #28]
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	2b0f      	cmp	r3, #15
 8001ea0:	f67f ae86 	bls.w	8001bb0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001ea4:	bf00      	nop
 8001ea6:	bf00      	nop
 8001ea8:	3724      	adds	r7, #36	; 0x24
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	40023800 	.word	0x40023800
 8001eb8:	40013800 	.word	0x40013800
 8001ebc:	40020000 	.word	0x40020000
 8001ec0:	40020400 	.word	0x40020400
 8001ec4:	40020800 	.word	0x40020800
 8001ec8:	40020c00 	.word	0x40020c00
 8001ecc:	40021000 	.word	0x40021000
 8001ed0:	40021400 	.word	0x40021400
 8001ed4:	40021800 	.word	0x40021800
 8001ed8:	40021c00 	.word	0x40021c00
 8001edc:	40022000 	.word	0x40022000
 8001ee0:	40022400 	.word	0x40022400
 8001ee4:	40013c00 	.word	0x40013c00

08001ee8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	807b      	strh	r3, [r7, #2]
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ef8:	787b      	ldrb	r3, [r7, #1]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d003      	beq.n	8001f06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001efe:	887a      	ldrh	r2, [r7, #2]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001f04:	e003      	b.n	8001f0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001f06:	887b      	ldrh	r3, [r7, #2]
 8001f08:	041a      	lsls	r2, r3, #16
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	619a      	str	r2, [r3, #24]
}
 8001f0e:	bf00      	nop
 8001f10:	370c      	adds	r7, #12
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr

08001f1a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001f1a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f1c:	b08f      	sub	sp, #60	; 0x3c
 8001f1e:	af0a      	add	r7, sp, #40	; 0x28
 8001f20:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d101      	bne.n	8001f2c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e116      	b.n	800215a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d106      	bne.n	8001f4c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2200      	movs	r2, #0
 8001f42:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f7ff f834 	bl	8000fb4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2203      	movs	r2, #3
 8001f50:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d102      	bne.n	8001f66 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2200      	movs	r2, #0
 8001f64:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f002 fe70 	bl	8004c50 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	603b      	str	r3, [r7, #0]
 8001f76:	687e      	ldr	r6, [r7, #4]
 8001f78:	466d      	mov	r5, sp
 8001f7a:	f106 0410 	add.w	r4, r6, #16
 8001f7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f86:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f8a:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f8e:	1d33      	adds	r3, r6, #4
 8001f90:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f92:	6838      	ldr	r0, [r7, #0]
 8001f94:	f002 fe04 	bl	8004ba0 <USB_CoreInit>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d005      	beq.n	8001faa <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2202      	movs	r2, #2
 8001fa2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e0d7      	b.n	800215a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	2100      	movs	r1, #0
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f002 fe5e 	bl	8004c72 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	73fb      	strb	r3, [r7, #15]
 8001fba:	e04a      	b.n	8002052 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001fbc:	7bfa      	ldrb	r2, [r7, #15]
 8001fbe:	6879      	ldr	r1, [r7, #4]
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	00db      	lsls	r3, r3, #3
 8001fc4:	4413      	add	r3, r2
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	440b      	add	r3, r1
 8001fca:	333d      	adds	r3, #61	; 0x3d
 8001fcc:	2201      	movs	r2, #1
 8001fce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001fd0:	7bfa      	ldrb	r2, [r7, #15]
 8001fd2:	6879      	ldr	r1, [r7, #4]
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	00db      	lsls	r3, r3, #3
 8001fd8:	4413      	add	r3, r2
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	440b      	add	r3, r1
 8001fde:	333c      	adds	r3, #60	; 0x3c
 8001fe0:	7bfa      	ldrb	r2, [r7, #15]
 8001fe2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001fe4:	7bfa      	ldrb	r2, [r7, #15]
 8001fe6:	7bfb      	ldrb	r3, [r7, #15]
 8001fe8:	b298      	uxth	r0, r3
 8001fea:	6879      	ldr	r1, [r7, #4]
 8001fec:	4613      	mov	r3, r2
 8001fee:	00db      	lsls	r3, r3, #3
 8001ff0:	4413      	add	r3, r2
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	440b      	add	r3, r1
 8001ff6:	3344      	adds	r3, #68	; 0x44
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001ffc:	7bfa      	ldrb	r2, [r7, #15]
 8001ffe:	6879      	ldr	r1, [r7, #4]
 8002000:	4613      	mov	r3, r2
 8002002:	00db      	lsls	r3, r3, #3
 8002004:	4413      	add	r3, r2
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	440b      	add	r3, r1
 800200a:	3340      	adds	r3, #64	; 0x40
 800200c:	2200      	movs	r2, #0
 800200e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002010:	7bfa      	ldrb	r2, [r7, #15]
 8002012:	6879      	ldr	r1, [r7, #4]
 8002014:	4613      	mov	r3, r2
 8002016:	00db      	lsls	r3, r3, #3
 8002018:	4413      	add	r3, r2
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	440b      	add	r3, r1
 800201e:	3348      	adds	r3, #72	; 0x48
 8002020:	2200      	movs	r2, #0
 8002022:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002024:	7bfa      	ldrb	r2, [r7, #15]
 8002026:	6879      	ldr	r1, [r7, #4]
 8002028:	4613      	mov	r3, r2
 800202a:	00db      	lsls	r3, r3, #3
 800202c:	4413      	add	r3, r2
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	440b      	add	r3, r1
 8002032:	334c      	adds	r3, #76	; 0x4c
 8002034:	2200      	movs	r2, #0
 8002036:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002038:	7bfa      	ldrb	r2, [r7, #15]
 800203a:	6879      	ldr	r1, [r7, #4]
 800203c:	4613      	mov	r3, r2
 800203e:	00db      	lsls	r3, r3, #3
 8002040:	4413      	add	r3, r2
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	440b      	add	r3, r1
 8002046:	3354      	adds	r3, #84	; 0x54
 8002048:	2200      	movs	r2, #0
 800204a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800204c:	7bfb      	ldrb	r3, [r7, #15]
 800204e:	3301      	adds	r3, #1
 8002050:	73fb      	strb	r3, [r7, #15]
 8002052:	7bfa      	ldrb	r2, [r7, #15]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	429a      	cmp	r2, r3
 800205a:	d3af      	bcc.n	8001fbc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800205c:	2300      	movs	r3, #0
 800205e:	73fb      	strb	r3, [r7, #15]
 8002060:	e044      	b.n	80020ec <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002062:	7bfa      	ldrb	r2, [r7, #15]
 8002064:	6879      	ldr	r1, [r7, #4]
 8002066:	4613      	mov	r3, r2
 8002068:	00db      	lsls	r3, r3, #3
 800206a:	4413      	add	r3, r2
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	440b      	add	r3, r1
 8002070:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002074:	2200      	movs	r2, #0
 8002076:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002078:	7bfa      	ldrb	r2, [r7, #15]
 800207a:	6879      	ldr	r1, [r7, #4]
 800207c:	4613      	mov	r3, r2
 800207e:	00db      	lsls	r3, r3, #3
 8002080:	4413      	add	r3, r2
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	440b      	add	r3, r1
 8002086:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800208a:	7bfa      	ldrb	r2, [r7, #15]
 800208c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800208e:	7bfa      	ldrb	r2, [r7, #15]
 8002090:	6879      	ldr	r1, [r7, #4]
 8002092:	4613      	mov	r3, r2
 8002094:	00db      	lsls	r3, r3, #3
 8002096:	4413      	add	r3, r2
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	440b      	add	r3, r1
 800209c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80020a0:	2200      	movs	r2, #0
 80020a2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80020a4:	7bfa      	ldrb	r2, [r7, #15]
 80020a6:	6879      	ldr	r1, [r7, #4]
 80020a8:	4613      	mov	r3, r2
 80020aa:	00db      	lsls	r3, r3, #3
 80020ac:	4413      	add	r3, r2
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	440b      	add	r3, r1
 80020b2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80020b6:	2200      	movs	r2, #0
 80020b8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80020ba:	7bfa      	ldrb	r2, [r7, #15]
 80020bc:	6879      	ldr	r1, [r7, #4]
 80020be:	4613      	mov	r3, r2
 80020c0:	00db      	lsls	r3, r3, #3
 80020c2:	4413      	add	r3, r2
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	440b      	add	r3, r1
 80020c8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80020cc:	2200      	movs	r2, #0
 80020ce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80020d0:	7bfa      	ldrb	r2, [r7, #15]
 80020d2:	6879      	ldr	r1, [r7, #4]
 80020d4:	4613      	mov	r3, r2
 80020d6:	00db      	lsls	r3, r3, #3
 80020d8:	4413      	add	r3, r2
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	440b      	add	r3, r1
 80020de:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80020e2:	2200      	movs	r2, #0
 80020e4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020e6:	7bfb      	ldrb	r3, [r7, #15]
 80020e8:	3301      	adds	r3, #1
 80020ea:	73fb      	strb	r3, [r7, #15]
 80020ec:	7bfa      	ldrb	r2, [r7, #15]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d3b5      	bcc.n	8002062 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	603b      	str	r3, [r7, #0]
 80020fc:	687e      	ldr	r6, [r7, #4]
 80020fe:	466d      	mov	r5, sp
 8002100:	f106 0410 	add.w	r4, r6, #16
 8002104:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002106:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002108:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800210a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800210c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002110:	e885 0003 	stmia.w	r5, {r0, r1}
 8002114:	1d33      	adds	r3, r6, #4
 8002116:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002118:	6838      	ldr	r0, [r7, #0]
 800211a:	f002 fdf7 	bl	8004d0c <USB_DevInit>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d005      	beq.n	8002130 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2202      	movs	r2, #2
 8002128:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e014      	b.n	800215a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2200      	movs	r2, #0
 8002134:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2201      	movs	r2, #1
 800213c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002144:	2b01      	cmp	r3, #1
 8002146:	d102      	bne.n	800214e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f000 f80b 	bl	8002164 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4618      	mov	r0, r3
 8002154:	f002 ffb5 	bl	80050c2 <USB_DevDisconnect>

  return HAL_OK;
 8002158:	2300      	movs	r3, #0
}
 800215a:	4618      	mov	r0, r3
 800215c:	3714      	adds	r7, #20
 800215e:	46bd      	mov	sp, r7
 8002160:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002164 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002164:	b480      	push	{r7}
 8002166:	b085      	sub	sp, #20
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2201      	movs	r2, #1
 8002176:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2200      	movs	r2, #0
 800217e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	699b      	ldr	r3, [r3, #24]
 8002186:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002192:	4b05      	ldr	r3, [pc, #20]	; (80021a8 <HAL_PCDEx_ActivateLPM+0x44>)
 8002194:	4313      	orrs	r3, r2
 8002196:	68fa      	ldr	r2, [r7, #12]
 8002198:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800219a:	2300      	movs	r3, #0
}
 800219c:	4618      	mov	r0, r3
 800219e:	3714      	adds	r7, #20
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr
 80021a8:	10000003 	.word	0x10000003

080021ac <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021b0:	4b05      	ldr	r3, [pc, #20]	; (80021c8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a04      	ldr	r2, [pc, #16]	; (80021c8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80021b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021ba:	6013      	str	r3, [r2, #0]
}
 80021bc:	bf00      	nop
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	40007000 	.word	0x40007000

080021cc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80021d2:	2300      	movs	r3, #0
 80021d4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80021d6:	4b23      	ldr	r3, [pc, #140]	; (8002264 <HAL_PWREx_EnableOverDrive+0x98>)
 80021d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021da:	4a22      	ldr	r2, [pc, #136]	; (8002264 <HAL_PWREx_EnableOverDrive+0x98>)
 80021dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021e0:	6413      	str	r3, [r2, #64]	; 0x40
 80021e2:	4b20      	ldr	r3, [pc, #128]	; (8002264 <HAL_PWREx_EnableOverDrive+0x98>)
 80021e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ea:	603b      	str	r3, [r7, #0]
 80021ec:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80021ee:	4b1e      	ldr	r3, [pc, #120]	; (8002268 <HAL_PWREx_EnableOverDrive+0x9c>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a1d      	ldr	r2, [pc, #116]	; (8002268 <HAL_PWREx_EnableOverDrive+0x9c>)
 80021f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021f8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80021fa:	f7fe ffcf 	bl	800119c <HAL_GetTick>
 80021fe:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002200:	e009      	b.n	8002216 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002202:	f7fe ffcb 	bl	800119c <HAL_GetTick>
 8002206:	4602      	mov	r2, r0
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002210:	d901      	bls.n	8002216 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	e022      	b.n	800225c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002216:	4b14      	ldr	r3, [pc, #80]	; (8002268 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800221e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002222:	d1ee      	bne.n	8002202 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002224:	4b10      	ldr	r3, [pc, #64]	; (8002268 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a0f      	ldr	r2, [pc, #60]	; (8002268 <HAL_PWREx_EnableOverDrive+0x9c>)
 800222a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800222e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002230:	f7fe ffb4 	bl	800119c <HAL_GetTick>
 8002234:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002236:	e009      	b.n	800224c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002238:	f7fe ffb0 	bl	800119c <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002246:	d901      	bls.n	800224c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002248:	2303      	movs	r3, #3
 800224a:	e007      	b.n	800225c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800224c:	4b06      	ldr	r3, [pc, #24]	; (8002268 <HAL_PWREx_EnableOverDrive+0x9c>)
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002254:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002258:	d1ee      	bne.n	8002238 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800225a:	2300      	movs	r3, #0
}
 800225c:	4618      	mov	r0, r3
 800225e:	3708      	adds	r7, #8
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	40023800 	.word	0x40023800
 8002268:	40007000 	.word	0x40007000

0800226c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b086      	sub	sp, #24
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002274:	2300      	movs	r3, #0
 8002276:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d101      	bne.n	8002282 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e29b      	b.n	80027ba <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0301 	and.w	r3, r3, #1
 800228a:	2b00      	cmp	r3, #0
 800228c:	f000 8087 	beq.w	800239e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002290:	4b96      	ldr	r3, [pc, #600]	; (80024ec <HAL_RCC_OscConfig+0x280>)
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	f003 030c 	and.w	r3, r3, #12
 8002298:	2b04      	cmp	r3, #4
 800229a:	d00c      	beq.n	80022b6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800229c:	4b93      	ldr	r3, [pc, #588]	; (80024ec <HAL_RCC_OscConfig+0x280>)
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	f003 030c 	and.w	r3, r3, #12
 80022a4:	2b08      	cmp	r3, #8
 80022a6:	d112      	bne.n	80022ce <HAL_RCC_OscConfig+0x62>
 80022a8:	4b90      	ldr	r3, [pc, #576]	; (80024ec <HAL_RCC_OscConfig+0x280>)
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022b4:	d10b      	bne.n	80022ce <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022b6:	4b8d      	ldr	r3, [pc, #564]	; (80024ec <HAL_RCC_OscConfig+0x280>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d06c      	beq.n	800239c <HAL_RCC_OscConfig+0x130>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d168      	bne.n	800239c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e275      	b.n	80027ba <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022d6:	d106      	bne.n	80022e6 <HAL_RCC_OscConfig+0x7a>
 80022d8:	4b84      	ldr	r3, [pc, #528]	; (80024ec <HAL_RCC_OscConfig+0x280>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a83      	ldr	r2, [pc, #524]	; (80024ec <HAL_RCC_OscConfig+0x280>)
 80022de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022e2:	6013      	str	r3, [r2, #0]
 80022e4:	e02e      	b.n	8002344 <HAL_RCC_OscConfig+0xd8>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d10c      	bne.n	8002308 <HAL_RCC_OscConfig+0x9c>
 80022ee:	4b7f      	ldr	r3, [pc, #508]	; (80024ec <HAL_RCC_OscConfig+0x280>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a7e      	ldr	r2, [pc, #504]	; (80024ec <HAL_RCC_OscConfig+0x280>)
 80022f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022f8:	6013      	str	r3, [r2, #0]
 80022fa:	4b7c      	ldr	r3, [pc, #496]	; (80024ec <HAL_RCC_OscConfig+0x280>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a7b      	ldr	r2, [pc, #492]	; (80024ec <HAL_RCC_OscConfig+0x280>)
 8002300:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002304:	6013      	str	r3, [r2, #0]
 8002306:	e01d      	b.n	8002344 <HAL_RCC_OscConfig+0xd8>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002310:	d10c      	bne.n	800232c <HAL_RCC_OscConfig+0xc0>
 8002312:	4b76      	ldr	r3, [pc, #472]	; (80024ec <HAL_RCC_OscConfig+0x280>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a75      	ldr	r2, [pc, #468]	; (80024ec <HAL_RCC_OscConfig+0x280>)
 8002318:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800231c:	6013      	str	r3, [r2, #0]
 800231e:	4b73      	ldr	r3, [pc, #460]	; (80024ec <HAL_RCC_OscConfig+0x280>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a72      	ldr	r2, [pc, #456]	; (80024ec <HAL_RCC_OscConfig+0x280>)
 8002324:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002328:	6013      	str	r3, [r2, #0]
 800232a:	e00b      	b.n	8002344 <HAL_RCC_OscConfig+0xd8>
 800232c:	4b6f      	ldr	r3, [pc, #444]	; (80024ec <HAL_RCC_OscConfig+0x280>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a6e      	ldr	r2, [pc, #440]	; (80024ec <HAL_RCC_OscConfig+0x280>)
 8002332:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002336:	6013      	str	r3, [r2, #0]
 8002338:	4b6c      	ldr	r3, [pc, #432]	; (80024ec <HAL_RCC_OscConfig+0x280>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a6b      	ldr	r2, [pc, #428]	; (80024ec <HAL_RCC_OscConfig+0x280>)
 800233e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002342:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d013      	beq.n	8002374 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800234c:	f7fe ff26 	bl	800119c <HAL_GetTick>
 8002350:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002352:	e008      	b.n	8002366 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002354:	f7fe ff22 	bl	800119c <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	2b64      	cmp	r3, #100	; 0x64
 8002360:	d901      	bls.n	8002366 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e229      	b.n	80027ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002366:	4b61      	ldr	r3, [pc, #388]	; (80024ec <HAL_RCC_OscConfig+0x280>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d0f0      	beq.n	8002354 <HAL_RCC_OscConfig+0xe8>
 8002372:	e014      	b.n	800239e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002374:	f7fe ff12 	bl	800119c <HAL_GetTick>
 8002378:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800237a:	e008      	b.n	800238e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800237c:	f7fe ff0e 	bl	800119c <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	2b64      	cmp	r3, #100	; 0x64
 8002388:	d901      	bls.n	800238e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e215      	b.n	80027ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800238e:	4b57      	ldr	r3, [pc, #348]	; (80024ec <HAL_RCC_OscConfig+0x280>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d1f0      	bne.n	800237c <HAL_RCC_OscConfig+0x110>
 800239a:	e000      	b.n	800239e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800239c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0302 	and.w	r3, r3, #2
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d069      	beq.n	800247e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023aa:	4b50      	ldr	r3, [pc, #320]	; (80024ec <HAL_RCC_OscConfig+0x280>)
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	f003 030c 	and.w	r3, r3, #12
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d00b      	beq.n	80023ce <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023b6:	4b4d      	ldr	r3, [pc, #308]	; (80024ec <HAL_RCC_OscConfig+0x280>)
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	f003 030c 	and.w	r3, r3, #12
 80023be:	2b08      	cmp	r3, #8
 80023c0:	d11c      	bne.n	80023fc <HAL_RCC_OscConfig+0x190>
 80023c2:	4b4a      	ldr	r3, [pc, #296]	; (80024ec <HAL_RCC_OscConfig+0x280>)
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d116      	bne.n	80023fc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023ce:	4b47      	ldr	r3, [pc, #284]	; (80024ec <HAL_RCC_OscConfig+0x280>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0302 	and.w	r3, r3, #2
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d005      	beq.n	80023e6 <HAL_RCC_OscConfig+0x17a>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d001      	beq.n	80023e6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e1e9      	b.n	80027ba <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023e6:	4b41      	ldr	r3, [pc, #260]	; (80024ec <HAL_RCC_OscConfig+0x280>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	691b      	ldr	r3, [r3, #16]
 80023f2:	00db      	lsls	r3, r3, #3
 80023f4:	493d      	ldr	r1, [pc, #244]	; (80024ec <HAL_RCC_OscConfig+0x280>)
 80023f6:	4313      	orrs	r3, r2
 80023f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023fa:	e040      	b.n	800247e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d023      	beq.n	800244c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002404:	4b39      	ldr	r3, [pc, #228]	; (80024ec <HAL_RCC_OscConfig+0x280>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a38      	ldr	r2, [pc, #224]	; (80024ec <HAL_RCC_OscConfig+0x280>)
 800240a:	f043 0301 	orr.w	r3, r3, #1
 800240e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002410:	f7fe fec4 	bl	800119c <HAL_GetTick>
 8002414:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002416:	e008      	b.n	800242a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002418:	f7fe fec0 	bl	800119c <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	2b02      	cmp	r3, #2
 8002424:	d901      	bls.n	800242a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e1c7      	b.n	80027ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800242a:	4b30      	ldr	r3, [pc, #192]	; (80024ec <HAL_RCC_OscConfig+0x280>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0302 	and.w	r3, r3, #2
 8002432:	2b00      	cmp	r3, #0
 8002434:	d0f0      	beq.n	8002418 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002436:	4b2d      	ldr	r3, [pc, #180]	; (80024ec <HAL_RCC_OscConfig+0x280>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	691b      	ldr	r3, [r3, #16]
 8002442:	00db      	lsls	r3, r3, #3
 8002444:	4929      	ldr	r1, [pc, #164]	; (80024ec <HAL_RCC_OscConfig+0x280>)
 8002446:	4313      	orrs	r3, r2
 8002448:	600b      	str	r3, [r1, #0]
 800244a:	e018      	b.n	800247e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800244c:	4b27      	ldr	r3, [pc, #156]	; (80024ec <HAL_RCC_OscConfig+0x280>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a26      	ldr	r2, [pc, #152]	; (80024ec <HAL_RCC_OscConfig+0x280>)
 8002452:	f023 0301 	bic.w	r3, r3, #1
 8002456:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002458:	f7fe fea0 	bl	800119c <HAL_GetTick>
 800245c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800245e:	e008      	b.n	8002472 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002460:	f7fe fe9c 	bl	800119c <HAL_GetTick>
 8002464:	4602      	mov	r2, r0
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	2b02      	cmp	r3, #2
 800246c:	d901      	bls.n	8002472 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800246e:	2303      	movs	r3, #3
 8002470:	e1a3      	b.n	80027ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002472:	4b1e      	ldr	r3, [pc, #120]	; (80024ec <HAL_RCC_OscConfig+0x280>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0302 	and.w	r3, r3, #2
 800247a:	2b00      	cmp	r3, #0
 800247c:	d1f0      	bne.n	8002460 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0308 	and.w	r3, r3, #8
 8002486:	2b00      	cmp	r3, #0
 8002488:	d038      	beq.n	80024fc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	695b      	ldr	r3, [r3, #20]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d019      	beq.n	80024c6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002492:	4b16      	ldr	r3, [pc, #88]	; (80024ec <HAL_RCC_OscConfig+0x280>)
 8002494:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002496:	4a15      	ldr	r2, [pc, #84]	; (80024ec <HAL_RCC_OscConfig+0x280>)
 8002498:	f043 0301 	orr.w	r3, r3, #1
 800249c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800249e:	f7fe fe7d 	bl	800119c <HAL_GetTick>
 80024a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024a4:	e008      	b.n	80024b8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024a6:	f7fe fe79 	bl	800119c <HAL_GetTick>
 80024aa:	4602      	mov	r2, r0
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d901      	bls.n	80024b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80024b4:	2303      	movs	r3, #3
 80024b6:	e180      	b.n	80027ba <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024b8:	4b0c      	ldr	r3, [pc, #48]	; (80024ec <HAL_RCC_OscConfig+0x280>)
 80024ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024bc:	f003 0302 	and.w	r3, r3, #2
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d0f0      	beq.n	80024a6 <HAL_RCC_OscConfig+0x23a>
 80024c4:	e01a      	b.n	80024fc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024c6:	4b09      	ldr	r3, [pc, #36]	; (80024ec <HAL_RCC_OscConfig+0x280>)
 80024c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024ca:	4a08      	ldr	r2, [pc, #32]	; (80024ec <HAL_RCC_OscConfig+0x280>)
 80024cc:	f023 0301 	bic.w	r3, r3, #1
 80024d0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024d2:	f7fe fe63 	bl	800119c <HAL_GetTick>
 80024d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024d8:	e00a      	b.n	80024f0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024da:	f7fe fe5f 	bl	800119c <HAL_GetTick>
 80024de:	4602      	mov	r2, r0
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d903      	bls.n	80024f0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80024e8:	2303      	movs	r3, #3
 80024ea:	e166      	b.n	80027ba <HAL_RCC_OscConfig+0x54e>
 80024ec:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024f0:	4b92      	ldr	r3, [pc, #584]	; (800273c <HAL_RCC_OscConfig+0x4d0>)
 80024f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024f4:	f003 0302 	and.w	r3, r3, #2
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d1ee      	bne.n	80024da <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0304 	and.w	r3, r3, #4
 8002504:	2b00      	cmp	r3, #0
 8002506:	f000 80a4 	beq.w	8002652 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800250a:	4b8c      	ldr	r3, [pc, #560]	; (800273c <HAL_RCC_OscConfig+0x4d0>)
 800250c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d10d      	bne.n	8002532 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002516:	4b89      	ldr	r3, [pc, #548]	; (800273c <HAL_RCC_OscConfig+0x4d0>)
 8002518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251a:	4a88      	ldr	r2, [pc, #544]	; (800273c <HAL_RCC_OscConfig+0x4d0>)
 800251c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002520:	6413      	str	r3, [r2, #64]	; 0x40
 8002522:	4b86      	ldr	r3, [pc, #536]	; (800273c <HAL_RCC_OscConfig+0x4d0>)
 8002524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800252a:	60bb      	str	r3, [r7, #8]
 800252c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800252e:	2301      	movs	r3, #1
 8002530:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002532:	4b83      	ldr	r3, [pc, #524]	; (8002740 <HAL_RCC_OscConfig+0x4d4>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800253a:	2b00      	cmp	r3, #0
 800253c:	d118      	bne.n	8002570 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800253e:	4b80      	ldr	r3, [pc, #512]	; (8002740 <HAL_RCC_OscConfig+0x4d4>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a7f      	ldr	r2, [pc, #508]	; (8002740 <HAL_RCC_OscConfig+0x4d4>)
 8002544:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002548:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800254a:	f7fe fe27 	bl	800119c <HAL_GetTick>
 800254e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002550:	e008      	b.n	8002564 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002552:	f7fe fe23 	bl	800119c <HAL_GetTick>
 8002556:	4602      	mov	r2, r0
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	2b64      	cmp	r3, #100	; 0x64
 800255e:	d901      	bls.n	8002564 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002560:	2303      	movs	r3, #3
 8002562:	e12a      	b.n	80027ba <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002564:	4b76      	ldr	r3, [pc, #472]	; (8002740 <HAL_RCC_OscConfig+0x4d4>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800256c:	2b00      	cmp	r3, #0
 800256e:	d0f0      	beq.n	8002552 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	2b01      	cmp	r3, #1
 8002576:	d106      	bne.n	8002586 <HAL_RCC_OscConfig+0x31a>
 8002578:	4b70      	ldr	r3, [pc, #448]	; (800273c <HAL_RCC_OscConfig+0x4d0>)
 800257a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800257c:	4a6f      	ldr	r2, [pc, #444]	; (800273c <HAL_RCC_OscConfig+0x4d0>)
 800257e:	f043 0301 	orr.w	r3, r3, #1
 8002582:	6713      	str	r3, [r2, #112]	; 0x70
 8002584:	e02d      	b.n	80025e2 <HAL_RCC_OscConfig+0x376>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d10c      	bne.n	80025a8 <HAL_RCC_OscConfig+0x33c>
 800258e:	4b6b      	ldr	r3, [pc, #428]	; (800273c <HAL_RCC_OscConfig+0x4d0>)
 8002590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002592:	4a6a      	ldr	r2, [pc, #424]	; (800273c <HAL_RCC_OscConfig+0x4d0>)
 8002594:	f023 0301 	bic.w	r3, r3, #1
 8002598:	6713      	str	r3, [r2, #112]	; 0x70
 800259a:	4b68      	ldr	r3, [pc, #416]	; (800273c <HAL_RCC_OscConfig+0x4d0>)
 800259c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800259e:	4a67      	ldr	r2, [pc, #412]	; (800273c <HAL_RCC_OscConfig+0x4d0>)
 80025a0:	f023 0304 	bic.w	r3, r3, #4
 80025a4:	6713      	str	r3, [r2, #112]	; 0x70
 80025a6:	e01c      	b.n	80025e2 <HAL_RCC_OscConfig+0x376>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	2b05      	cmp	r3, #5
 80025ae:	d10c      	bne.n	80025ca <HAL_RCC_OscConfig+0x35e>
 80025b0:	4b62      	ldr	r3, [pc, #392]	; (800273c <HAL_RCC_OscConfig+0x4d0>)
 80025b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025b4:	4a61      	ldr	r2, [pc, #388]	; (800273c <HAL_RCC_OscConfig+0x4d0>)
 80025b6:	f043 0304 	orr.w	r3, r3, #4
 80025ba:	6713      	str	r3, [r2, #112]	; 0x70
 80025bc:	4b5f      	ldr	r3, [pc, #380]	; (800273c <HAL_RCC_OscConfig+0x4d0>)
 80025be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025c0:	4a5e      	ldr	r2, [pc, #376]	; (800273c <HAL_RCC_OscConfig+0x4d0>)
 80025c2:	f043 0301 	orr.w	r3, r3, #1
 80025c6:	6713      	str	r3, [r2, #112]	; 0x70
 80025c8:	e00b      	b.n	80025e2 <HAL_RCC_OscConfig+0x376>
 80025ca:	4b5c      	ldr	r3, [pc, #368]	; (800273c <HAL_RCC_OscConfig+0x4d0>)
 80025cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ce:	4a5b      	ldr	r2, [pc, #364]	; (800273c <HAL_RCC_OscConfig+0x4d0>)
 80025d0:	f023 0301 	bic.w	r3, r3, #1
 80025d4:	6713      	str	r3, [r2, #112]	; 0x70
 80025d6:	4b59      	ldr	r3, [pc, #356]	; (800273c <HAL_RCC_OscConfig+0x4d0>)
 80025d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025da:	4a58      	ldr	r2, [pc, #352]	; (800273c <HAL_RCC_OscConfig+0x4d0>)
 80025dc:	f023 0304 	bic.w	r3, r3, #4
 80025e0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d015      	beq.n	8002616 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025ea:	f7fe fdd7 	bl	800119c <HAL_GetTick>
 80025ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025f0:	e00a      	b.n	8002608 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025f2:	f7fe fdd3 	bl	800119c <HAL_GetTick>
 80025f6:	4602      	mov	r2, r0
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	1ad3      	subs	r3, r2, r3
 80025fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002600:	4293      	cmp	r3, r2
 8002602:	d901      	bls.n	8002608 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002604:	2303      	movs	r3, #3
 8002606:	e0d8      	b.n	80027ba <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002608:	4b4c      	ldr	r3, [pc, #304]	; (800273c <HAL_RCC_OscConfig+0x4d0>)
 800260a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800260c:	f003 0302 	and.w	r3, r3, #2
 8002610:	2b00      	cmp	r3, #0
 8002612:	d0ee      	beq.n	80025f2 <HAL_RCC_OscConfig+0x386>
 8002614:	e014      	b.n	8002640 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002616:	f7fe fdc1 	bl	800119c <HAL_GetTick>
 800261a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800261c:	e00a      	b.n	8002634 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800261e:	f7fe fdbd 	bl	800119c <HAL_GetTick>
 8002622:	4602      	mov	r2, r0
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	f241 3288 	movw	r2, #5000	; 0x1388
 800262c:	4293      	cmp	r3, r2
 800262e:	d901      	bls.n	8002634 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002630:	2303      	movs	r3, #3
 8002632:	e0c2      	b.n	80027ba <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002634:	4b41      	ldr	r3, [pc, #260]	; (800273c <HAL_RCC_OscConfig+0x4d0>)
 8002636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002638:	f003 0302 	and.w	r3, r3, #2
 800263c:	2b00      	cmp	r3, #0
 800263e:	d1ee      	bne.n	800261e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002640:	7dfb      	ldrb	r3, [r7, #23]
 8002642:	2b01      	cmp	r3, #1
 8002644:	d105      	bne.n	8002652 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002646:	4b3d      	ldr	r3, [pc, #244]	; (800273c <HAL_RCC_OscConfig+0x4d0>)
 8002648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264a:	4a3c      	ldr	r2, [pc, #240]	; (800273c <HAL_RCC_OscConfig+0x4d0>)
 800264c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002650:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	699b      	ldr	r3, [r3, #24]
 8002656:	2b00      	cmp	r3, #0
 8002658:	f000 80ae 	beq.w	80027b8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800265c:	4b37      	ldr	r3, [pc, #220]	; (800273c <HAL_RCC_OscConfig+0x4d0>)
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	f003 030c 	and.w	r3, r3, #12
 8002664:	2b08      	cmp	r3, #8
 8002666:	d06d      	beq.n	8002744 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	699b      	ldr	r3, [r3, #24]
 800266c:	2b02      	cmp	r3, #2
 800266e:	d14b      	bne.n	8002708 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002670:	4b32      	ldr	r3, [pc, #200]	; (800273c <HAL_RCC_OscConfig+0x4d0>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a31      	ldr	r2, [pc, #196]	; (800273c <HAL_RCC_OscConfig+0x4d0>)
 8002676:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800267a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800267c:	f7fe fd8e 	bl	800119c <HAL_GetTick>
 8002680:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002682:	e008      	b.n	8002696 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002684:	f7fe fd8a 	bl	800119c <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	2b02      	cmp	r3, #2
 8002690:	d901      	bls.n	8002696 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e091      	b.n	80027ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002696:	4b29      	ldr	r3, [pc, #164]	; (800273c <HAL_RCC_OscConfig+0x4d0>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d1f0      	bne.n	8002684 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	69da      	ldr	r2, [r3, #28]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6a1b      	ldr	r3, [r3, #32]
 80026aa:	431a      	orrs	r2, r3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b0:	019b      	lsls	r3, r3, #6
 80026b2:	431a      	orrs	r2, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b8:	085b      	lsrs	r3, r3, #1
 80026ba:	3b01      	subs	r3, #1
 80026bc:	041b      	lsls	r3, r3, #16
 80026be:	431a      	orrs	r2, r3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c4:	061b      	lsls	r3, r3, #24
 80026c6:	431a      	orrs	r2, r3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026cc:	071b      	lsls	r3, r3, #28
 80026ce:	491b      	ldr	r1, [pc, #108]	; (800273c <HAL_RCC_OscConfig+0x4d0>)
 80026d0:	4313      	orrs	r3, r2
 80026d2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026d4:	4b19      	ldr	r3, [pc, #100]	; (800273c <HAL_RCC_OscConfig+0x4d0>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a18      	ldr	r2, [pc, #96]	; (800273c <HAL_RCC_OscConfig+0x4d0>)
 80026da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026e0:	f7fe fd5c 	bl	800119c <HAL_GetTick>
 80026e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026e6:	e008      	b.n	80026fa <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026e8:	f7fe fd58 	bl	800119c <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d901      	bls.n	80026fa <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e05f      	b.n	80027ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026fa:	4b10      	ldr	r3, [pc, #64]	; (800273c <HAL_RCC_OscConfig+0x4d0>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d0f0      	beq.n	80026e8 <HAL_RCC_OscConfig+0x47c>
 8002706:	e057      	b.n	80027b8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002708:	4b0c      	ldr	r3, [pc, #48]	; (800273c <HAL_RCC_OscConfig+0x4d0>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a0b      	ldr	r2, [pc, #44]	; (800273c <HAL_RCC_OscConfig+0x4d0>)
 800270e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002712:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002714:	f7fe fd42 	bl	800119c <HAL_GetTick>
 8002718:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800271a:	e008      	b.n	800272e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800271c:	f7fe fd3e 	bl	800119c <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	2b02      	cmp	r3, #2
 8002728:	d901      	bls.n	800272e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e045      	b.n	80027ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800272e:	4b03      	ldr	r3, [pc, #12]	; (800273c <HAL_RCC_OscConfig+0x4d0>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d1f0      	bne.n	800271c <HAL_RCC_OscConfig+0x4b0>
 800273a:	e03d      	b.n	80027b8 <HAL_RCC_OscConfig+0x54c>
 800273c:	40023800 	.word	0x40023800
 8002740:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002744:	4b1f      	ldr	r3, [pc, #124]	; (80027c4 <HAL_RCC_OscConfig+0x558>)
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	699b      	ldr	r3, [r3, #24]
 800274e:	2b01      	cmp	r3, #1
 8002750:	d030      	beq.n	80027b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800275c:	429a      	cmp	r2, r3
 800275e:	d129      	bne.n	80027b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800276a:	429a      	cmp	r2, r3
 800276c:	d122      	bne.n	80027b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800276e:	68fa      	ldr	r2, [r7, #12]
 8002770:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002774:	4013      	ands	r3, r2
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800277a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800277c:	4293      	cmp	r3, r2
 800277e:	d119      	bne.n	80027b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800278a:	085b      	lsrs	r3, r3, #1
 800278c:	3b01      	subs	r3, #1
 800278e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002790:	429a      	cmp	r2, r3
 8002792:	d10f      	bne.n	80027b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800279e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d107      	bne.n	80027b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ae:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d001      	beq.n	80027b8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e000      	b.n	80027ba <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80027b8:	2300      	movs	r3, #0
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3718      	adds	r7, #24
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	40023800 	.word	0x40023800

080027c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80027d2:	2300      	movs	r3, #0
 80027d4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d101      	bne.n	80027e0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	e0d0      	b.n	8002982 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027e0:	4b6a      	ldr	r3, [pc, #424]	; (800298c <HAL_RCC_ClockConfig+0x1c4>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 030f 	and.w	r3, r3, #15
 80027e8:	683a      	ldr	r2, [r7, #0]
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d910      	bls.n	8002810 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ee:	4b67      	ldr	r3, [pc, #412]	; (800298c <HAL_RCC_ClockConfig+0x1c4>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f023 020f 	bic.w	r2, r3, #15
 80027f6:	4965      	ldr	r1, [pc, #404]	; (800298c <HAL_RCC_ClockConfig+0x1c4>)
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027fe:	4b63      	ldr	r3, [pc, #396]	; (800298c <HAL_RCC_ClockConfig+0x1c4>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 030f 	and.w	r3, r3, #15
 8002806:	683a      	ldr	r2, [r7, #0]
 8002808:	429a      	cmp	r2, r3
 800280a:	d001      	beq.n	8002810 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e0b8      	b.n	8002982 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0302 	and.w	r3, r3, #2
 8002818:	2b00      	cmp	r3, #0
 800281a:	d020      	beq.n	800285e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0304 	and.w	r3, r3, #4
 8002824:	2b00      	cmp	r3, #0
 8002826:	d005      	beq.n	8002834 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002828:	4b59      	ldr	r3, [pc, #356]	; (8002990 <HAL_RCC_ClockConfig+0x1c8>)
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	4a58      	ldr	r2, [pc, #352]	; (8002990 <HAL_RCC_ClockConfig+0x1c8>)
 800282e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002832:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0308 	and.w	r3, r3, #8
 800283c:	2b00      	cmp	r3, #0
 800283e:	d005      	beq.n	800284c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002840:	4b53      	ldr	r3, [pc, #332]	; (8002990 <HAL_RCC_ClockConfig+0x1c8>)
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	4a52      	ldr	r2, [pc, #328]	; (8002990 <HAL_RCC_ClockConfig+0x1c8>)
 8002846:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800284a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800284c:	4b50      	ldr	r3, [pc, #320]	; (8002990 <HAL_RCC_ClockConfig+0x1c8>)
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	494d      	ldr	r1, [pc, #308]	; (8002990 <HAL_RCC_ClockConfig+0x1c8>)
 800285a:	4313      	orrs	r3, r2
 800285c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0301 	and.w	r3, r3, #1
 8002866:	2b00      	cmp	r3, #0
 8002868:	d040      	beq.n	80028ec <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	2b01      	cmp	r3, #1
 8002870:	d107      	bne.n	8002882 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002872:	4b47      	ldr	r3, [pc, #284]	; (8002990 <HAL_RCC_ClockConfig+0x1c8>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d115      	bne.n	80028aa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e07f      	b.n	8002982 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	2b02      	cmp	r3, #2
 8002888:	d107      	bne.n	800289a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800288a:	4b41      	ldr	r3, [pc, #260]	; (8002990 <HAL_RCC_ClockConfig+0x1c8>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d109      	bne.n	80028aa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e073      	b.n	8002982 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800289a:	4b3d      	ldr	r3, [pc, #244]	; (8002990 <HAL_RCC_ClockConfig+0x1c8>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0302 	and.w	r3, r3, #2
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d101      	bne.n	80028aa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e06b      	b.n	8002982 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028aa:	4b39      	ldr	r3, [pc, #228]	; (8002990 <HAL_RCC_ClockConfig+0x1c8>)
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	f023 0203 	bic.w	r2, r3, #3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	4936      	ldr	r1, [pc, #216]	; (8002990 <HAL_RCC_ClockConfig+0x1c8>)
 80028b8:	4313      	orrs	r3, r2
 80028ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028bc:	f7fe fc6e 	bl	800119c <HAL_GetTick>
 80028c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028c2:	e00a      	b.n	80028da <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028c4:	f7fe fc6a 	bl	800119c <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d901      	bls.n	80028da <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e053      	b.n	8002982 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028da:	4b2d      	ldr	r3, [pc, #180]	; (8002990 <HAL_RCC_ClockConfig+0x1c8>)
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	f003 020c 	and.w	r2, r3, #12
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d1eb      	bne.n	80028c4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028ec:	4b27      	ldr	r3, [pc, #156]	; (800298c <HAL_RCC_ClockConfig+0x1c4>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 030f 	and.w	r3, r3, #15
 80028f4:	683a      	ldr	r2, [r7, #0]
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d210      	bcs.n	800291c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028fa:	4b24      	ldr	r3, [pc, #144]	; (800298c <HAL_RCC_ClockConfig+0x1c4>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f023 020f 	bic.w	r2, r3, #15
 8002902:	4922      	ldr	r1, [pc, #136]	; (800298c <HAL_RCC_ClockConfig+0x1c4>)
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	4313      	orrs	r3, r2
 8002908:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800290a:	4b20      	ldr	r3, [pc, #128]	; (800298c <HAL_RCC_ClockConfig+0x1c4>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 030f 	and.w	r3, r3, #15
 8002912:	683a      	ldr	r2, [r7, #0]
 8002914:	429a      	cmp	r2, r3
 8002916:	d001      	beq.n	800291c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e032      	b.n	8002982 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0304 	and.w	r3, r3, #4
 8002924:	2b00      	cmp	r3, #0
 8002926:	d008      	beq.n	800293a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002928:	4b19      	ldr	r3, [pc, #100]	; (8002990 <HAL_RCC_ClockConfig+0x1c8>)
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	4916      	ldr	r1, [pc, #88]	; (8002990 <HAL_RCC_ClockConfig+0x1c8>)
 8002936:	4313      	orrs	r3, r2
 8002938:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0308 	and.w	r3, r3, #8
 8002942:	2b00      	cmp	r3, #0
 8002944:	d009      	beq.n	800295a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002946:	4b12      	ldr	r3, [pc, #72]	; (8002990 <HAL_RCC_ClockConfig+0x1c8>)
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	691b      	ldr	r3, [r3, #16]
 8002952:	00db      	lsls	r3, r3, #3
 8002954:	490e      	ldr	r1, [pc, #56]	; (8002990 <HAL_RCC_ClockConfig+0x1c8>)
 8002956:	4313      	orrs	r3, r2
 8002958:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800295a:	f000 f821 	bl	80029a0 <HAL_RCC_GetSysClockFreq>
 800295e:	4602      	mov	r2, r0
 8002960:	4b0b      	ldr	r3, [pc, #44]	; (8002990 <HAL_RCC_ClockConfig+0x1c8>)
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	091b      	lsrs	r3, r3, #4
 8002966:	f003 030f 	and.w	r3, r3, #15
 800296a:	490a      	ldr	r1, [pc, #40]	; (8002994 <HAL_RCC_ClockConfig+0x1cc>)
 800296c:	5ccb      	ldrb	r3, [r1, r3]
 800296e:	fa22 f303 	lsr.w	r3, r2, r3
 8002972:	4a09      	ldr	r2, [pc, #36]	; (8002998 <HAL_RCC_ClockConfig+0x1d0>)
 8002974:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002976:	4b09      	ldr	r3, [pc, #36]	; (800299c <HAL_RCC_ClockConfig+0x1d4>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4618      	mov	r0, r3
 800297c:	f7fe fbca 	bl	8001114 <HAL_InitTick>

  return HAL_OK;
 8002980:	2300      	movs	r3, #0
}
 8002982:	4618      	mov	r0, r3
 8002984:	3710      	adds	r7, #16
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	40023c00 	.word	0x40023c00
 8002990:	40023800 	.word	0x40023800
 8002994:	0800527c 	.word	0x0800527c
 8002998:	20000020 	.word	0x20000020
 800299c:	20000024 	.word	0x20000024

080029a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029a4:	b094      	sub	sp, #80	; 0x50
 80029a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80029a8:	2300      	movs	r3, #0
 80029aa:	647b      	str	r3, [r7, #68]	; 0x44
 80029ac:	2300      	movs	r3, #0
 80029ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029b0:	2300      	movs	r3, #0
 80029b2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80029b4:	2300      	movs	r3, #0
 80029b6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029b8:	4b79      	ldr	r3, [pc, #484]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0x200>)
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	f003 030c 	and.w	r3, r3, #12
 80029c0:	2b08      	cmp	r3, #8
 80029c2:	d00d      	beq.n	80029e0 <HAL_RCC_GetSysClockFreq+0x40>
 80029c4:	2b08      	cmp	r3, #8
 80029c6:	f200 80e1 	bhi.w	8002b8c <HAL_RCC_GetSysClockFreq+0x1ec>
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d002      	beq.n	80029d4 <HAL_RCC_GetSysClockFreq+0x34>
 80029ce:	2b04      	cmp	r3, #4
 80029d0:	d003      	beq.n	80029da <HAL_RCC_GetSysClockFreq+0x3a>
 80029d2:	e0db      	b.n	8002b8c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029d4:	4b73      	ldr	r3, [pc, #460]	; (8002ba4 <HAL_RCC_GetSysClockFreq+0x204>)
 80029d6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80029d8:	e0db      	b.n	8002b92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029da:	4b73      	ldr	r3, [pc, #460]	; (8002ba8 <HAL_RCC_GetSysClockFreq+0x208>)
 80029dc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80029de:	e0d8      	b.n	8002b92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029e0:	4b6f      	ldr	r3, [pc, #444]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0x200>)
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029e8:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80029ea:	4b6d      	ldr	r3, [pc, #436]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0x200>)
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d063      	beq.n	8002abe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029f6:	4b6a      	ldr	r3, [pc, #424]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0x200>)
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	099b      	lsrs	r3, r3, #6
 80029fc:	2200      	movs	r2, #0
 80029fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a00:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a08:	633b      	str	r3, [r7, #48]	; 0x30
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	637b      	str	r3, [r7, #52]	; 0x34
 8002a0e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002a12:	4622      	mov	r2, r4
 8002a14:	462b      	mov	r3, r5
 8002a16:	f04f 0000 	mov.w	r0, #0
 8002a1a:	f04f 0100 	mov.w	r1, #0
 8002a1e:	0159      	lsls	r1, r3, #5
 8002a20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a24:	0150      	lsls	r0, r2, #5
 8002a26:	4602      	mov	r2, r0
 8002a28:	460b      	mov	r3, r1
 8002a2a:	4621      	mov	r1, r4
 8002a2c:	1a51      	subs	r1, r2, r1
 8002a2e:	6139      	str	r1, [r7, #16]
 8002a30:	4629      	mov	r1, r5
 8002a32:	eb63 0301 	sbc.w	r3, r3, r1
 8002a36:	617b      	str	r3, [r7, #20]
 8002a38:	f04f 0200 	mov.w	r2, #0
 8002a3c:	f04f 0300 	mov.w	r3, #0
 8002a40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a44:	4659      	mov	r1, fp
 8002a46:	018b      	lsls	r3, r1, #6
 8002a48:	4651      	mov	r1, sl
 8002a4a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a4e:	4651      	mov	r1, sl
 8002a50:	018a      	lsls	r2, r1, #6
 8002a52:	4651      	mov	r1, sl
 8002a54:	ebb2 0801 	subs.w	r8, r2, r1
 8002a58:	4659      	mov	r1, fp
 8002a5a:	eb63 0901 	sbc.w	r9, r3, r1
 8002a5e:	f04f 0200 	mov.w	r2, #0
 8002a62:	f04f 0300 	mov.w	r3, #0
 8002a66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a72:	4690      	mov	r8, r2
 8002a74:	4699      	mov	r9, r3
 8002a76:	4623      	mov	r3, r4
 8002a78:	eb18 0303 	adds.w	r3, r8, r3
 8002a7c:	60bb      	str	r3, [r7, #8]
 8002a7e:	462b      	mov	r3, r5
 8002a80:	eb49 0303 	adc.w	r3, r9, r3
 8002a84:	60fb      	str	r3, [r7, #12]
 8002a86:	f04f 0200 	mov.w	r2, #0
 8002a8a:	f04f 0300 	mov.w	r3, #0
 8002a8e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002a92:	4629      	mov	r1, r5
 8002a94:	024b      	lsls	r3, r1, #9
 8002a96:	4621      	mov	r1, r4
 8002a98:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002a9c:	4621      	mov	r1, r4
 8002a9e:	024a      	lsls	r2, r1, #9
 8002aa0:	4610      	mov	r0, r2
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002aaa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002aac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002ab0:	f7fd fbcc 	bl	800024c <__aeabi_uldivmod>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	460b      	mov	r3, r1
 8002ab8:	4613      	mov	r3, r2
 8002aba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002abc:	e058      	b.n	8002b70 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002abe:	4b38      	ldr	r3, [pc, #224]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	099b      	lsrs	r3, r3, #6
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	4611      	mov	r1, r2
 8002aca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002ace:	623b      	str	r3, [r7, #32]
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	627b      	str	r3, [r7, #36]	; 0x24
 8002ad4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002ad8:	4642      	mov	r2, r8
 8002ada:	464b      	mov	r3, r9
 8002adc:	f04f 0000 	mov.w	r0, #0
 8002ae0:	f04f 0100 	mov.w	r1, #0
 8002ae4:	0159      	lsls	r1, r3, #5
 8002ae6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002aea:	0150      	lsls	r0, r2, #5
 8002aec:	4602      	mov	r2, r0
 8002aee:	460b      	mov	r3, r1
 8002af0:	4641      	mov	r1, r8
 8002af2:	ebb2 0a01 	subs.w	sl, r2, r1
 8002af6:	4649      	mov	r1, r9
 8002af8:	eb63 0b01 	sbc.w	fp, r3, r1
 8002afc:	f04f 0200 	mov.w	r2, #0
 8002b00:	f04f 0300 	mov.w	r3, #0
 8002b04:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002b08:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002b0c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002b10:	ebb2 040a 	subs.w	r4, r2, sl
 8002b14:	eb63 050b 	sbc.w	r5, r3, fp
 8002b18:	f04f 0200 	mov.w	r2, #0
 8002b1c:	f04f 0300 	mov.w	r3, #0
 8002b20:	00eb      	lsls	r3, r5, #3
 8002b22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b26:	00e2      	lsls	r2, r4, #3
 8002b28:	4614      	mov	r4, r2
 8002b2a:	461d      	mov	r5, r3
 8002b2c:	4643      	mov	r3, r8
 8002b2e:	18e3      	adds	r3, r4, r3
 8002b30:	603b      	str	r3, [r7, #0]
 8002b32:	464b      	mov	r3, r9
 8002b34:	eb45 0303 	adc.w	r3, r5, r3
 8002b38:	607b      	str	r3, [r7, #4]
 8002b3a:	f04f 0200 	mov.w	r2, #0
 8002b3e:	f04f 0300 	mov.w	r3, #0
 8002b42:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b46:	4629      	mov	r1, r5
 8002b48:	028b      	lsls	r3, r1, #10
 8002b4a:	4621      	mov	r1, r4
 8002b4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b50:	4621      	mov	r1, r4
 8002b52:	028a      	lsls	r2, r1, #10
 8002b54:	4610      	mov	r0, r2
 8002b56:	4619      	mov	r1, r3
 8002b58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	61bb      	str	r3, [r7, #24]
 8002b5e:	61fa      	str	r2, [r7, #28]
 8002b60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b64:	f7fd fb72 	bl	800024c <__aeabi_uldivmod>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	460b      	mov	r3, r1
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002b70:	4b0b      	ldr	r3, [pc, #44]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	0c1b      	lsrs	r3, r3, #16
 8002b76:	f003 0303 	and.w	r3, r3, #3
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	005b      	lsls	r3, r3, #1
 8002b7e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002b80:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002b82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b88:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b8a:	e002      	b.n	8002b92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b8c:	4b05      	ldr	r3, [pc, #20]	; (8002ba4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b8e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3750      	adds	r7, #80	; 0x50
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b9e:	bf00      	nop
 8002ba0:	40023800 	.word	0x40023800
 8002ba4:	00f42400 	.word	0x00f42400
 8002ba8:	007a1200 	.word	0x007a1200

08002bac <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bac:	b480      	push	{r7}
 8002bae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bb0:	4b03      	ldr	r3, [pc, #12]	; (8002bc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop
 8002bc0:	20000020 	.word	0x20000020

08002bc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002bc8:	f7ff fff0 	bl	8002bac <HAL_RCC_GetHCLKFreq>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	4b05      	ldr	r3, [pc, #20]	; (8002be4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	0a9b      	lsrs	r3, r3, #10
 8002bd4:	f003 0307 	and.w	r3, r3, #7
 8002bd8:	4903      	ldr	r1, [pc, #12]	; (8002be8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bda:	5ccb      	ldrb	r3, [r1, r3]
 8002bdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	40023800 	.word	0x40023800
 8002be8:	0800528c 	.word	0x0800528c

08002bec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002bf0:	f7ff ffdc 	bl	8002bac <HAL_RCC_GetHCLKFreq>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	4b05      	ldr	r3, [pc, #20]	; (8002c0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	0b5b      	lsrs	r3, r3, #13
 8002bfc:	f003 0307 	and.w	r3, r3, #7
 8002c00:	4903      	ldr	r1, [pc, #12]	; (8002c10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c02:	5ccb      	ldrb	r3, [r1, r3]
 8002c04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	40023800 	.word	0x40023800
 8002c10:	0800528c 	.word	0x0800528c

08002c14 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b088      	sub	sp, #32
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002c20:	2300      	movs	r3, #0
 8002c22:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002c24:	2300      	movs	r3, #0
 8002c26:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0301 	and.w	r3, r3, #1
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d012      	beq.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002c3c:	4b69      	ldr	r3, [pc, #420]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	4a68      	ldr	r2, [pc, #416]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c42:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002c46:	6093      	str	r3, [r2, #8]
 8002c48:	4b66      	ldr	r3, [pc, #408]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c4a:	689a      	ldr	r2, [r3, #8]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c50:	4964      	ldr	r1, [pc, #400]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c52:	4313      	orrs	r3, r2
 8002c54:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d101      	bne.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d017      	beq.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c6e:	4b5d      	ldr	r3, [pc, #372]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c74:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c7c:	4959      	ldr	r1, [pc, #356]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c8c:	d101      	bne.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d101      	bne.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d017      	beq.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002caa:	4b4e      	ldr	r3, [pc, #312]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cb0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb8:	494a      	ldr	r1, [pc, #296]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cc8:	d101      	bne.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d101      	bne.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d001      	beq.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0320 	and.w	r3, r3, #32
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	f000 808b 	beq.w	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002cf8:	4b3a      	ldr	r3, [pc, #232]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfc:	4a39      	ldr	r2, [pc, #228]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d02:	6413      	str	r3, [r2, #64]	; 0x40
 8002d04:	4b37      	ldr	r3, [pc, #220]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d0c:	60bb      	str	r3, [r7, #8]
 8002d0e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002d10:	4b35      	ldr	r3, [pc, #212]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a34      	ldr	r2, [pc, #208]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002d16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d1c:	f7fe fa3e 	bl	800119c <HAL_GetTick>
 8002d20:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002d22:	e008      	b.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d24:	f7fe fa3a 	bl	800119c <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	2b64      	cmp	r3, #100	; 0x64
 8002d30:	d901      	bls.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e38f      	b.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002d36:	4b2c      	ldr	r3, [pc, #176]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d0f0      	beq.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d42:	4b28      	ldr	r3, [pc, #160]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d4a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d035      	beq.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d5a:	693a      	ldr	r2, [r7, #16]
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d02e      	beq.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d60:	4b20      	ldr	r3, [pc, #128]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d68:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d6a:	4b1e      	ldr	r3, [pc, #120]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d6e:	4a1d      	ldr	r2, [pc, #116]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d74:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d76:	4b1b      	ldr	r3, [pc, #108]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d7a:	4a1a      	ldr	r2, [pc, #104]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d80:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002d82:	4a18      	ldr	r2, [pc, #96]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002d88:	4b16      	ldr	r3, [pc, #88]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d8c:	f003 0301 	and.w	r3, r3, #1
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d114      	bne.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d94:	f7fe fa02 	bl	800119c <HAL_GetTick>
 8002d98:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d9a:	e00a      	b.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d9c:	f7fe f9fe 	bl	800119c <HAL_GetTick>
 8002da0:	4602      	mov	r2, r0
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d901      	bls.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	e351      	b.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002db2:	4b0c      	ldr	r3, [pc, #48]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002db6:	f003 0302 	and.w	r3, r3, #2
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d0ee      	beq.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dc6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002dca:	d111      	bne.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002dcc:	4b05      	ldr	r3, [pc, #20]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002dd8:	4b04      	ldr	r3, [pc, #16]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002dda:	400b      	ands	r3, r1
 8002ddc:	4901      	ldr	r1, [pc, #4]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dde:	4313      	orrs	r3, r2
 8002de0:	608b      	str	r3, [r1, #8]
 8002de2:	e00b      	b.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002de4:	40023800 	.word	0x40023800
 8002de8:	40007000 	.word	0x40007000
 8002dec:	0ffffcff 	.word	0x0ffffcff
 8002df0:	4bac      	ldr	r3, [pc, #688]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	4aab      	ldr	r2, [pc, #684]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002df6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002dfa:	6093      	str	r3, [r2, #8]
 8002dfc:	4ba9      	ldr	r3, [pc, #676]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dfe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e08:	49a6      	ldr	r1, [pc, #664]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0310 	and.w	r3, r3, #16
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d010      	beq.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002e1a:	4ba2      	ldr	r3, [pc, #648]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e20:	4aa0      	ldr	r2, [pc, #640]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e26:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002e2a:	4b9e      	ldr	r3, [pc, #632]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e2c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e34:	499b      	ldr	r1, [pc, #620]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e36:	4313      	orrs	r3, r2
 8002e38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d00a      	beq.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e48:	4b96      	ldr	r3, [pc, #600]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e4e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e56:	4993      	ldr	r1, [pc, #588]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d00a      	beq.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e6a:	4b8e      	ldr	r3, [pc, #568]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e70:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e78:	498a      	ldr	r1, [pc, #552]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d00a      	beq.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e8c:	4b85      	ldr	r3, [pc, #532]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e92:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e9a:	4982      	ldr	r1, [pc, #520]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d00a      	beq.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002eae:	4b7d      	ldr	r3, [pc, #500]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002eb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eb4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ebc:	4979      	ldr	r1, [pc, #484]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d00a      	beq.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ed0:	4b74      	ldr	r3, [pc, #464]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ed6:	f023 0203 	bic.w	r2, r3, #3
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ede:	4971      	ldr	r1, [pc, #452]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d00a      	beq.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ef2:	4b6c      	ldr	r3, [pc, #432]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ef8:	f023 020c 	bic.w	r2, r3, #12
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f00:	4968      	ldr	r1, [pc, #416]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f02:	4313      	orrs	r3, r2
 8002f04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d00a      	beq.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002f14:	4b63      	ldr	r3, [pc, #396]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f1a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f22:	4960      	ldr	r1, [pc, #384]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f24:	4313      	orrs	r3, r2
 8002f26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d00a      	beq.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002f36:	4b5b      	ldr	r3, [pc, #364]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f3c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f44:	4957      	ldr	r1, [pc, #348]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f46:	4313      	orrs	r3, r2
 8002f48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d00a      	beq.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002f58:	4b52      	ldr	r3, [pc, #328]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f5e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f66:	494f      	ldr	r1, [pc, #316]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d00a      	beq.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002f7a:	4b4a      	ldr	r3, [pc, #296]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f80:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f88:	4946      	ldr	r1, [pc, #280]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d00a      	beq.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002f9c:	4b41      	ldr	r3, [pc, #260]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fa2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002faa:	493e      	ldr	r1, [pc, #248]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fac:	4313      	orrs	r3, r2
 8002fae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d00a      	beq.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002fbe:	4b39      	ldr	r3, [pc, #228]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fc4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fcc:	4935      	ldr	r1, [pc, #212]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d00a      	beq.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002fe0:	4b30      	ldr	r3, [pc, #192]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fe6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002fee:	492d      	ldr	r1, [pc, #180]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d011      	beq.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003002:	4b28      	ldr	r3, [pc, #160]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003004:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003008:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003010:	4924      	ldr	r1, [pc, #144]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003012:	4313      	orrs	r3, r2
 8003014:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800301c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003020:	d101      	bne.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003022:	2301      	movs	r3, #1
 8003024:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0308 	and.w	r3, r3, #8
 800302e:	2b00      	cmp	r3, #0
 8003030:	d001      	beq.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003032:	2301      	movs	r3, #1
 8003034:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d00a      	beq.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003042:	4b18      	ldr	r3, [pc, #96]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003044:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003048:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003050:	4914      	ldr	r1, [pc, #80]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003052:	4313      	orrs	r3, r2
 8003054:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003060:	2b00      	cmp	r3, #0
 8003062:	d00b      	beq.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003064:	4b0f      	ldr	r3, [pc, #60]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003066:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800306a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003074:	490b      	ldr	r1, [pc, #44]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003076:	4313      	orrs	r3, r2
 8003078:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003084:	2b00      	cmp	r3, #0
 8003086:	d00f      	beq.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003088:	4b06      	ldr	r3, [pc, #24]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800308a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800308e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003098:	4902      	ldr	r1, [pc, #8]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800309a:	4313      	orrs	r3, r2
 800309c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80030a0:	e002      	b.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80030a2:	bf00      	nop
 80030a4:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d00b      	beq.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80030b4:	4b8a      	ldr	r3, [pc, #552]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030ba:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030c4:	4986      	ldr	r1, [pc, #536]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030c6:	4313      	orrs	r3, r2
 80030c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d00b      	beq.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80030d8:	4b81      	ldr	r3, [pc, #516]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030de:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030e8:	497d      	ldr	r1, [pc, #500]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030ea:	4313      	orrs	r3, r2
 80030ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d006      	beq.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	f000 80d6 	beq.w	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003104:	4b76      	ldr	r3, [pc, #472]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a75      	ldr	r2, [pc, #468]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800310a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800310e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003110:	f7fe f844 	bl	800119c <HAL_GetTick>
 8003114:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003116:	e008      	b.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003118:	f7fe f840 	bl	800119c <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	2b64      	cmp	r3, #100	; 0x64
 8003124:	d901      	bls.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e195      	b.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800312a:	4b6d      	ldr	r3, [pc, #436]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d1f0      	bne.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 0301 	and.w	r3, r3, #1
 800313e:	2b00      	cmp	r3, #0
 8003140:	d021      	beq.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003146:	2b00      	cmp	r3, #0
 8003148:	d11d      	bne.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800314a:	4b65      	ldr	r3, [pc, #404]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800314c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003150:	0c1b      	lsrs	r3, r3, #16
 8003152:	f003 0303 	and.w	r3, r3, #3
 8003156:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003158:	4b61      	ldr	r3, [pc, #388]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800315a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800315e:	0e1b      	lsrs	r3, r3, #24
 8003160:	f003 030f 	and.w	r3, r3, #15
 8003164:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	019a      	lsls	r2, r3, #6
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	041b      	lsls	r3, r3, #16
 8003170:	431a      	orrs	r2, r3
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	061b      	lsls	r3, r3, #24
 8003176:	431a      	orrs	r2, r3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	071b      	lsls	r3, r3, #28
 800317e:	4958      	ldr	r1, [pc, #352]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003180:	4313      	orrs	r3, r2
 8003182:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d004      	beq.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003196:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800319a:	d00a      	beq.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d02e      	beq.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031b0:	d129      	bne.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80031b2:	4b4b      	ldr	r3, [pc, #300]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031b8:	0c1b      	lsrs	r3, r3, #16
 80031ba:	f003 0303 	and.w	r3, r3, #3
 80031be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80031c0:	4b47      	ldr	r3, [pc, #284]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031c6:	0f1b      	lsrs	r3, r3, #28
 80031c8:	f003 0307 	and.w	r3, r3, #7
 80031cc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	019a      	lsls	r2, r3, #6
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	041b      	lsls	r3, r3, #16
 80031d8:	431a      	orrs	r2, r3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	061b      	lsls	r3, r3, #24
 80031e0:	431a      	orrs	r2, r3
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	071b      	lsls	r3, r3, #28
 80031e6:	493e      	ldr	r1, [pc, #248]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031e8:	4313      	orrs	r3, r2
 80031ea:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80031ee:	4b3c      	ldr	r3, [pc, #240]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031f4:	f023 021f 	bic.w	r2, r3, #31
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fc:	3b01      	subs	r3, #1
 80031fe:	4938      	ldr	r1, [pc, #224]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003200:	4313      	orrs	r3, r2
 8003202:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d01d      	beq.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003212:	4b33      	ldr	r3, [pc, #204]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003214:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003218:	0e1b      	lsrs	r3, r3, #24
 800321a:	f003 030f 	and.w	r3, r3, #15
 800321e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003220:	4b2f      	ldr	r3, [pc, #188]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003222:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003226:	0f1b      	lsrs	r3, r3, #28
 8003228:	f003 0307 	and.w	r3, r3, #7
 800322c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	019a      	lsls	r2, r3, #6
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	691b      	ldr	r3, [r3, #16]
 8003238:	041b      	lsls	r3, r3, #16
 800323a:	431a      	orrs	r2, r3
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	061b      	lsls	r3, r3, #24
 8003240:	431a      	orrs	r2, r3
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	071b      	lsls	r3, r3, #28
 8003246:	4926      	ldr	r1, [pc, #152]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003248:	4313      	orrs	r3, r2
 800324a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d011      	beq.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	019a      	lsls	r2, r3, #6
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	691b      	ldr	r3, [r3, #16]
 8003264:	041b      	lsls	r3, r3, #16
 8003266:	431a      	orrs	r2, r3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	061b      	lsls	r3, r3, #24
 800326e:	431a      	orrs	r2, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	071b      	lsls	r3, r3, #28
 8003276:	491a      	ldr	r1, [pc, #104]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003278:	4313      	orrs	r3, r2
 800327a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800327e:	4b18      	ldr	r3, [pc, #96]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a17      	ldr	r2, [pc, #92]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003284:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003288:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800328a:	f7fd ff87 	bl	800119c <HAL_GetTick>
 800328e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003290:	e008      	b.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003292:	f7fd ff83 	bl	800119c <HAL_GetTick>
 8003296:	4602      	mov	r2, r0
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	2b64      	cmp	r3, #100	; 0x64
 800329e:	d901      	bls.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80032a0:	2303      	movs	r3, #3
 80032a2:	e0d8      	b.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80032a4:	4b0e      	ldr	r3, [pc, #56]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d0f0      	beq.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80032b0:	69bb      	ldr	r3, [r7, #24]
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	f040 80ce 	bne.w	8003454 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80032b8:	4b09      	ldr	r3, [pc, #36]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a08      	ldr	r2, [pc, #32]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032c4:	f7fd ff6a 	bl	800119c <HAL_GetTick>
 80032c8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80032ca:	e00b      	b.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80032cc:	f7fd ff66 	bl	800119c <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	2b64      	cmp	r3, #100	; 0x64
 80032d8:	d904      	bls.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e0bb      	b.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80032de:	bf00      	nop
 80032e0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80032e4:	4b5e      	ldr	r3, [pc, #376]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80032ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032f0:	d0ec      	beq.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d003      	beq.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003302:	2b00      	cmp	r3, #0
 8003304:	d009      	beq.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800330e:	2b00      	cmp	r3, #0
 8003310:	d02e      	beq.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003316:	2b00      	cmp	r3, #0
 8003318:	d12a      	bne.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800331a:	4b51      	ldr	r3, [pc, #324]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800331c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003320:	0c1b      	lsrs	r3, r3, #16
 8003322:	f003 0303 	and.w	r3, r3, #3
 8003326:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003328:	4b4d      	ldr	r3, [pc, #308]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800332a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800332e:	0f1b      	lsrs	r3, r3, #28
 8003330:	f003 0307 	and.w	r3, r3, #7
 8003334:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	695b      	ldr	r3, [r3, #20]
 800333a:	019a      	lsls	r2, r3, #6
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	041b      	lsls	r3, r3, #16
 8003340:	431a      	orrs	r2, r3
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	699b      	ldr	r3, [r3, #24]
 8003346:	061b      	lsls	r3, r3, #24
 8003348:	431a      	orrs	r2, r3
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	071b      	lsls	r3, r3, #28
 800334e:	4944      	ldr	r1, [pc, #272]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003350:	4313      	orrs	r3, r2
 8003352:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003356:	4b42      	ldr	r3, [pc, #264]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003358:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800335c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003364:	3b01      	subs	r3, #1
 8003366:	021b      	lsls	r3, r3, #8
 8003368:	493d      	ldr	r1, [pc, #244]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800336a:	4313      	orrs	r3, r2
 800336c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003378:	2b00      	cmp	r3, #0
 800337a:	d022      	beq.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003380:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003384:	d11d      	bne.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003386:	4b36      	ldr	r3, [pc, #216]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003388:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800338c:	0e1b      	lsrs	r3, r3, #24
 800338e:	f003 030f 	and.w	r3, r3, #15
 8003392:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003394:	4b32      	ldr	r3, [pc, #200]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003396:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800339a:	0f1b      	lsrs	r3, r3, #28
 800339c:	f003 0307 	and.w	r3, r3, #7
 80033a0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	695b      	ldr	r3, [r3, #20]
 80033a6:	019a      	lsls	r2, r3, #6
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6a1b      	ldr	r3, [r3, #32]
 80033ac:	041b      	lsls	r3, r3, #16
 80033ae:	431a      	orrs	r2, r3
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	061b      	lsls	r3, r3, #24
 80033b4:	431a      	orrs	r2, r3
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	071b      	lsls	r3, r3, #28
 80033ba:	4929      	ldr	r1, [pc, #164]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033bc:	4313      	orrs	r3, r2
 80033be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0308 	and.w	r3, r3, #8
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d028      	beq.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80033ce:	4b24      	ldr	r3, [pc, #144]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033d4:	0e1b      	lsrs	r3, r3, #24
 80033d6:	f003 030f 	and.w	r3, r3, #15
 80033da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80033dc:	4b20      	ldr	r3, [pc, #128]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033e2:	0c1b      	lsrs	r3, r3, #16
 80033e4:	f003 0303 	and.w	r3, r3, #3
 80033e8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	695b      	ldr	r3, [r3, #20]
 80033ee:	019a      	lsls	r2, r3, #6
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	041b      	lsls	r3, r3, #16
 80033f4:	431a      	orrs	r2, r3
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	061b      	lsls	r3, r3, #24
 80033fa:	431a      	orrs	r2, r3
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	69db      	ldr	r3, [r3, #28]
 8003400:	071b      	lsls	r3, r3, #28
 8003402:	4917      	ldr	r1, [pc, #92]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003404:	4313      	orrs	r3, r2
 8003406:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800340a:	4b15      	ldr	r3, [pc, #84]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800340c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003410:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003418:	4911      	ldr	r1, [pc, #68]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800341a:	4313      	orrs	r3, r2
 800341c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003420:	4b0f      	ldr	r3, [pc, #60]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a0e      	ldr	r2, [pc, #56]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003426:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800342a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800342c:	f7fd feb6 	bl	800119c <HAL_GetTick>
 8003430:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003432:	e008      	b.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003434:	f7fd feb2 	bl	800119c <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	2b64      	cmp	r3, #100	; 0x64
 8003440:	d901      	bls.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e007      	b.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003446:	4b06      	ldr	r3, [pc, #24]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800344e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003452:	d1ef      	bne.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003454:	2300      	movs	r3, #0
}
 8003456:	4618      	mov	r0, r3
 8003458:	3720      	adds	r7, #32
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	40023800 	.word	0x40023800

08003464 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b082      	sub	sp, #8
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d101      	bne.n	8003476 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e040      	b.n	80034f8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800347a:	2b00      	cmp	r3, #0
 800347c:	d106      	bne.n	800348c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f7fd fcfe 	bl	8000e88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2224      	movs	r2, #36	; 0x24
 8003490:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f022 0201 	bic.w	r2, r2, #1
 80034a0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f000 fbd6 	bl	8003c54 <UART_SetConfig>
 80034a8:	4603      	mov	r3, r0
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d101      	bne.n	80034b2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e022      	b.n	80034f8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d002      	beq.n	80034c0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f000 fe2e 	bl	800411c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	685a      	ldr	r2, [r3, #4]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80034ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	689a      	ldr	r2, [r3, #8]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80034de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f042 0201 	orr.w	r2, r2, #1
 80034ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	f000 feb5 	bl	8004260 <UART_CheckIdleState>
 80034f6:	4603      	mov	r3, r0
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3708      	adds	r7, #8
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}

08003500 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003500:	b480      	push	{r7}
 8003502:	b08b      	sub	sp, #44	; 0x2c
 8003504:	af00      	add	r7, sp, #0
 8003506:	60f8      	str	r0, [r7, #12]
 8003508:	60b9      	str	r1, [r7, #8]
 800350a:	4613      	mov	r3, r2
 800350c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003512:	2b20      	cmp	r3, #32
 8003514:	d147      	bne.n	80035a6 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d002      	beq.n	8003522 <HAL_UART_Transmit_IT+0x22>
 800351c:	88fb      	ldrh	r3, [r7, #6]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d101      	bne.n	8003526 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e040      	b.n	80035a8 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	68ba      	ldr	r2, [r7, #8]
 800352a:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	88fa      	ldrh	r2, [r7, #6]
 8003530:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	88fa      	ldrh	r2, [r7, #6]
 8003538:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2200      	movs	r2, #0
 8003540:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2200      	movs	r2, #0
 8003546:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2221      	movs	r2, #33	; 0x21
 800354e:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003558:	d107      	bne.n	800356a <HAL_UART_Transmit_IT+0x6a>
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	691b      	ldr	r3, [r3, #16]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d103      	bne.n	800356a <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	4a13      	ldr	r2, [pc, #76]	; (80035b4 <HAL_UART_Transmit_IT+0xb4>)
 8003566:	66da      	str	r2, [r3, #108]	; 0x6c
 8003568:	e002      	b.n	8003570 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	4a12      	ldr	r2, [pc, #72]	; (80035b8 <HAL_UART_Transmit_IT+0xb8>)
 800356e:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	e853 3f00 	ldrex	r3, [r3]
 800357c:	613b      	str	r3, [r7, #16]
   return(result);
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003584:	627b      	str	r3, [r7, #36]	; 0x24
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	461a      	mov	r2, r3
 800358c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358e:	623b      	str	r3, [r7, #32]
 8003590:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003592:	69f9      	ldr	r1, [r7, #28]
 8003594:	6a3a      	ldr	r2, [r7, #32]
 8003596:	e841 2300 	strex	r3, r2, [r1]
 800359a:	61bb      	str	r3, [r7, #24]
   return(result);
 800359c:	69bb      	ldr	r3, [r7, #24]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d1e6      	bne.n	8003570 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 80035a2:	2300      	movs	r3, #0
 80035a4:	e000      	b.n	80035a8 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 80035a6:	2302      	movs	r3, #2
  }
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	372c      	adds	r7, #44	; 0x2c
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr
 80035b4:	080047bf 	.word	0x080047bf
 80035b8:	08004709 	.word	0x08004709

080035bc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b08a      	sub	sp, #40	; 0x28
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	60f8      	str	r0, [r7, #12]
 80035c4:	60b9      	str	r1, [r7, #8]
 80035c6:	4613      	mov	r3, r2
 80035c8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035d0:	2b20      	cmp	r3, #32
 80035d2:	d132      	bne.n	800363a <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d002      	beq.n	80035e0 <HAL_UART_Receive_IT+0x24>
 80035da:	88fb      	ldrh	r3, [r7, #6]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d101      	bne.n	80035e4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e02b      	b.n	800363c <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2200      	movs	r2, #0
 80035e8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d018      	beq.n	800362a <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	e853 3f00 	ldrex	r3, [r3]
 8003604:	613b      	str	r3, [r7, #16]
   return(result);
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800360c:	627b      	str	r3, [r7, #36]	; 0x24
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	461a      	mov	r2, r3
 8003614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003616:	623b      	str	r3, [r7, #32]
 8003618:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800361a:	69f9      	ldr	r1, [r7, #28]
 800361c:	6a3a      	ldr	r2, [r7, #32]
 800361e:	e841 2300 	strex	r3, r2, [r1]
 8003622:	61bb      	str	r3, [r7, #24]
   return(result);
 8003624:	69bb      	ldr	r3, [r7, #24]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d1e6      	bne.n	80035f8 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800362a:	88fb      	ldrh	r3, [r7, #6]
 800362c:	461a      	mov	r2, r3
 800362e:	68b9      	ldr	r1, [r7, #8]
 8003630:	68f8      	ldr	r0, [r7, #12]
 8003632:	f000 ff29 	bl	8004488 <UART_Start_Receive_IT>
 8003636:	4603      	mov	r3, r0
 8003638:	e000      	b.n	800363c <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800363a:	2302      	movs	r3, #2
  }
}
 800363c:	4618      	mov	r0, r3
 800363e:	3728      	adds	r7, #40	; 0x28
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}

08003644 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b0ba      	sub	sp, #232	; 0xe8
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	69db      	ldr	r3, [r3, #28]
 8003652:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800366a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800366e:	f640 030f 	movw	r3, #2063	; 0x80f
 8003672:	4013      	ands	r3, r2
 8003674:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003678:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800367c:	2b00      	cmp	r3, #0
 800367e:	d115      	bne.n	80036ac <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003680:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003684:	f003 0320 	and.w	r3, r3, #32
 8003688:	2b00      	cmp	r3, #0
 800368a:	d00f      	beq.n	80036ac <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800368c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003690:	f003 0320 	and.w	r3, r3, #32
 8003694:	2b00      	cmp	r3, #0
 8003696:	d009      	beq.n	80036ac <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800369c:	2b00      	cmp	r3, #0
 800369e:	f000 82ac 	beq.w	8003bfa <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	4798      	blx	r3
      }
      return;
 80036aa:	e2a6      	b.n	8003bfa <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80036ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	f000 8117 	beq.w	80038e4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80036b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80036ba:	f003 0301 	and.w	r3, r3, #1
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d106      	bne.n	80036d0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80036c2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80036c6:	4b85      	ldr	r3, [pc, #532]	; (80038dc <HAL_UART_IRQHandler+0x298>)
 80036c8:	4013      	ands	r3, r2
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	f000 810a 	beq.w	80038e4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80036d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036d4:	f003 0301 	and.w	r3, r3, #1
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d011      	beq.n	8003700 <HAL_UART_IRQHandler+0xbc>
 80036dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d00b      	beq.n	8003700 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	2201      	movs	r2, #1
 80036ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036f6:	f043 0201 	orr.w	r2, r3, #1
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003700:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003704:	f003 0302 	and.w	r3, r3, #2
 8003708:	2b00      	cmp	r3, #0
 800370a:	d011      	beq.n	8003730 <HAL_UART_IRQHandler+0xec>
 800370c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003710:	f003 0301 	and.w	r3, r3, #1
 8003714:	2b00      	cmp	r3, #0
 8003716:	d00b      	beq.n	8003730 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	2202      	movs	r2, #2
 800371e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003726:	f043 0204 	orr.w	r2, r3, #4
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003730:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003734:	f003 0304 	and.w	r3, r3, #4
 8003738:	2b00      	cmp	r3, #0
 800373a:	d011      	beq.n	8003760 <HAL_UART_IRQHandler+0x11c>
 800373c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003740:	f003 0301 	and.w	r3, r3, #1
 8003744:	2b00      	cmp	r3, #0
 8003746:	d00b      	beq.n	8003760 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	2204      	movs	r2, #4
 800374e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003756:	f043 0202 	orr.w	r2, r3, #2
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003760:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003764:	f003 0308 	and.w	r3, r3, #8
 8003768:	2b00      	cmp	r3, #0
 800376a:	d017      	beq.n	800379c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800376c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003770:	f003 0320 	and.w	r3, r3, #32
 8003774:	2b00      	cmp	r3, #0
 8003776:	d105      	bne.n	8003784 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003778:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800377c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003780:	2b00      	cmp	r3, #0
 8003782:	d00b      	beq.n	800379c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	2208      	movs	r2, #8
 800378a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003792:	f043 0208 	orr.w	r2, r3, #8
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800379c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d012      	beq.n	80037ce <HAL_UART_IRQHandler+0x18a>
 80037a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d00c      	beq.n	80037ce <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80037bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037c4:	f043 0220 	orr.w	r2, r3, #32
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	f000 8212 	beq.w	8003bfe <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80037da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037de:	f003 0320 	and.w	r3, r3, #32
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d00d      	beq.n	8003802 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80037e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037ea:	f003 0320 	and.w	r3, r3, #32
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d007      	beq.n	8003802 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d003      	beq.n	8003802 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003808:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003816:	2b40      	cmp	r3, #64	; 0x40
 8003818:	d005      	beq.n	8003826 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800381a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800381e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003822:	2b00      	cmp	r3, #0
 8003824:	d04f      	beq.n	80038c6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f000 fef4 	bl	8004614 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003836:	2b40      	cmp	r3, #64	; 0x40
 8003838:	d141      	bne.n	80038be <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	3308      	adds	r3, #8
 8003840:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003844:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003848:	e853 3f00 	ldrex	r3, [r3]
 800384c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003850:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003854:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003858:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	3308      	adds	r3, #8
 8003862:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003866:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800386a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800386e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003872:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003876:	e841 2300 	strex	r3, r2, [r1]
 800387a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800387e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003882:	2b00      	cmp	r3, #0
 8003884:	d1d9      	bne.n	800383a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800388a:	2b00      	cmp	r3, #0
 800388c:	d013      	beq.n	80038b6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003892:	4a13      	ldr	r2, [pc, #76]	; (80038e0 <HAL_UART_IRQHandler+0x29c>)
 8003894:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800389a:	4618      	mov	r0, r3
 800389c:	f7fd fe2f 	bl	80014fe <HAL_DMA_Abort_IT>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d017      	beq.n	80038d6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038ac:	687a      	ldr	r2, [r7, #4]
 80038ae:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80038b0:	4610      	mov	r0, r2
 80038b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038b4:	e00f      	b.n	80038d6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f000 f9ac 	bl	8003c14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038bc:	e00b      	b.n	80038d6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f000 f9a8 	bl	8003c14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038c4:	e007      	b.n	80038d6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f000 f9a4 	bl	8003c14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80038d4:	e193      	b.n	8003bfe <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038d6:	bf00      	nop
    return;
 80038d8:	e191      	b.n	8003bfe <HAL_UART_IRQHandler+0x5ba>
 80038da:	bf00      	nop
 80038dc:	04000120 	.word	0x04000120
 80038e0:	080046dd 	.word	0x080046dd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	f040 814c 	bne.w	8003b86 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80038ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038f2:	f003 0310 	and.w	r3, r3, #16
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	f000 8145 	beq.w	8003b86 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80038fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003900:	f003 0310 	and.w	r3, r3, #16
 8003904:	2b00      	cmp	r3, #0
 8003906:	f000 813e 	beq.w	8003b86 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	2210      	movs	r2, #16
 8003910:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800391c:	2b40      	cmp	r3, #64	; 0x40
 800391e:	f040 80b6 	bne.w	8003a8e <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800392e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003932:	2b00      	cmp	r3, #0
 8003934:	f000 8165 	beq.w	8003c02 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800393e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003942:	429a      	cmp	r2, r3
 8003944:	f080 815d 	bcs.w	8003c02 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800394e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003956:	69db      	ldr	r3, [r3, #28]
 8003958:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800395c:	f000 8086 	beq.w	8003a6c <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003968:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800396c:	e853 3f00 	ldrex	r3, [r3]
 8003970:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003974:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003978:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800397c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	461a      	mov	r2, r3
 8003986:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800398a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800398e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003992:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003996:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800399a:	e841 2300 	strex	r3, r2, [r1]
 800399e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80039a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d1da      	bne.n	8003960 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	3308      	adds	r3, #8
 80039b0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039b4:	e853 3f00 	ldrex	r3, [r3]
 80039b8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80039ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039bc:	f023 0301 	bic.w	r3, r3, #1
 80039c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	3308      	adds	r3, #8
 80039ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80039ce:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80039d2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039d4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80039d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80039da:	e841 2300 	strex	r3, r2, [r1]
 80039de:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80039e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d1e1      	bne.n	80039aa <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	3308      	adds	r3, #8
 80039ec:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80039f0:	e853 3f00 	ldrex	r3, [r3]
 80039f4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80039f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	3308      	adds	r3, #8
 8003a06:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003a0a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003a0c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a0e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003a10:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003a12:	e841 2300 	strex	r3, r2, [r1]
 8003a16:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003a18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d1e3      	bne.n	80039e6 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2220      	movs	r2, #32
 8003a22:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a34:	e853 3f00 	ldrex	r3, [r3]
 8003a38:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003a3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a3c:	f023 0310 	bic.w	r3, r3, #16
 8003a40:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	461a      	mov	r2, r3
 8003a4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003a4e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003a50:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a52:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003a54:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003a56:	e841 2300 	strex	r3, r2, [r1]
 8003a5a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003a5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d1e4      	bne.n	8003a2c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a66:	4618      	mov	r0, r3
 8003a68:	f7fd fcd9 	bl	800141e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2202      	movs	r2, #2
 8003a70:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	4619      	mov	r1, r3
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f000 f8ce 	bl	8003c28 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003a8c:	e0b9      	b.n	8003c02 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	1ad3      	subs	r3, r2, r3
 8003a9e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	f000 80ab 	beq.w	8003c06 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8003ab0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	f000 80a6 	beq.w	8003c06 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ac2:	e853 3f00 	ldrex	r3, [r3]
 8003ac6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003ac8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003aca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003ace:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003adc:	647b      	str	r3, [r7, #68]	; 0x44
 8003ade:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ae0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003ae2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ae4:	e841 2300 	strex	r3, r2, [r1]
 8003ae8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003aea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d1e4      	bne.n	8003aba <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	3308      	adds	r3, #8
 8003af6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afa:	e853 3f00 	ldrex	r3, [r3]
 8003afe:	623b      	str	r3, [r7, #32]
   return(result);
 8003b00:	6a3b      	ldr	r3, [r7, #32]
 8003b02:	f023 0301 	bic.w	r3, r3, #1
 8003b06:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	3308      	adds	r3, #8
 8003b10:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003b14:	633a      	str	r2, [r7, #48]	; 0x30
 8003b16:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b18:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b1c:	e841 2300 	strex	r3, r2, [r1]
 8003b20:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d1e3      	bne.n	8003af0 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2220      	movs	r2, #32
 8003b2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	e853 3f00 	ldrex	r3, [r3]
 8003b48:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	f023 0310 	bic.w	r3, r3, #16
 8003b50:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	461a      	mov	r2, r3
 8003b5a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003b5e:	61fb      	str	r3, [r7, #28]
 8003b60:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b62:	69b9      	ldr	r1, [r7, #24]
 8003b64:	69fa      	ldr	r2, [r7, #28]
 8003b66:	e841 2300 	strex	r3, r2, [r1]
 8003b6a:	617b      	str	r3, [r7, #20]
   return(result);
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d1e4      	bne.n	8003b3c <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2202      	movs	r2, #2
 8003b76:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003b78:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003b7c:	4619      	mov	r1, r3
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f000 f852 	bl	8003c28 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003b84:	e03f      	b.n	8003c06 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003b86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d00e      	beq.n	8003bb0 <HAL_UART_IRQHandler+0x56c>
 8003b92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d008      	beq.n	8003bb0 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003ba6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f000 f849 	bl	8003c40 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003bae:	e02d      	b.n	8003c0c <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003bb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d00e      	beq.n	8003bda <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003bbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d008      	beq.n	8003bda <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d01c      	beq.n	8003c0a <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	4798      	blx	r3
    }
    return;
 8003bd8:	e017      	b.n	8003c0a <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003bda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d012      	beq.n	8003c0c <HAL_UART_IRQHandler+0x5c8>
 8003be6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d00c      	beq.n	8003c0c <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f000 fe43 	bl	800487e <UART_EndTransmit_IT>
    return;
 8003bf8:	e008      	b.n	8003c0c <HAL_UART_IRQHandler+0x5c8>
      return;
 8003bfa:	bf00      	nop
 8003bfc:	e006      	b.n	8003c0c <HAL_UART_IRQHandler+0x5c8>
    return;
 8003bfe:	bf00      	nop
 8003c00:	e004      	b.n	8003c0c <HAL_UART_IRQHandler+0x5c8>
      return;
 8003c02:	bf00      	nop
 8003c04:	e002      	b.n	8003c0c <HAL_UART_IRQHandler+0x5c8>
      return;
 8003c06:	bf00      	nop
 8003c08:	e000      	b.n	8003c0c <HAL_UART_IRQHandler+0x5c8>
    return;
 8003c0a:	bf00      	nop
  }

}
 8003c0c:	37e8      	adds	r7, #232	; 0xe8
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop

08003c14 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b083      	sub	sp, #12
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003c1c:	bf00      	nop
 8003c1e:	370c      	adds	r7, #12
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr

08003c28 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	460b      	mov	r3, r1
 8003c32:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003c34:	bf00      	nop
 8003c36:	370c      	adds	r7, #12
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr

08003c40 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b083      	sub	sp, #12
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003c48:	bf00      	nop
 8003c4a:	370c      	adds	r7, #12
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr

08003c54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b088      	sub	sp, #32
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	689a      	ldr	r2, [r3, #8]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	691b      	ldr	r3, [r3, #16]
 8003c68:	431a      	orrs	r2, r3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	695b      	ldr	r3, [r3, #20]
 8003c6e:	431a      	orrs	r2, r3
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	69db      	ldr	r3, [r3, #28]
 8003c74:	4313      	orrs	r3, r2
 8003c76:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	4ba6      	ldr	r3, [pc, #664]	; (8003f18 <UART_SetConfig+0x2c4>)
 8003c80:	4013      	ands	r3, r2
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	6812      	ldr	r2, [r2, #0]
 8003c86:	6979      	ldr	r1, [r7, #20]
 8003c88:	430b      	orrs	r3, r1
 8003c8a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	68da      	ldr	r2, [r3, #12]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	430a      	orrs	r2, r1
 8003ca0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	699b      	ldr	r3, [r3, #24]
 8003ca6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6a1b      	ldr	r3, [r3, #32]
 8003cac:	697a      	ldr	r2, [r7, #20]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	697a      	ldr	r2, [r7, #20]
 8003cc2:	430a      	orrs	r2, r1
 8003cc4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a94      	ldr	r2, [pc, #592]	; (8003f1c <UART_SetConfig+0x2c8>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d120      	bne.n	8003d12 <UART_SetConfig+0xbe>
 8003cd0:	4b93      	ldr	r3, [pc, #588]	; (8003f20 <UART_SetConfig+0x2cc>)
 8003cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cd6:	f003 0303 	and.w	r3, r3, #3
 8003cda:	2b03      	cmp	r3, #3
 8003cdc:	d816      	bhi.n	8003d0c <UART_SetConfig+0xb8>
 8003cde:	a201      	add	r2, pc, #4	; (adr r2, 8003ce4 <UART_SetConfig+0x90>)
 8003ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ce4:	08003cf5 	.word	0x08003cf5
 8003ce8:	08003d01 	.word	0x08003d01
 8003cec:	08003cfb 	.word	0x08003cfb
 8003cf0:	08003d07 	.word	0x08003d07
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	77fb      	strb	r3, [r7, #31]
 8003cf8:	e150      	b.n	8003f9c <UART_SetConfig+0x348>
 8003cfa:	2302      	movs	r3, #2
 8003cfc:	77fb      	strb	r3, [r7, #31]
 8003cfe:	e14d      	b.n	8003f9c <UART_SetConfig+0x348>
 8003d00:	2304      	movs	r3, #4
 8003d02:	77fb      	strb	r3, [r7, #31]
 8003d04:	e14a      	b.n	8003f9c <UART_SetConfig+0x348>
 8003d06:	2308      	movs	r3, #8
 8003d08:	77fb      	strb	r3, [r7, #31]
 8003d0a:	e147      	b.n	8003f9c <UART_SetConfig+0x348>
 8003d0c:	2310      	movs	r3, #16
 8003d0e:	77fb      	strb	r3, [r7, #31]
 8003d10:	e144      	b.n	8003f9c <UART_SetConfig+0x348>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a83      	ldr	r2, [pc, #524]	; (8003f24 <UART_SetConfig+0x2d0>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d132      	bne.n	8003d82 <UART_SetConfig+0x12e>
 8003d1c:	4b80      	ldr	r3, [pc, #512]	; (8003f20 <UART_SetConfig+0x2cc>)
 8003d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d22:	f003 030c 	and.w	r3, r3, #12
 8003d26:	2b0c      	cmp	r3, #12
 8003d28:	d828      	bhi.n	8003d7c <UART_SetConfig+0x128>
 8003d2a:	a201      	add	r2, pc, #4	; (adr r2, 8003d30 <UART_SetConfig+0xdc>)
 8003d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d30:	08003d65 	.word	0x08003d65
 8003d34:	08003d7d 	.word	0x08003d7d
 8003d38:	08003d7d 	.word	0x08003d7d
 8003d3c:	08003d7d 	.word	0x08003d7d
 8003d40:	08003d71 	.word	0x08003d71
 8003d44:	08003d7d 	.word	0x08003d7d
 8003d48:	08003d7d 	.word	0x08003d7d
 8003d4c:	08003d7d 	.word	0x08003d7d
 8003d50:	08003d6b 	.word	0x08003d6b
 8003d54:	08003d7d 	.word	0x08003d7d
 8003d58:	08003d7d 	.word	0x08003d7d
 8003d5c:	08003d7d 	.word	0x08003d7d
 8003d60:	08003d77 	.word	0x08003d77
 8003d64:	2300      	movs	r3, #0
 8003d66:	77fb      	strb	r3, [r7, #31]
 8003d68:	e118      	b.n	8003f9c <UART_SetConfig+0x348>
 8003d6a:	2302      	movs	r3, #2
 8003d6c:	77fb      	strb	r3, [r7, #31]
 8003d6e:	e115      	b.n	8003f9c <UART_SetConfig+0x348>
 8003d70:	2304      	movs	r3, #4
 8003d72:	77fb      	strb	r3, [r7, #31]
 8003d74:	e112      	b.n	8003f9c <UART_SetConfig+0x348>
 8003d76:	2308      	movs	r3, #8
 8003d78:	77fb      	strb	r3, [r7, #31]
 8003d7a:	e10f      	b.n	8003f9c <UART_SetConfig+0x348>
 8003d7c:	2310      	movs	r3, #16
 8003d7e:	77fb      	strb	r3, [r7, #31]
 8003d80:	e10c      	b.n	8003f9c <UART_SetConfig+0x348>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a68      	ldr	r2, [pc, #416]	; (8003f28 <UART_SetConfig+0x2d4>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d120      	bne.n	8003dce <UART_SetConfig+0x17a>
 8003d8c:	4b64      	ldr	r3, [pc, #400]	; (8003f20 <UART_SetConfig+0x2cc>)
 8003d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d92:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003d96:	2b30      	cmp	r3, #48	; 0x30
 8003d98:	d013      	beq.n	8003dc2 <UART_SetConfig+0x16e>
 8003d9a:	2b30      	cmp	r3, #48	; 0x30
 8003d9c:	d814      	bhi.n	8003dc8 <UART_SetConfig+0x174>
 8003d9e:	2b20      	cmp	r3, #32
 8003da0:	d009      	beq.n	8003db6 <UART_SetConfig+0x162>
 8003da2:	2b20      	cmp	r3, #32
 8003da4:	d810      	bhi.n	8003dc8 <UART_SetConfig+0x174>
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d002      	beq.n	8003db0 <UART_SetConfig+0x15c>
 8003daa:	2b10      	cmp	r3, #16
 8003dac:	d006      	beq.n	8003dbc <UART_SetConfig+0x168>
 8003dae:	e00b      	b.n	8003dc8 <UART_SetConfig+0x174>
 8003db0:	2300      	movs	r3, #0
 8003db2:	77fb      	strb	r3, [r7, #31]
 8003db4:	e0f2      	b.n	8003f9c <UART_SetConfig+0x348>
 8003db6:	2302      	movs	r3, #2
 8003db8:	77fb      	strb	r3, [r7, #31]
 8003dba:	e0ef      	b.n	8003f9c <UART_SetConfig+0x348>
 8003dbc:	2304      	movs	r3, #4
 8003dbe:	77fb      	strb	r3, [r7, #31]
 8003dc0:	e0ec      	b.n	8003f9c <UART_SetConfig+0x348>
 8003dc2:	2308      	movs	r3, #8
 8003dc4:	77fb      	strb	r3, [r7, #31]
 8003dc6:	e0e9      	b.n	8003f9c <UART_SetConfig+0x348>
 8003dc8:	2310      	movs	r3, #16
 8003dca:	77fb      	strb	r3, [r7, #31]
 8003dcc:	e0e6      	b.n	8003f9c <UART_SetConfig+0x348>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a56      	ldr	r2, [pc, #344]	; (8003f2c <UART_SetConfig+0x2d8>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d120      	bne.n	8003e1a <UART_SetConfig+0x1c6>
 8003dd8:	4b51      	ldr	r3, [pc, #324]	; (8003f20 <UART_SetConfig+0x2cc>)
 8003dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dde:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003de2:	2bc0      	cmp	r3, #192	; 0xc0
 8003de4:	d013      	beq.n	8003e0e <UART_SetConfig+0x1ba>
 8003de6:	2bc0      	cmp	r3, #192	; 0xc0
 8003de8:	d814      	bhi.n	8003e14 <UART_SetConfig+0x1c0>
 8003dea:	2b80      	cmp	r3, #128	; 0x80
 8003dec:	d009      	beq.n	8003e02 <UART_SetConfig+0x1ae>
 8003dee:	2b80      	cmp	r3, #128	; 0x80
 8003df0:	d810      	bhi.n	8003e14 <UART_SetConfig+0x1c0>
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d002      	beq.n	8003dfc <UART_SetConfig+0x1a8>
 8003df6:	2b40      	cmp	r3, #64	; 0x40
 8003df8:	d006      	beq.n	8003e08 <UART_SetConfig+0x1b4>
 8003dfa:	e00b      	b.n	8003e14 <UART_SetConfig+0x1c0>
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	77fb      	strb	r3, [r7, #31]
 8003e00:	e0cc      	b.n	8003f9c <UART_SetConfig+0x348>
 8003e02:	2302      	movs	r3, #2
 8003e04:	77fb      	strb	r3, [r7, #31]
 8003e06:	e0c9      	b.n	8003f9c <UART_SetConfig+0x348>
 8003e08:	2304      	movs	r3, #4
 8003e0a:	77fb      	strb	r3, [r7, #31]
 8003e0c:	e0c6      	b.n	8003f9c <UART_SetConfig+0x348>
 8003e0e:	2308      	movs	r3, #8
 8003e10:	77fb      	strb	r3, [r7, #31]
 8003e12:	e0c3      	b.n	8003f9c <UART_SetConfig+0x348>
 8003e14:	2310      	movs	r3, #16
 8003e16:	77fb      	strb	r3, [r7, #31]
 8003e18:	e0c0      	b.n	8003f9c <UART_SetConfig+0x348>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a44      	ldr	r2, [pc, #272]	; (8003f30 <UART_SetConfig+0x2dc>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d125      	bne.n	8003e70 <UART_SetConfig+0x21c>
 8003e24:	4b3e      	ldr	r3, [pc, #248]	; (8003f20 <UART_SetConfig+0x2cc>)
 8003e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e32:	d017      	beq.n	8003e64 <UART_SetConfig+0x210>
 8003e34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e38:	d817      	bhi.n	8003e6a <UART_SetConfig+0x216>
 8003e3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e3e:	d00b      	beq.n	8003e58 <UART_SetConfig+0x204>
 8003e40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e44:	d811      	bhi.n	8003e6a <UART_SetConfig+0x216>
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d003      	beq.n	8003e52 <UART_SetConfig+0x1fe>
 8003e4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e4e:	d006      	beq.n	8003e5e <UART_SetConfig+0x20a>
 8003e50:	e00b      	b.n	8003e6a <UART_SetConfig+0x216>
 8003e52:	2300      	movs	r3, #0
 8003e54:	77fb      	strb	r3, [r7, #31]
 8003e56:	e0a1      	b.n	8003f9c <UART_SetConfig+0x348>
 8003e58:	2302      	movs	r3, #2
 8003e5a:	77fb      	strb	r3, [r7, #31]
 8003e5c:	e09e      	b.n	8003f9c <UART_SetConfig+0x348>
 8003e5e:	2304      	movs	r3, #4
 8003e60:	77fb      	strb	r3, [r7, #31]
 8003e62:	e09b      	b.n	8003f9c <UART_SetConfig+0x348>
 8003e64:	2308      	movs	r3, #8
 8003e66:	77fb      	strb	r3, [r7, #31]
 8003e68:	e098      	b.n	8003f9c <UART_SetConfig+0x348>
 8003e6a:	2310      	movs	r3, #16
 8003e6c:	77fb      	strb	r3, [r7, #31]
 8003e6e:	e095      	b.n	8003f9c <UART_SetConfig+0x348>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a2f      	ldr	r2, [pc, #188]	; (8003f34 <UART_SetConfig+0x2e0>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d125      	bne.n	8003ec6 <UART_SetConfig+0x272>
 8003e7a:	4b29      	ldr	r3, [pc, #164]	; (8003f20 <UART_SetConfig+0x2cc>)
 8003e7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e80:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003e84:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e88:	d017      	beq.n	8003eba <UART_SetConfig+0x266>
 8003e8a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e8e:	d817      	bhi.n	8003ec0 <UART_SetConfig+0x26c>
 8003e90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e94:	d00b      	beq.n	8003eae <UART_SetConfig+0x25a>
 8003e96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e9a:	d811      	bhi.n	8003ec0 <UART_SetConfig+0x26c>
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d003      	beq.n	8003ea8 <UART_SetConfig+0x254>
 8003ea0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ea4:	d006      	beq.n	8003eb4 <UART_SetConfig+0x260>
 8003ea6:	e00b      	b.n	8003ec0 <UART_SetConfig+0x26c>
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	77fb      	strb	r3, [r7, #31]
 8003eac:	e076      	b.n	8003f9c <UART_SetConfig+0x348>
 8003eae:	2302      	movs	r3, #2
 8003eb0:	77fb      	strb	r3, [r7, #31]
 8003eb2:	e073      	b.n	8003f9c <UART_SetConfig+0x348>
 8003eb4:	2304      	movs	r3, #4
 8003eb6:	77fb      	strb	r3, [r7, #31]
 8003eb8:	e070      	b.n	8003f9c <UART_SetConfig+0x348>
 8003eba:	2308      	movs	r3, #8
 8003ebc:	77fb      	strb	r3, [r7, #31]
 8003ebe:	e06d      	b.n	8003f9c <UART_SetConfig+0x348>
 8003ec0:	2310      	movs	r3, #16
 8003ec2:	77fb      	strb	r3, [r7, #31]
 8003ec4:	e06a      	b.n	8003f9c <UART_SetConfig+0x348>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a1b      	ldr	r2, [pc, #108]	; (8003f38 <UART_SetConfig+0x2e4>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d138      	bne.n	8003f42 <UART_SetConfig+0x2ee>
 8003ed0:	4b13      	ldr	r3, [pc, #76]	; (8003f20 <UART_SetConfig+0x2cc>)
 8003ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ed6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003eda:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003ede:	d017      	beq.n	8003f10 <UART_SetConfig+0x2bc>
 8003ee0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003ee4:	d82a      	bhi.n	8003f3c <UART_SetConfig+0x2e8>
 8003ee6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003eea:	d00b      	beq.n	8003f04 <UART_SetConfig+0x2b0>
 8003eec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ef0:	d824      	bhi.n	8003f3c <UART_SetConfig+0x2e8>
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d003      	beq.n	8003efe <UART_SetConfig+0x2aa>
 8003ef6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003efa:	d006      	beq.n	8003f0a <UART_SetConfig+0x2b6>
 8003efc:	e01e      	b.n	8003f3c <UART_SetConfig+0x2e8>
 8003efe:	2300      	movs	r3, #0
 8003f00:	77fb      	strb	r3, [r7, #31]
 8003f02:	e04b      	b.n	8003f9c <UART_SetConfig+0x348>
 8003f04:	2302      	movs	r3, #2
 8003f06:	77fb      	strb	r3, [r7, #31]
 8003f08:	e048      	b.n	8003f9c <UART_SetConfig+0x348>
 8003f0a:	2304      	movs	r3, #4
 8003f0c:	77fb      	strb	r3, [r7, #31]
 8003f0e:	e045      	b.n	8003f9c <UART_SetConfig+0x348>
 8003f10:	2308      	movs	r3, #8
 8003f12:	77fb      	strb	r3, [r7, #31]
 8003f14:	e042      	b.n	8003f9c <UART_SetConfig+0x348>
 8003f16:	bf00      	nop
 8003f18:	efff69f3 	.word	0xefff69f3
 8003f1c:	40011000 	.word	0x40011000
 8003f20:	40023800 	.word	0x40023800
 8003f24:	40004400 	.word	0x40004400
 8003f28:	40004800 	.word	0x40004800
 8003f2c:	40004c00 	.word	0x40004c00
 8003f30:	40005000 	.word	0x40005000
 8003f34:	40011400 	.word	0x40011400
 8003f38:	40007800 	.word	0x40007800
 8003f3c:	2310      	movs	r3, #16
 8003f3e:	77fb      	strb	r3, [r7, #31]
 8003f40:	e02c      	b.n	8003f9c <UART_SetConfig+0x348>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a72      	ldr	r2, [pc, #456]	; (8004110 <UART_SetConfig+0x4bc>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d125      	bne.n	8003f98 <UART_SetConfig+0x344>
 8003f4c:	4b71      	ldr	r3, [pc, #452]	; (8004114 <UART_SetConfig+0x4c0>)
 8003f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f52:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003f56:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003f5a:	d017      	beq.n	8003f8c <UART_SetConfig+0x338>
 8003f5c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003f60:	d817      	bhi.n	8003f92 <UART_SetConfig+0x33e>
 8003f62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f66:	d00b      	beq.n	8003f80 <UART_SetConfig+0x32c>
 8003f68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f6c:	d811      	bhi.n	8003f92 <UART_SetConfig+0x33e>
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d003      	beq.n	8003f7a <UART_SetConfig+0x326>
 8003f72:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f76:	d006      	beq.n	8003f86 <UART_SetConfig+0x332>
 8003f78:	e00b      	b.n	8003f92 <UART_SetConfig+0x33e>
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	77fb      	strb	r3, [r7, #31]
 8003f7e:	e00d      	b.n	8003f9c <UART_SetConfig+0x348>
 8003f80:	2302      	movs	r3, #2
 8003f82:	77fb      	strb	r3, [r7, #31]
 8003f84:	e00a      	b.n	8003f9c <UART_SetConfig+0x348>
 8003f86:	2304      	movs	r3, #4
 8003f88:	77fb      	strb	r3, [r7, #31]
 8003f8a:	e007      	b.n	8003f9c <UART_SetConfig+0x348>
 8003f8c:	2308      	movs	r3, #8
 8003f8e:	77fb      	strb	r3, [r7, #31]
 8003f90:	e004      	b.n	8003f9c <UART_SetConfig+0x348>
 8003f92:	2310      	movs	r3, #16
 8003f94:	77fb      	strb	r3, [r7, #31]
 8003f96:	e001      	b.n	8003f9c <UART_SetConfig+0x348>
 8003f98:	2310      	movs	r3, #16
 8003f9a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	69db      	ldr	r3, [r3, #28]
 8003fa0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fa4:	d15b      	bne.n	800405e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003fa6:	7ffb      	ldrb	r3, [r7, #31]
 8003fa8:	2b08      	cmp	r3, #8
 8003faa:	d828      	bhi.n	8003ffe <UART_SetConfig+0x3aa>
 8003fac:	a201      	add	r2, pc, #4	; (adr r2, 8003fb4 <UART_SetConfig+0x360>)
 8003fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fb2:	bf00      	nop
 8003fb4:	08003fd9 	.word	0x08003fd9
 8003fb8:	08003fe1 	.word	0x08003fe1
 8003fbc:	08003fe9 	.word	0x08003fe9
 8003fc0:	08003fff 	.word	0x08003fff
 8003fc4:	08003fef 	.word	0x08003fef
 8003fc8:	08003fff 	.word	0x08003fff
 8003fcc:	08003fff 	.word	0x08003fff
 8003fd0:	08003fff 	.word	0x08003fff
 8003fd4:	08003ff7 	.word	0x08003ff7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fd8:	f7fe fdf4 	bl	8002bc4 <HAL_RCC_GetPCLK1Freq>
 8003fdc:	61b8      	str	r0, [r7, #24]
        break;
 8003fde:	e013      	b.n	8004008 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fe0:	f7fe fe04 	bl	8002bec <HAL_RCC_GetPCLK2Freq>
 8003fe4:	61b8      	str	r0, [r7, #24]
        break;
 8003fe6:	e00f      	b.n	8004008 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fe8:	4b4b      	ldr	r3, [pc, #300]	; (8004118 <UART_SetConfig+0x4c4>)
 8003fea:	61bb      	str	r3, [r7, #24]
        break;
 8003fec:	e00c      	b.n	8004008 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fee:	f7fe fcd7 	bl	80029a0 <HAL_RCC_GetSysClockFreq>
 8003ff2:	61b8      	str	r0, [r7, #24]
        break;
 8003ff4:	e008      	b.n	8004008 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ff6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ffa:	61bb      	str	r3, [r7, #24]
        break;
 8003ffc:	e004      	b.n	8004008 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003ffe:	2300      	movs	r3, #0
 8004000:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	77bb      	strb	r3, [r7, #30]
        break;
 8004006:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004008:	69bb      	ldr	r3, [r7, #24]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d074      	beq.n	80040f8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800400e:	69bb      	ldr	r3, [r7, #24]
 8004010:	005a      	lsls	r2, r3, #1
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	085b      	lsrs	r3, r3, #1
 8004018:	441a      	add	r2, r3
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004022:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	2b0f      	cmp	r3, #15
 8004028:	d916      	bls.n	8004058 <UART_SetConfig+0x404>
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004030:	d212      	bcs.n	8004058 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	b29b      	uxth	r3, r3
 8004036:	f023 030f 	bic.w	r3, r3, #15
 800403a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	085b      	lsrs	r3, r3, #1
 8004040:	b29b      	uxth	r3, r3
 8004042:	f003 0307 	and.w	r3, r3, #7
 8004046:	b29a      	uxth	r2, r3
 8004048:	89fb      	ldrh	r3, [r7, #14]
 800404a:	4313      	orrs	r3, r2
 800404c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	89fa      	ldrh	r2, [r7, #14]
 8004054:	60da      	str	r2, [r3, #12]
 8004056:	e04f      	b.n	80040f8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	77bb      	strb	r3, [r7, #30]
 800405c:	e04c      	b.n	80040f8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800405e:	7ffb      	ldrb	r3, [r7, #31]
 8004060:	2b08      	cmp	r3, #8
 8004062:	d828      	bhi.n	80040b6 <UART_SetConfig+0x462>
 8004064:	a201      	add	r2, pc, #4	; (adr r2, 800406c <UART_SetConfig+0x418>)
 8004066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800406a:	bf00      	nop
 800406c:	08004091 	.word	0x08004091
 8004070:	08004099 	.word	0x08004099
 8004074:	080040a1 	.word	0x080040a1
 8004078:	080040b7 	.word	0x080040b7
 800407c:	080040a7 	.word	0x080040a7
 8004080:	080040b7 	.word	0x080040b7
 8004084:	080040b7 	.word	0x080040b7
 8004088:	080040b7 	.word	0x080040b7
 800408c:	080040af 	.word	0x080040af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004090:	f7fe fd98 	bl	8002bc4 <HAL_RCC_GetPCLK1Freq>
 8004094:	61b8      	str	r0, [r7, #24]
        break;
 8004096:	e013      	b.n	80040c0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004098:	f7fe fda8 	bl	8002bec <HAL_RCC_GetPCLK2Freq>
 800409c:	61b8      	str	r0, [r7, #24]
        break;
 800409e:	e00f      	b.n	80040c0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040a0:	4b1d      	ldr	r3, [pc, #116]	; (8004118 <UART_SetConfig+0x4c4>)
 80040a2:	61bb      	str	r3, [r7, #24]
        break;
 80040a4:	e00c      	b.n	80040c0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040a6:	f7fe fc7b 	bl	80029a0 <HAL_RCC_GetSysClockFreq>
 80040aa:	61b8      	str	r0, [r7, #24]
        break;
 80040ac:	e008      	b.n	80040c0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040b2:	61bb      	str	r3, [r7, #24]
        break;
 80040b4:	e004      	b.n	80040c0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80040b6:	2300      	movs	r3, #0
 80040b8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	77bb      	strb	r3, [r7, #30]
        break;
 80040be:	bf00      	nop
    }

    if (pclk != 0U)
 80040c0:	69bb      	ldr	r3, [r7, #24]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d018      	beq.n	80040f8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	085a      	lsrs	r2, r3, #1
 80040cc:	69bb      	ldr	r3, [r7, #24]
 80040ce:	441a      	add	r2, r3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80040d8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	2b0f      	cmp	r3, #15
 80040de:	d909      	bls.n	80040f4 <UART_SetConfig+0x4a0>
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040e6:	d205      	bcs.n	80040f4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	b29a      	uxth	r2, r3
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	60da      	str	r2, [r3, #12]
 80040f2:	e001      	b.n	80040f8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2200      	movs	r2, #0
 80040fc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2200      	movs	r2, #0
 8004102:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004104:	7fbb      	ldrb	r3, [r7, #30]
}
 8004106:	4618      	mov	r0, r3
 8004108:	3720      	adds	r7, #32
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
 800410e:	bf00      	nop
 8004110:	40007c00 	.word	0x40007c00
 8004114:	40023800 	.word	0x40023800
 8004118:	00f42400 	.word	0x00f42400

0800411c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800411c:	b480      	push	{r7}
 800411e:	b083      	sub	sp, #12
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004128:	f003 0301 	and.w	r3, r3, #1
 800412c:	2b00      	cmp	r3, #0
 800412e:	d00a      	beq.n	8004146 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	430a      	orrs	r2, r1
 8004144:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414a:	f003 0302 	and.w	r3, r3, #2
 800414e:	2b00      	cmp	r3, #0
 8004150:	d00a      	beq.n	8004168 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	430a      	orrs	r2, r1
 8004166:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416c:	f003 0304 	and.w	r3, r3, #4
 8004170:	2b00      	cmp	r3, #0
 8004172:	d00a      	beq.n	800418a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	430a      	orrs	r2, r1
 8004188:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418e:	f003 0308 	and.w	r3, r3, #8
 8004192:	2b00      	cmp	r3, #0
 8004194:	d00a      	beq.n	80041ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	430a      	orrs	r2, r1
 80041aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b0:	f003 0310 	and.w	r3, r3, #16
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d00a      	beq.n	80041ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	430a      	orrs	r2, r1
 80041cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d2:	f003 0320 	and.w	r3, r3, #32
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d00a      	beq.n	80041f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	430a      	orrs	r2, r1
 80041ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d01a      	beq.n	8004232 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	430a      	orrs	r2, r1
 8004210:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004216:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800421a:	d10a      	bne.n	8004232 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	430a      	orrs	r2, r1
 8004230:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004236:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800423a:	2b00      	cmp	r3, #0
 800423c:	d00a      	beq.n	8004254 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	430a      	orrs	r2, r1
 8004252:	605a      	str	r2, [r3, #4]
  }
}
 8004254:	bf00      	nop
 8004256:	370c      	adds	r7, #12
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr

08004260 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b086      	sub	sp, #24
 8004264:	af02      	add	r7, sp, #8
 8004266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004270:	f7fc ff94 	bl	800119c <HAL_GetTick>
 8004274:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 0308 	and.w	r3, r3, #8
 8004280:	2b08      	cmp	r3, #8
 8004282:	d10e      	bne.n	80042a2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004284:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004288:	9300      	str	r3, [sp, #0]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2200      	movs	r2, #0
 800428e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f000 f831 	bl	80042fa <UART_WaitOnFlagUntilTimeout>
 8004298:	4603      	mov	r3, r0
 800429a:	2b00      	cmp	r3, #0
 800429c:	d001      	beq.n	80042a2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	e027      	b.n	80042f2 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 0304 	and.w	r3, r3, #4
 80042ac:	2b04      	cmp	r3, #4
 80042ae:	d10e      	bne.n	80042ce <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80042b4:	9300      	str	r3, [sp, #0]
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2200      	movs	r2, #0
 80042ba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f000 f81b 	bl	80042fa <UART_WaitOnFlagUntilTimeout>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d001      	beq.n	80042ce <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042ca:	2303      	movs	r3, #3
 80042cc:	e011      	b.n	80042f2 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2220      	movs	r2, #32
 80042d2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2220      	movs	r2, #32
 80042d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2200      	movs	r2, #0
 80042e0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2200      	movs	r2, #0
 80042ec:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80042f0:	2300      	movs	r3, #0
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3710      	adds	r7, #16
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}

080042fa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80042fa:	b580      	push	{r7, lr}
 80042fc:	b09c      	sub	sp, #112	; 0x70
 80042fe:	af00      	add	r7, sp, #0
 8004300:	60f8      	str	r0, [r7, #12]
 8004302:	60b9      	str	r1, [r7, #8]
 8004304:	603b      	str	r3, [r7, #0]
 8004306:	4613      	mov	r3, r2
 8004308:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800430a:	e0a7      	b.n	800445c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800430c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800430e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004312:	f000 80a3 	beq.w	800445c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004316:	f7fc ff41 	bl	800119c <HAL_GetTick>
 800431a:	4602      	mov	r2, r0
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	1ad3      	subs	r3, r2, r3
 8004320:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004322:	429a      	cmp	r2, r3
 8004324:	d302      	bcc.n	800432c <UART_WaitOnFlagUntilTimeout+0x32>
 8004326:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004328:	2b00      	cmp	r3, #0
 800432a:	d13f      	bne.n	80043ac <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004332:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004334:	e853 3f00 	ldrex	r3, [r3]
 8004338:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800433a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800433c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004340:	667b      	str	r3, [r7, #100]	; 0x64
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	461a      	mov	r2, r3
 8004348:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800434a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800434c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800434e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004350:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004352:	e841 2300 	strex	r3, r2, [r1]
 8004356:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004358:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800435a:	2b00      	cmp	r3, #0
 800435c:	d1e6      	bne.n	800432c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	3308      	adds	r3, #8
 8004364:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004366:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004368:	e853 3f00 	ldrex	r3, [r3]
 800436c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800436e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004370:	f023 0301 	bic.w	r3, r3, #1
 8004374:	663b      	str	r3, [r7, #96]	; 0x60
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	3308      	adds	r3, #8
 800437c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800437e:	64ba      	str	r2, [r7, #72]	; 0x48
 8004380:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004382:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004384:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004386:	e841 2300 	strex	r3, r2, [r1]
 800438a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800438c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800438e:	2b00      	cmp	r3, #0
 8004390:	d1e5      	bne.n	800435e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2220      	movs	r2, #32
 8004396:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2220      	movs	r2, #32
 800439c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2200      	movs	r2, #0
 80043a4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80043a8:	2303      	movs	r3, #3
 80043aa:	e068      	b.n	800447e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 0304 	and.w	r3, r3, #4
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d050      	beq.n	800445c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	69db      	ldr	r3, [r3, #28]
 80043c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043c8:	d148      	bne.n	800445c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80043d2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043dc:	e853 3f00 	ldrex	r3, [r3]
 80043e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80043e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80043e8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	461a      	mov	r2, r3
 80043f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043f2:	637b      	str	r3, [r7, #52]	; 0x34
 80043f4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043f6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80043f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80043fa:	e841 2300 	strex	r3, r2, [r1]
 80043fe:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004402:	2b00      	cmp	r3, #0
 8004404:	d1e6      	bne.n	80043d4 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	3308      	adds	r3, #8
 800440c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	e853 3f00 	ldrex	r3, [r3]
 8004414:	613b      	str	r3, [r7, #16]
   return(result);
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	f023 0301 	bic.w	r3, r3, #1
 800441c:	66bb      	str	r3, [r7, #104]	; 0x68
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	3308      	adds	r3, #8
 8004424:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004426:	623a      	str	r2, [r7, #32]
 8004428:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800442a:	69f9      	ldr	r1, [r7, #28]
 800442c:	6a3a      	ldr	r2, [r7, #32]
 800442e:	e841 2300 	strex	r3, r2, [r1]
 8004432:	61bb      	str	r3, [r7, #24]
   return(result);
 8004434:	69bb      	ldr	r3, [r7, #24]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d1e5      	bne.n	8004406 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2220      	movs	r2, #32
 800443e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2220      	movs	r2, #32
 8004444:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2220      	movs	r2, #32
 800444c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2200      	movs	r2, #0
 8004454:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004458:	2303      	movs	r3, #3
 800445a:	e010      	b.n	800447e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	69da      	ldr	r2, [r3, #28]
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	4013      	ands	r3, r2
 8004466:	68ba      	ldr	r2, [r7, #8]
 8004468:	429a      	cmp	r2, r3
 800446a:	bf0c      	ite	eq
 800446c:	2301      	moveq	r3, #1
 800446e:	2300      	movne	r3, #0
 8004470:	b2db      	uxtb	r3, r3
 8004472:	461a      	mov	r2, r3
 8004474:	79fb      	ldrb	r3, [r7, #7]
 8004476:	429a      	cmp	r2, r3
 8004478:	f43f af48 	beq.w	800430c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800447c:	2300      	movs	r3, #0
}
 800447e:	4618      	mov	r0, r3
 8004480:	3770      	adds	r7, #112	; 0x70
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}
	...

08004488 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004488:	b480      	push	{r7}
 800448a:	b097      	sub	sp, #92	; 0x5c
 800448c:	af00      	add	r7, sp, #0
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	60b9      	str	r1, [r7, #8]
 8004492:	4613      	mov	r3, r2
 8004494:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	68ba      	ldr	r2, [r7, #8]
 800449a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	88fa      	ldrh	r2, [r7, #6]
 80044a0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	88fa      	ldrh	r2, [r7, #6]
 80044a8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2200      	movs	r2, #0
 80044b0:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044ba:	d10e      	bne.n	80044da <UART_Start_Receive_IT+0x52>
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	691b      	ldr	r3, [r3, #16]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d105      	bne.n	80044d0 <UART_Start_Receive_IT+0x48>
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80044ca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80044ce:	e02d      	b.n	800452c <UART_Start_Receive_IT+0xa4>
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	22ff      	movs	r2, #255	; 0xff
 80044d4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80044d8:	e028      	b.n	800452c <UART_Start_Receive_IT+0xa4>
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d10d      	bne.n	80044fe <UART_Start_Receive_IT+0x76>
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	691b      	ldr	r3, [r3, #16]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d104      	bne.n	80044f4 <UART_Start_Receive_IT+0x6c>
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	22ff      	movs	r2, #255	; 0xff
 80044ee:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80044f2:	e01b      	b.n	800452c <UART_Start_Receive_IT+0xa4>
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	227f      	movs	r2, #127	; 0x7f
 80044f8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80044fc:	e016      	b.n	800452c <UART_Start_Receive_IT+0xa4>
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004506:	d10d      	bne.n	8004524 <UART_Start_Receive_IT+0x9c>
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	691b      	ldr	r3, [r3, #16]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d104      	bne.n	800451a <UART_Start_Receive_IT+0x92>
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	227f      	movs	r2, #127	; 0x7f
 8004514:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004518:	e008      	b.n	800452c <UART_Start_Receive_IT+0xa4>
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	223f      	movs	r2, #63	; 0x3f
 800451e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004522:	e003      	b.n	800452c <UART_Start_Receive_IT+0xa4>
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2200      	movs	r2, #0
 8004528:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2200      	movs	r2, #0
 8004530:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2222      	movs	r2, #34	; 0x22
 8004538:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	3308      	adds	r3, #8
 8004542:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004544:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004546:	e853 3f00 	ldrex	r3, [r3]
 800454a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800454c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800454e:	f043 0301 	orr.w	r3, r3, #1
 8004552:	657b      	str	r3, [r7, #84]	; 0x54
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	3308      	adds	r3, #8
 800455a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800455c:	64ba      	str	r2, [r7, #72]	; 0x48
 800455e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004560:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004562:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004564:	e841 2300 	strex	r3, r2, [r1]
 8004568:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800456a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800456c:	2b00      	cmp	r3, #0
 800456e:	d1e5      	bne.n	800453c <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004578:	d107      	bne.n	800458a <UART_Start_Receive_IT+0x102>
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	691b      	ldr	r3, [r3, #16]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d103      	bne.n	800458a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	4a21      	ldr	r2, [pc, #132]	; (800460c <UART_Start_Receive_IT+0x184>)
 8004586:	669a      	str	r2, [r3, #104]	; 0x68
 8004588:	e002      	b.n	8004590 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	4a20      	ldr	r2, [pc, #128]	; (8004610 <UART_Start_Receive_IT+0x188>)
 800458e:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	691b      	ldr	r3, [r3, #16]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d019      	beq.n	80045cc <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800459e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a0:	e853 3f00 	ldrex	r3, [r3]
 80045a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80045a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a8:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80045ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	461a      	mov	r2, r3
 80045b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045b6:	637b      	str	r3, [r7, #52]	; 0x34
 80045b8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80045bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80045be:	e841 2300 	strex	r3, r2, [r1]
 80045c2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80045c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d1e6      	bne.n	8004598 <UART_Start_Receive_IT+0x110>
 80045ca:	e018      	b.n	80045fe <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	e853 3f00 	ldrex	r3, [r3]
 80045d8:	613b      	str	r3, [r7, #16]
   return(result);
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	f043 0320 	orr.w	r3, r3, #32
 80045e0:	653b      	str	r3, [r7, #80]	; 0x50
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	461a      	mov	r2, r3
 80045e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045ea:	623b      	str	r3, [r7, #32]
 80045ec:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ee:	69f9      	ldr	r1, [r7, #28]
 80045f0:	6a3a      	ldr	r2, [r7, #32]
 80045f2:	e841 2300 	strex	r3, r2, [r1]
 80045f6:	61bb      	str	r3, [r7, #24]
   return(result);
 80045f8:	69bb      	ldr	r3, [r7, #24]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d1e6      	bne.n	80045cc <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 80045fe:	2300      	movs	r3, #0
}
 8004600:	4618      	mov	r0, r3
 8004602:	375c      	adds	r7, #92	; 0x5c
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr
 800460c:	08004a39 	.word	0x08004a39
 8004610:	080048d3 	.word	0x080048d3

08004614 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004614:	b480      	push	{r7}
 8004616:	b095      	sub	sp, #84	; 0x54
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004624:	e853 3f00 	ldrex	r3, [r3]
 8004628:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800462a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800462c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004630:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	461a      	mov	r2, r3
 8004638:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800463a:	643b      	str	r3, [r7, #64]	; 0x40
 800463c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800463e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004640:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004642:	e841 2300 	strex	r3, r2, [r1]
 8004646:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800464a:	2b00      	cmp	r3, #0
 800464c:	d1e6      	bne.n	800461c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	3308      	adds	r3, #8
 8004654:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004656:	6a3b      	ldr	r3, [r7, #32]
 8004658:	e853 3f00 	ldrex	r3, [r3]
 800465c:	61fb      	str	r3, [r7, #28]
   return(result);
 800465e:	69fb      	ldr	r3, [r7, #28]
 8004660:	f023 0301 	bic.w	r3, r3, #1
 8004664:	64bb      	str	r3, [r7, #72]	; 0x48
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	3308      	adds	r3, #8
 800466c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800466e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004670:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004672:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004674:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004676:	e841 2300 	strex	r3, r2, [r1]
 800467a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800467c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467e:	2b00      	cmp	r3, #0
 8004680:	d1e5      	bne.n	800464e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004686:	2b01      	cmp	r3, #1
 8004688:	d118      	bne.n	80046bc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	e853 3f00 	ldrex	r3, [r3]
 8004696:	60bb      	str	r3, [r7, #8]
   return(result);
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	f023 0310 	bic.w	r3, r3, #16
 800469e:	647b      	str	r3, [r7, #68]	; 0x44
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	461a      	mov	r2, r3
 80046a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046a8:	61bb      	str	r3, [r7, #24]
 80046aa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ac:	6979      	ldr	r1, [r7, #20]
 80046ae:	69ba      	ldr	r2, [r7, #24]
 80046b0:	e841 2300 	strex	r3, r2, [r1]
 80046b4:	613b      	str	r3, [r7, #16]
   return(result);
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d1e6      	bne.n	800468a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2220      	movs	r2, #32
 80046c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2200      	movs	r2, #0
 80046c8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2200      	movs	r2, #0
 80046ce:	669a      	str	r2, [r3, #104]	; 0x68
}
 80046d0:	bf00      	nop
 80046d2:	3754      	adds	r7, #84	; 0x54
 80046d4:	46bd      	mov	sp, r7
 80046d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046da:	4770      	bx	lr

080046dc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b084      	sub	sp, #16
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046e8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2200      	movs	r2, #0
 80046ee:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2200      	movs	r2, #0
 80046f6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80046fa:	68f8      	ldr	r0, [r7, #12]
 80046fc:	f7ff fa8a 	bl	8003c14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004700:	bf00      	nop
 8004702:	3710      	adds	r7, #16
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}

08004708 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004708:	b480      	push	{r7}
 800470a:	b08f      	sub	sp, #60	; 0x3c
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004714:	2b21      	cmp	r3, #33	; 0x21
 8004716:	d14c      	bne.n	80047b2 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800471e:	b29b      	uxth	r3, r3
 8004720:	2b00      	cmp	r3, #0
 8004722:	d132      	bne.n	800478a <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800472a:	6a3b      	ldr	r3, [r7, #32]
 800472c:	e853 3f00 	ldrex	r3, [r3]
 8004730:	61fb      	str	r3, [r7, #28]
   return(result);
 8004732:	69fb      	ldr	r3, [r7, #28]
 8004734:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004738:	637b      	str	r3, [r7, #52]	; 0x34
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	461a      	mov	r2, r3
 8004740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004742:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004744:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004746:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004748:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800474a:	e841 2300 	strex	r3, r2, [r1]
 800474e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004752:	2b00      	cmp	r3, #0
 8004754:	d1e6      	bne.n	8004724 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	e853 3f00 	ldrex	r3, [r3]
 8004762:	60bb      	str	r3, [r7, #8]
   return(result);
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800476a:	633b      	str	r3, [r7, #48]	; 0x30
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	461a      	mov	r2, r3
 8004772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004774:	61bb      	str	r3, [r7, #24]
 8004776:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004778:	6979      	ldr	r1, [r7, #20]
 800477a:	69ba      	ldr	r2, [r7, #24]
 800477c:	e841 2300 	strex	r3, r2, [r1]
 8004780:	613b      	str	r3, [r7, #16]
   return(result);
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d1e6      	bne.n	8004756 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8004788:	e013      	b.n	80047b2 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800478e:	781a      	ldrb	r2, [r3, #0]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800479a:	1c5a      	adds	r2, r3, #1
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80047a6:	b29b      	uxth	r3, r3
 80047a8:	3b01      	subs	r3, #1
 80047aa:	b29a      	uxth	r2, r3
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80047b2:	bf00      	nop
 80047b4:	373c      	adds	r7, #60	; 0x3c
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr

080047be <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80047be:	b480      	push	{r7}
 80047c0:	b091      	sub	sp, #68	; 0x44
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047ca:	2b21      	cmp	r3, #33	; 0x21
 80047cc:	d151      	bne.n	8004872 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d132      	bne.n	8004840 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e2:	e853 3f00 	ldrex	r3, [r3]
 80047e6:	623b      	str	r3, [r7, #32]
   return(result);
 80047e8:	6a3b      	ldr	r3, [r7, #32]
 80047ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	461a      	mov	r2, r3
 80047f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047f8:	633b      	str	r3, [r7, #48]	; 0x30
 80047fa:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80047fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004800:	e841 2300 	strex	r3, r2, [r1]
 8004804:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004808:	2b00      	cmp	r3, #0
 800480a:	d1e6      	bne.n	80047da <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	e853 3f00 	ldrex	r3, [r3]
 8004818:	60fb      	str	r3, [r7, #12]
   return(result);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004820:	637b      	str	r3, [r7, #52]	; 0x34
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	461a      	mov	r2, r3
 8004828:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800482a:	61fb      	str	r3, [r7, #28]
 800482c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800482e:	69b9      	ldr	r1, [r7, #24]
 8004830:	69fa      	ldr	r2, [r7, #28]
 8004832:	e841 2300 	strex	r3, r2, [r1]
 8004836:	617b      	str	r3, [r7, #20]
   return(result);
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d1e6      	bne.n	800480c <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800483e:	e018      	b.n	8004872 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004844:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004846:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004848:	881b      	ldrh	r3, [r3, #0]
 800484a:	461a      	mov	r2, r3
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004854:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800485a:	1c9a      	adds	r2, r3, #2
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004866:	b29b      	uxth	r3, r3
 8004868:	3b01      	subs	r3, #1
 800486a:	b29a      	uxth	r2, r3
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8004872:	bf00      	nop
 8004874:	3744      	adds	r7, #68	; 0x44
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr

0800487e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800487e:	b580      	push	{r7, lr}
 8004880:	b088      	sub	sp, #32
 8004882:	af00      	add	r7, sp, #0
 8004884:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	e853 3f00 	ldrex	r3, [r3]
 8004892:	60bb      	str	r3, [r7, #8]
   return(result);
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800489a:	61fb      	str	r3, [r7, #28]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	461a      	mov	r2, r3
 80048a2:	69fb      	ldr	r3, [r7, #28]
 80048a4:	61bb      	str	r3, [r7, #24]
 80048a6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048a8:	6979      	ldr	r1, [r7, #20]
 80048aa:	69ba      	ldr	r2, [r7, #24]
 80048ac:	e841 2300 	strex	r3, r2, [r1]
 80048b0:	613b      	str	r3, [r7, #16]
   return(result);
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d1e6      	bne.n	8004886 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2220      	movs	r2, #32
 80048bc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2200      	movs	r2, #0
 80048c2:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f7fc f891 	bl	80009ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80048ca:	bf00      	nop
 80048cc:	3720      	adds	r7, #32
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}

080048d2 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80048d2:	b580      	push	{r7, lr}
 80048d4:	b096      	sub	sp, #88	; 0x58
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80048e0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048ea:	2b22      	cmp	r3, #34	; 0x22
 80048ec:	f040 8098 	bne.w	8004a20 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80048fa:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80048fe:	b2d9      	uxtb	r1, r3
 8004900:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004904:	b2da      	uxtb	r2, r3
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800490a:	400a      	ands	r2, r1
 800490c:	b2d2      	uxtb	r2, r2
 800490e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004914:	1c5a      	adds	r2, r3, #1
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004920:	b29b      	uxth	r3, r3
 8004922:	3b01      	subs	r3, #1
 8004924:	b29a      	uxth	r2, r3
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004932:	b29b      	uxth	r3, r3
 8004934:	2b00      	cmp	r3, #0
 8004936:	d17b      	bne.n	8004a30 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800493e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004940:	e853 3f00 	ldrex	r3, [r3]
 8004944:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004948:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800494c:	653b      	str	r3, [r7, #80]	; 0x50
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	461a      	mov	r2, r3
 8004954:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004956:	647b      	str	r3, [r7, #68]	; 0x44
 8004958:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800495a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800495c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800495e:	e841 2300 	strex	r3, r2, [r1]
 8004962:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004964:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004966:	2b00      	cmp	r3, #0
 8004968:	d1e6      	bne.n	8004938 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	3308      	adds	r3, #8
 8004970:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004974:	e853 3f00 	ldrex	r3, [r3]
 8004978:	623b      	str	r3, [r7, #32]
   return(result);
 800497a:	6a3b      	ldr	r3, [r7, #32]
 800497c:	f023 0301 	bic.w	r3, r3, #1
 8004980:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	3308      	adds	r3, #8
 8004988:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800498a:	633a      	str	r2, [r7, #48]	; 0x30
 800498c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800498e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004990:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004992:	e841 2300 	strex	r3, r2, [r1]
 8004996:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800499a:	2b00      	cmp	r3, #0
 800499c:	d1e5      	bne.n	800496a <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2220      	movs	r2, #32
 80049a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2200      	movs	r2, #0
 80049aa:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2200      	movs	r2, #0
 80049b0:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d12e      	bne.n	8004a18 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2200      	movs	r2, #0
 80049be:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	e853 3f00 	ldrex	r3, [r3]
 80049cc:	60fb      	str	r3, [r7, #12]
   return(result);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	f023 0310 	bic.w	r3, r3, #16
 80049d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	461a      	mov	r2, r3
 80049dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049de:	61fb      	str	r3, [r7, #28]
 80049e0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049e2:	69b9      	ldr	r1, [r7, #24]
 80049e4:	69fa      	ldr	r2, [r7, #28]
 80049e6:	e841 2300 	strex	r3, r2, [r1]
 80049ea:	617b      	str	r3, [r7, #20]
   return(result);
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d1e6      	bne.n	80049c0 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	69db      	ldr	r3, [r3, #28]
 80049f8:	f003 0310 	and.w	r3, r3, #16
 80049fc:	2b10      	cmp	r3, #16
 80049fe:	d103      	bne.n	8004a08 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	2210      	movs	r2, #16
 8004a06:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004a0e:	4619      	mov	r1, r3
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	f7ff f909 	bl	8003c28 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004a16:	e00b      	b.n	8004a30 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f7fb fffd 	bl	8000a18 <HAL_UART_RxCpltCallback>
}
 8004a1e:	e007      	b.n	8004a30 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	699a      	ldr	r2, [r3, #24]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f042 0208 	orr.w	r2, r2, #8
 8004a2e:	619a      	str	r2, [r3, #24]
}
 8004a30:	bf00      	nop
 8004a32:	3758      	adds	r7, #88	; 0x58
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}

08004a38 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b096      	sub	sp, #88	; 0x58
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004a46:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a50:	2b22      	cmp	r3, #34	; 0x22
 8004a52:	f040 8098 	bne.w	8004b86 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a64:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8004a66:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8004a6a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004a6e:	4013      	ands	r3, r2
 8004a70:	b29a      	uxth	r2, r3
 8004a72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a74:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a7a:	1c9a      	adds	r2, r3, #2
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004a86:	b29b      	uxth	r3, r3
 8004a88:	3b01      	subs	r3, #1
 8004a8a:	b29a      	uxth	r2, r3
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d17b      	bne.n	8004b96 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004aa6:	e853 3f00 	ldrex	r3, [r3]
 8004aaa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ab2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	461a      	mov	r2, r3
 8004aba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004abc:	643b      	str	r3, [r7, #64]	; 0x40
 8004abe:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ac0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004ac2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004ac4:	e841 2300 	strex	r3, r2, [r1]
 8004ac8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d1e6      	bne.n	8004a9e <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	3308      	adds	r3, #8
 8004ad6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ad8:	6a3b      	ldr	r3, [r7, #32]
 8004ada:	e853 3f00 	ldrex	r3, [r3]
 8004ade:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ae0:	69fb      	ldr	r3, [r7, #28]
 8004ae2:	f023 0301 	bic.w	r3, r3, #1
 8004ae6:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	3308      	adds	r3, #8
 8004aee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004af0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004af2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004af4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004af6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004af8:	e841 2300 	strex	r3, r2, [r1]
 8004afc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d1e5      	bne.n	8004ad0 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2220      	movs	r2, #32
 8004b08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2200      	movs	r2, #0
 8004b16:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d12e      	bne.n	8004b7e <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2200      	movs	r2, #0
 8004b24:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	e853 3f00 	ldrex	r3, [r3]
 8004b32:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	f023 0310 	bic.w	r3, r3, #16
 8004b3a:	647b      	str	r3, [r7, #68]	; 0x44
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	461a      	mov	r2, r3
 8004b42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b44:	61bb      	str	r3, [r7, #24]
 8004b46:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b48:	6979      	ldr	r1, [r7, #20]
 8004b4a:	69ba      	ldr	r2, [r7, #24]
 8004b4c:	e841 2300 	strex	r3, r2, [r1]
 8004b50:	613b      	str	r3, [r7, #16]
   return(result);
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d1e6      	bne.n	8004b26 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	69db      	ldr	r3, [r3, #28]
 8004b5e:	f003 0310 	and.w	r3, r3, #16
 8004b62:	2b10      	cmp	r3, #16
 8004b64:	d103      	bne.n	8004b6e <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	2210      	movs	r2, #16
 8004b6c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004b74:	4619      	mov	r1, r3
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f7ff f856 	bl	8003c28 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004b7c:	e00b      	b.n	8004b96 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f7fb ff4a 	bl	8000a18 <HAL_UART_RxCpltCallback>
}
 8004b84:	e007      	b.n	8004b96 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	699a      	ldr	r2, [r3, #24]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f042 0208 	orr.w	r2, r2, #8
 8004b94:	619a      	str	r2, [r3, #24]
}
 8004b96:	bf00      	nop
 8004b98:	3758      	adds	r7, #88	; 0x58
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}
	...

08004ba0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004ba0:	b084      	sub	sp, #16
 8004ba2:	b580      	push	{r7, lr}
 8004ba4:	b084      	sub	sp, #16
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	6078      	str	r0, [r7, #4]
 8004baa:	f107 001c 	add.w	r0, r7, #28
 8004bae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	d120      	bne.n	8004bfa <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bbc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	68da      	ldr	r2, [r3, #12]
 8004bc8:	4b20      	ldr	r3, [pc, #128]	; (8004c4c <USB_CoreInit+0xac>)
 8004bca:	4013      	ands	r3, r2
 8004bcc:	687a      	ldr	r2, [r7, #4]
 8004bce:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004bdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	d105      	bne.n	8004bee <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	68db      	ldr	r3, [r3, #12]
 8004be6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f000 fa96 	bl	8005120 <USB_CoreReset>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	73fb      	strb	r3, [r7, #15]
 8004bf8:	e010      	b.n	8004c1c <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	68db      	ldr	r3, [r3, #12]
 8004bfe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f000 fa8a 	bl	8005120 <USB_CoreReset>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c14:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d10b      	bne.n	8004c3a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	f043 0206 	orr.w	r2, r3, #6
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	f043 0220 	orr.w	r2, r3, #32
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004c3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3710      	adds	r7, #16
 8004c40:	46bd      	mov	sp, r7
 8004c42:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004c46:	b004      	add	sp, #16
 8004c48:	4770      	bx	lr
 8004c4a:	bf00      	nop
 8004c4c:	ffbdffbf 	.word	0xffbdffbf

08004c50 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b083      	sub	sp, #12
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	f023 0201 	bic.w	r2, r3, #1
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004c64:	2300      	movs	r3, #0
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	370c      	adds	r7, #12
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr

08004c72 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004c72:	b580      	push	{r7, lr}
 8004c74:	b084      	sub	sp, #16
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	6078      	str	r0, [r7, #4]
 8004c7a:	460b      	mov	r3, r1
 8004c7c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	68db      	ldr	r3, [r3, #12]
 8004c86:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004c8e:	78fb      	ldrb	r3, [r7, #3]
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d115      	bne.n	8004cc0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	68db      	ldr	r3, [r3, #12]
 8004c98:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004ca0:	2001      	movs	r0, #1
 8004ca2:	f7fc fa87 	bl	80011b4 <HAL_Delay>
      ms++;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	3301      	adds	r3, #1
 8004caa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f000 fa29 	bl	8005104 <USB_GetMode>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d01e      	beq.n	8004cf6 <USB_SetCurrentMode+0x84>
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2b31      	cmp	r3, #49	; 0x31
 8004cbc:	d9f0      	bls.n	8004ca0 <USB_SetCurrentMode+0x2e>
 8004cbe:	e01a      	b.n	8004cf6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004cc0:	78fb      	ldrb	r3, [r7, #3]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d115      	bne.n	8004cf2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	68db      	ldr	r3, [r3, #12]
 8004cca:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004cd2:	2001      	movs	r0, #1
 8004cd4:	f7fc fa6e 	bl	80011b4 <HAL_Delay>
      ms++;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	3301      	adds	r3, #1
 8004cdc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f000 fa10 	bl	8005104 <USB_GetMode>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d005      	beq.n	8004cf6 <USB_SetCurrentMode+0x84>
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2b31      	cmp	r3, #49	; 0x31
 8004cee:	d9f0      	bls.n	8004cd2 <USB_SetCurrentMode+0x60>
 8004cf0:	e001      	b.n	8004cf6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e005      	b.n	8004d02 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2b32      	cmp	r3, #50	; 0x32
 8004cfa:	d101      	bne.n	8004d00 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e000      	b.n	8004d02 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004d00:	2300      	movs	r3, #0
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3710      	adds	r7, #16
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}
	...

08004d0c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004d0c:	b084      	sub	sp, #16
 8004d0e:	b580      	push	{r7, lr}
 8004d10:	b086      	sub	sp, #24
 8004d12:	af00      	add	r7, sp, #0
 8004d14:	6078      	str	r0, [r7, #4]
 8004d16:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004d1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004d26:	2300      	movs	r3, #0
 8004d28:	613b      	str	r3, [r7, #16]
 8004d2a:	e009      	b.n	8004d40 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004d2c:	687a      	ldr	r2, [r7, #4]
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	3340      	adds	r3, #64	; 0x40
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	4413      	add	r3, r2
 8004d36:	2200      	movs	r2, #0
 8004d38:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	3301      	adds	r3, #1
 8004d3e:	613b      	str	r3, [r7, #16]
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	2b0e      	cmp	r3, #14
 8004d44:	d9f2      	bls.n	8004d2c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004d46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d11c      	bne.n	8004d86 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	68fa      	ldr	r2, [r7, #12]
 8004d56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d5a:	f043 0302 	orr.w	r3, r3, #2
 8004d5e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d64:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	601a      	str	r2, [r3, #0]
 8004d84:	e005      	b.n	8004d92 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d8a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004d98:	461a      	mov	r2, r3
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004da4:	4619      	mov	r1, r3
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dac:	461a      	mov	r2, r3
 8004dae:	680b      	ldr	r3, [r1, #0]
 8004db0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d10c      	bne.n	8004dd2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d104      	bne.n	8004dc8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004dbe:	2100      	movs	r1, #0
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	f000 f965 	bl	8005090 <USB_SetDevSpeed>
 8004dc6:	e008      	b.n	8004dda <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004dc8:	2101      	movs	r1, #1
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f000 f960 	bl	8005090 <USB_SetDevSpeed>
 8004dd0:	e003      	b.n	8004dda <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004dd2:	2103      	movs	r1, #3
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f000 f95b 	bl	8005090 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004dda:	2110      	movs	r1, #16
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	f000 f8f3 	bl	8004fc8 <USB_FlushTxFifo>
 8004de2:	4603      	mov	r3, r0
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d001      	beq.n	8004dec <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f000 f91f 	bl	8005030 <USB_FlushRxFifo>
 8004df2:	4603      	mov	r3, r0
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d001      	beq.n	8004dfc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e02:	461a      	mov	r2, r3
 8004e04:	2300      	movs	r3, #0
 8004e06:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e0e:	461a      	mov	r2, r3
 8004e10:	2300      	movs	r3, #0
 8004e12:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e1a:	461a      	mov	r2, r3
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e20:	2300      	movs	r3, #0
 8004e22:	613b      	str	r3, [r7, #16]
 8004e24:	e043      	b.n	8004eae <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	015a      	lsls	r2, r3, #5
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	4413      	add	r3, r2
 8004e2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e3c:	d118      	bne.n	8004e70 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d10a      	bne.n	8004e5a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	015a      	lsls	r2, r3, #5
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	4413      	add	r3, r2
 8004e4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e50:	461a      	mov	r2, r3
 8004e52:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004e56:	6013      	str	r3, [r2, #0]
 8004e58:	e013      	b.n	8004e82 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	015a      	lsls	r2, r3, #5
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	4413      	add	r3, r2
 8004e62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e66:	461a      	mov	r2, r3
 8004e68:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004e6c:	6013      	str	r3, [r2, #0]
 8004e6e:	e008      	b.n	8004e82 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	015a      	lsls	r2, r3, #5
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	4413      	add	r3, r2
 8004e78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e7c:	461a      	mov	r2, r3
 8004e7e:	2300      	movs	r3, #0
 8004e80:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	015a      	lsls	r2, r3, #5
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	4413      	add	r3, r2
 8004e8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e8e:	461a      	mov	r2, r3
 8004e90:	2300      	movs	r3, #0
 8004e92:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	015a      	lsls	r2, r3, #5
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	4413      	add	r3, r2
 8004e9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ea0:	461a      	mov	r2, r3
 8004ea2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004ea6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	3301      	adds	r3, #1
 8004eac:	613b      	str	r3, [r7, #16]
 8004eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb0:	693a      	ldr	r2, [r7, #16]
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d3b7      	bcc.n	8004e26 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	613b      	str	r3, [r7, #16]
 8004eba:	e043      	b.n	8004f44 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	015a      	lsls	r2, r3, #5
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	4413      	add	r3, r2
 8004ec4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ece:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ed2:	d118      	bne.n	8004f06 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d10a      	bne.n	8004ef0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	015a      	lsls	r2, r3, #5
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	4413      	add	r3, r2
 8004ee2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ee6:	461a      	mov	r2, r3
 8004ee8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004eec:	6013      	str	r3, [r2, #0]
 8004eee:	e013      	b.n	8004f18 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	015a      	lsls	r2, r3, #5
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	4413      	add	r3, r2
 8004ef8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004efc:	461a      	mov	r2, r3
 8004efe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004f02:	6013      	str	r3, [r2, #0]
 8004f04:	e008      	b.n	8004f18 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	015a      	lsls	r2, r3, #5
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	4413      	add	r3, r2
 8004f0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f12:	461a      	mov	r2, r3
 8004f14:	2300      	movs	r3, #0
 8004f16:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	015a      	lsls	r2, r3, #5
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	4413      	add	r3, r2
 8004f20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f24:	461a      	mov	r2, r3
 8004f26:	2300      	movs	r3, #0
 8004f28:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	015a      	lsls	r2, r3, #5
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	4413      	add	r3, r2
 8004f32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f36:	461a      	mov	r2, r3
 8004f38:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004f3c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	3301      	adds	r3, #1
 8004f42:	613b      	str	r3, [r7, #16]
 8004f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f46:	693a      	ldr	r2, [r7, #16]
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d3b7      	bcc.n	8004ebc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f52:	691b      	ldr	r3, [r3, #16]
 8004f54:	68fa      	ldr	r2, [r7, #12]
 8004f56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f5a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f5e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2200      	movs	r2, #0
 8004f64:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004f6c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d105      	bne.n	8004f80 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	699b      	ldr	r3, [r3, #24]
 8004f78:	f043 0210 	orr.w	r2, r3, #16
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	699a      	ldr	r2, [r3, #24]
 8004f84:	4b0e      	ldr	r3, [pc, #56]	; (8004fc0 <USB_DevInit+0x2b4>)
 8004f86:	4313      	orrs	r3, r2
 8004f88:	687a      	ldr	r2, [r7, #4]
 8004f8a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004f8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d005      	beq.n	8004f9e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	699b      	ldr	r3, [r3, #24]
 8004f96:	f043 0208 	orr.w	r2, r3, #8
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004f9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d105      	bne.n	8004fb0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	699a      	ldr	r2, [r3, #24]
 8004fa8:	4b06      	ldr	r3, [pc, #24]	; (8004fc4 <USB_DevInit+0x2b8>)
 8004faa:	4313      	orrs	r3, r2
 8004fac:	687a      	ldr	r2, [r7, #4]
 8004fae:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004fb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3718      	adds	r7, #24
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004fbc:	b004      	add	sp, #16
 8004fbe:	4770      	bx	lr
 8004fc0:	803c3800 	.word	0x803c3800
 8004fc4:	40000004 	.word	0x40000004

08004fc8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b085      	sub	sp, #20
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	3301      	adds	r3, #1
 8004fda:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	4a13      	ldr	r2, [pc, #76]	; (800502c <USB_FlushTxFifo+0x64>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d901      	bls.n	8004fe8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004fe4:	2303      	movs	r3, #3
 8004fe6:	e01b      	b.n	8005020 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	691b      	ldr	r3, [r3, #16]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	daf2      	bge.n	8004fd6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	019b      	lsls	r3, r3, #6
 8004ff8:	f043 0220 	orr.w	r2, r3, #32
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	3301      	adds	r3, #1
 8005004:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	4a08      	ldr	r2, [pc, #32]	; (800502c <USB_FlushTxFifo+0x64>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d901      	bls.n	8005012 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800500e:	2303      	movs	r3, #3
 8005010:	e006      	b.n	8005020 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	691b      	ldr	r3, [r3, #16]
 8005016:	f003 0320 	and.w	r3, r3, #32
 800501a:	2b20      	cmp	r3, #32
 800501c:	d0f0      	beq.n	8005000 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800501e:	2300      	movs	r3, #0
}
 8005020:	4618      	mov	r0, r3
 8005022:	3714      	adds	r7, #20
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr
 800502c:	00030d40 	.word	0x00030d40

08005030 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005030:	b480      	push	{r7}
 8005032:	b085      	sub	sp, #20
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005038:	2300      	movs	r3, #0
 800503a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	3301      	adds	r3, #1
 8005040:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	4a11      	ldr	r2, [pc, #68]	; (800508c <USB_FlushRxFifo+0x5c>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d901      	bls.n	800504e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800504a:	2303      	movs	r3, #3
 800504c:	e018      	b.n	8005080 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	691b      	ldr	r3, [r3, #16]
 8005052:	2b00      	cmp	r3, #0
 8005054:	daf2      	bge.n	800503c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005056:	2300      	movs	r3, #0
 8005058:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2210      	movs	r2, #16
 800505e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	3301      	adds	r3, #1
 8005064:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	4a08      	ldr	r2, [pc, #32]	; (800508c <USB_FlushRxFifo+0x5c>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d901      	bls.n	8005072 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800506e:	2303      	movs	r3, #3
 8005070:	e006      	b.n	8005080 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	691b      	ldr	r3, [r3, #16]
 8005076:	f003 0310 	and.w	r3, r3, #16
 800507a:	2b10      	cmp	r3, #16
 800507c:	d0f0      	beq.n	8005060 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800507e:	2300      	movs	r3, #0
}
 8005080:	4618      	mov	r0, r3
 8005082:	3714      	adds	r7, #20
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr
 800508c:	00030d40 	.word	0x00030d40

08005090 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005090:	b480      	push	{r7}
 8005092:	b085      	sub	sp, #20
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	460b      	mov	r3, r1
 800509a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050a6:	681a      	ldr	r2, [r3, #0]
 80050a8:	78fb      	ldrb	r3, [r7, #3]
 80050aa:	68f9      	ldr	r1, [r7, #12]
 80050ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80050b0:	4313      	orrs	r3, r2
 80050b2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80050b4:	2300      	movs	r3, #0
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3714      	adds	r7, #20
 80050ba:	46bd      	mov	sp, r7
 80050bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c0:	4770      	bx	lr

080050c2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80050c2:	b480      	push	{r7}
 80050c4:	b085      	sub	sp, #20
 80050c6:	af00      	add	r7, sp, #0
 80050c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	68fa      	ldr	r2, [r7, #12]
 80050d8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80050dc:	f023 0303 	bic.w	r3, r3, #3
 80050e0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	68fa      	ldr	r2, [r7, #12]
 80050ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050f0:	f043 0302 	orr.w	r3, r3, #2
 80050f4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80050f6:	2300      	movs	r3, #0
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3714      	adds	r7, #20
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr

08005104 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005104:	b480      	push	{r7}
 8005106:	b083      	sub	sp, #12
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	695b      	ldr	r3, [r3, #20]
 8005110:	f003 0301 	and.w	r3, r3, #1
}
 8005114:	4618      	mov	r0, r3
 8005116:	370c      	adds	r7, #12
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr

08005120 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005120:	b480      	push	{r7}
 8005122:	b085      	sub	sp, #20
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005128:	2300      	movs	r3, #0
 800512a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	3301      	adds	r3, #1
 8005130:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	4a13      	ldr	r2, [pc, #76]	; (8005184 <USB_CoreReset+0x64>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d901      	bls.n	800513e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800513a:	2303      	movs	r3, #3
 800513c:	e01b      	b.n	8005176 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	691b      	ldr	r3, [r3, #16]
 8005142:	2b00      	cmp	r3, #0
 8005144:	daf2      	bge.n	800512c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005146:	2300      	movs	r3, #0
 8005148:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	691b      	ldr	r3, [r3, #16]
 800514e:	f043 0201 	orr.w	r2, r3, #1
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	3301      	adds	r3, #1
 800515a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	4a09      	ldr	r2, [pc, #36]	; (8005184 <USB_CoreReset+0x64>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d901      	bls.n	8005168 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005164:	2303      	movs	r3, #3
 8005166:	e006      	b.n	8005176 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	691b      	ldr	r3, [r3, #16]
 800516c:	f003 0301 	and.w	r3, r3, #1
 8005170:	2b01      	cmp	r3, #1
 8005172:	d0f0      	beq.n	8005156 <USB_CoreReset+0x36>

  return HAL_OK;
 8005174:	2300      	movs	r3, #0
}
 8005176:	4618      	mov	r0, r3
 8005178:	3714      	adds	r7, #20
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr
 8005182:	bf00      	nop
 8005184:	00030d40 	.word	0x00030d40

08005188 <__libc_init_array>:
 8005188:	b570      	push	{r4, r5, r6, lr}
 800518a:	4d0d      	ldr	r5, [pc, #52]	; (80051c0 <__libc_init_array+0x38>)
 800518c:	4c0d      	ldr	r4, [pc, #52]	; (80051c4 <__libc_init_array+0x3c>)
 800518e:	1b64      	subs	r4, r4, r5
 8005190:	10a4      	asrs	r4, r4, #2
 8005192:	2600      	movs	r6, #0
 8005194:	42a6      	cmp	r6, r4
 8005196:	d109      	bne.n	80051ac <__libc_init_array+0x24>
 8005198:	4d0b      	ldr	r5, [pc, #44]	; (80051c8 <__libc_init_array+0x40>)
 800519a:	4c0c      	ldr	r4, [pc, #48]	; (80051cc <__libc_init_array+0x44>)
 800519c:	f000 f820 	bl	80051e0 <_init>
 80051a0:	1b64      	subs	r4, r4, r5
 80051a2:	10a4      	asrs	r4, r4, #2
 80051a4:	2600      	movs	r6, #0
 80051a6:	42a6      	cmp	r6, r4
 80051a8:	d105      	bne.n	80051b6 <__libc_init_array+0x2e>
 80051aa:	bd70      	pop	{r4, r5, r6, pc}
 80051ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80051b0:	4798      	blx	r3
 80051b2:	3601      	adds	r6, #1
 80051b4:	e7ee      	b.n	8005194 <__libc_init_array+0xc>
 80051b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80051ba:	4798      	blx	r3
 80051bc:	3601      	adds	r6, #1
 80051be:	e7f2      	b.n	80051a6 <__libc_init_array+0x1e>
 80051c0:	0800529c 	.word	0x0800529c
 80051c4:	0800529c 	.word	0x0800529c
 80051c8:	0800529c 	.word	0x0800529c
 80051cc:	080052a0 	.word	0x080052a0

080051d0 <memset>:
 80051d0:	4402      	add	r2, r0
 80051d2:	4603      	mov	r3, r0
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d100      	bne.n	80051da <memset+0xa>
 80051d8:	4770      	bx	lr
 80051da:	f803 1b01 	strb.w	r1, [r3], #1
 80051de:	e7f9      	b.n	80051d4 <memset+0x4>

080051e0 <_init>:
 80051e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051e2:	bf00      	nop
 80051e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051e6:	bc08      	pop	{r3}
 80051e8:	469e      	mov	lr, r3
 80051ea:	4770      	bx	lr

080051ec <_fini>:
 80051ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051ee:	bf00      	nop
 80051f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051f2:	bc08      	pop	{r3}
 80051f4:	469e      	mov	lr, r3
 80051f6:	4770      	bx	lr
